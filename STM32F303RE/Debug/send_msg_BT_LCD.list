
send_msg_BT_LCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004660  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  080047f4  080047f4  000147f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004830  08004830  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08004830  08004830  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004830  08004830  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004830  08004830  00014830  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004834  08004834  00014834  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004838  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          0000021c  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000228  20000228  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 14 .debug_info   000106be  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002453  00000000  00000000  0003073d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000d68  00000000  00000000  00032b90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000a7c  00000000  00000000  000338f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00020ee3  00000000  00000000  00034374  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00012185  00000000  00000000  00055257  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c997e  00000000  00000000  000673dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000037f4  00000000  00000000  00130d5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000065  00000000  00000000  00134550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080047dc 	.word	0x080047dc

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	080047dc 	.word	0x080047dc

080001d4 <strlen>:
 80001d4:	4603      	mov	r3, r0
 80001d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001da:	2a00      	cmp	r2, #0
 80001dc:	d1fb      	bne.n	80001d6 <strlen+0x2>
 80001de:	1a18      	subs	r0, r3, r0
 80001e0:	3801      	subs	r0, #1
 80001e2:	4770      	bx	lr

080001e4 <delay>:
#define timer htim1


extern TIM_HandleTypeDef timer;
void delay (uint16_t us)
{
 80001e4:	b480      	push	{r7}
 80001e6:	b083      	sub	sp, #12
 80001e8:	af00      	add	r7, sp, #0
 80001ea:	4603      	mov	r3, r0
 80001ec:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&timer, 0);
 80001ee:	4b09      	ldr	r3, [pc, #36]	; (8000214 <delay+0x30>)
 80001f0:	681b      	ldr	r3, [r3, #0]
 80001f2:	2200      	movs	r2, #0
 80001f4:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&timer) < us);
 80001f6:	bf00      	nop
 80001f8:	4b06      	ldr	r3, [pc, #24]	; (8000214 <delay+0x30>)
 80001fa:	681b      	ldr	r3, [r3, #0]
 80001fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80001fe:	88fb      	ldrh	r3, [r7, #6]
 8000200:	429a      	cmp	r2, r3
 8000202:	d3f9      	bcc.n	80001f8 <delay+0x14>
}
 8000204:	bf00      	nop
 8000206:	bf00      	nop
 8000208:	370c      	adds	r7, #12
 800020a:	46bd      	mov	sp, r7
 800020c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000210:	4770      	bx	lr
 8000212:	bf00      	nop
 8000214:	20000028 	.word	0x20000028

08000218 <send_to_lcd>:

/****************************************************************************************************************************************************************/

void send_to_lcd (char data, int rs)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b082      	sub	sp, #8
 800021c:	af00      	add	r7, sp, #0
 800021e:	4603      	mov	r3, r0
 8000220:	6039      	str	r1, [r7, #0]
 8000222:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, rs);  // rs = 1 for data, rs=0 for command
 8000224:	683b      	ldr	r3, [r7, #0]
 8000226:	b2db      	uxtb	r3, r3
 8000228:	461a      	mov	r2, r3
 800022a:	2101      	movs	r1, #1
 800022c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000230:	f001 f890 	bl	8001354 <HAL_GPIO_WritePin>

	/* write the data to the respective pin */
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, ((data>>3)&0x01));
 8000234:	79fb      	ldrb	r3, [r7, #7]
 8000236:	08db      	lsrs	r3, r3, #3
 8000238:	b2db      	uxtb	r3, r3
 800023a:	f003 0301 	and.w	r3, r3, #1
 800023e:	b2db      	uxtb	r3, r3
 8000240:	461a      	mov	r2, r3
 8000242:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000246:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800024a:	f001 f883 	bl	8001354 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, ((data>>2)&0x01));
 800024e:	79fb      	ldrb	r3, [r7, #7]
 8000250:	089b      	lsrs	r3, r3, #2
 8000252:	b2db      	uxtb	r3, r3
 8000254:	f003 0301 	and.w	r3, r3, #1
 8000258:	b2db      	uxtb	r3, r3
 800025a:	461a      	mov	r2, r3
 800025c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000260:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000264:	f001 f876 	bl	8001354 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, ((data>>1)&0x01));
 8000268:	79fb      	ldrb	r3, [r7, #7]
 800026a:	085b      	lsrs	r3, r3, #1
 800026c:	b2db      	uxtb	r3, r3
 800026e:	f003 0301 	and.w	r3, r3, #1
 8000272:	b2db      	uxtb	r3, r3
 8000274:	461a      	mov	r2, r3
 8000276:	f44f 7100 	mov.w	r1, #512	; 0x200
 800027a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800027e:	f001 f869 	bl	8001354 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, ((data>>0)&0x01));
 8000282:	79fb      	ldrb	r3, [r7, #7]
 8000284:	f003 0301 	and.w	r3, r3, #1
 8000288:	b2db      	uxtb	r3, r3
 800028a:	461a      	mov	r2, r3
 800028c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000290:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000294:	f001 f85e 	bl	8001354 <HAL_GPIO_WritePin>

	/* Toggle EN PIN to send the data
	 * if the HCLK > 100 MHz, use the  20 us delay
	 * if the LCD still doesn't work, increase the delay to 50, 80 or 100..
	 */
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, 1);
 8000298:	2201      	movs	r2, #1
 800029a:	2110      	movs	r1, #16
 800029c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002a0:	f001 f858 	bl	8001354 <HAL_GPIO_WritePin>
	delay (20);
 80002a4:	2014      	movs	r0, #20
 80002a6:	f7ff ff9d 	bl	80001e4 <delay>
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, 0);
 80002aa:	2200      	movs	r2, #0
 80002ac:	2110      	movs	r1, #16
 80002ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002b2:	f001 f84f 	bl	8001354 <HAL_GPIO_WritePin>
	delay (20);
 80002b6:	2014      	movs	r0, #20
 80002b8:	f7ff ff94 	bl	80001e4 <delay>
}
 80002bc:	bf00      	nop
 80002be:	3708      	adds	r7, #8
 80002c0:	46bd      	mov	sp, r7
 80002c2:	bd80      	pop	{r7, pc}

080002c4 <lcd_send_cmd>:

void lcd_send_cmd (char cmd)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	b084      	sub	sp, #16
 80002c8:	af00      	add	r7, sp, #0
 80002ca:	4603      	mov	r3, r0
 80002cc:	71fb      	strb	r3, [r7, #7]
    char datatosend;

    /* send upper nibble first */
    datatosend = ((cmd>>4)&0x0f);
 80002ce:	79fb      	ldrb	r3, [r7, #7]
 80002d0:	091b      	lsrs	r3, r3, #4
 80002d2:	73fb      	strb	r3, [r7, #15]
    send_to_lcd(datatosend,0);  // RS must be 0 while sending command
 80002d4:	7bfb      	ldrb	r3, [r7, #15]
 80002d6:	2100      	movs	r1, #0
 80002d8:	4618      	mov	r0, r3
 80002da:	f7ff ff9d 	bl	8000218 <send_to_lcd>

    /* send Lower Nibble */
    datatosend = ((cmd)&0x0f);
 80002de:	79fb      	ldrb	r3, [r7, #7]
 80002e0:	f003 030f 	and.w	r3, r3, #15
 80002e4:	73fb      	strb	r3, [r7, #15]
	send_to_lcd(datatosend, 0);
 80002e6:	7bfb      	ldrb	r3, [r7, #15]
 80002e8:	2100      	movs	r1, #0
 80002ea:	4618      	mov	r0, r3
 80002ec:	f7ff ff94 	bl	8000218 <send_to_lcd>
}
 80002f0:	bf00      	nop
 80002f2:	3710      	adds	r7, #16
 80002f4:	46bd      	mov	sp, r7
 80002f6:	bd80      	pop	{r7, pc}

080002f8 <lcd_send_data>:

void lcd_send_data (char data)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b084      	sub	sp, #16
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	4603      	mov	r3, r0
 8000300:	71fb      	strb	r3, [r7, #7]
	char datatosend;

	/* send higher nibble */
	datatosend = ((data>>4)&0x0f);
 8000302:	79fb      	ldrb	r3, [r7, #7]
 8000304:	091b      	lsrs	r3, r3, #4
 8000306:	73fb      	strb	r3, [r7, #15]
	send_to_lcd(datatosend, 1);  // rs =1 for sending data
 8000308:	7bfb      	ldrb	r3, [r7, #15]
 800030a:	2101      	movs	r1, #1
 800030c:	4618      	mov	r0, r3
 800030e:	f7ff ff83 	bl	8000218 <send_to_lcd>

	/* send Lower nibble */
	datatosend = ((data)&0x0f);
 8000312:	79fb      	ldrb	r3, [r7, #7]
 8000314:	f003 030f 	and.w	r3, r3, #15
 8000318:	73fb      	strb	r3, [r7, #15]
	send_to_lcd(datatosend, 1);
 800031a:	7bfb      	ldrb	r3, [r7, #15]
 800031c:	2101      	movs	r1, #1
 800031e:	4618      	mov	r0, r3
 8000320:	f7ff ff7a 	bl	8000218 <send_to_lcd>
}
 8000324:	bf00      	nop
 8000326:	3710      	adds	r7, #16
 8000328:	46bd      	mov	sp, r7
 800032a:	bd80      	pop	{r7, pc}

0800032c <lcd_put_cur>:
	lcd_send_cmd(0x01);
	HAL_Delay(2);
}

void lcd_put_cur(int row, int col)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	b082      	sub	sp, #8
 8000330:	af00      	add	r7, sp, #0
 8000332:	6078      	str	r0, [r7, #4]
 8000334:	6039      	str	r1, [r7, #0]
    switch (row)
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	2b00      	cmp	r3, #0
 800033a:	d003      	beq.n	8000344 <lcd_put_cur+0x18>
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	2b01      	cmp	r3, #1
 8000340:	d005      	beq.n	800034e <lcd_put_cur+0x22>
 8000342:	e009      	b.n	8000358 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 8000344:	683b      	ldr	r3, [r7, #0]
 8000346:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800034a:	603b      	str	r3, [r7, #0]
            break;
 800034c:	e004      	b.n	8000358 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 800034e:	683b      	ldr	r3, [r7, #0]
 8000350:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000354:	603b      	str	r3, [r7, #0]
            break;
 8000356:	bf00      	nop
    }

    lcd_send_cmd (col);
 8000358:	683b      	ldr	r3, [r7, #0]
 800035a:	b2db      	uxtb	r3, r3
 800035c:	4618      	mov	r0, r3
 800035e:	f7ff ffb1 	bl	80002c4 <lcd_send_cmd>
}
 8000362:	bf00      	nop
 8000364:	3708      	adds	r7, #8
 8000366:	46bd      	mov	sp, r7
 8000368:	bd80      	pop	{r7, pc}

0800036a <lcd_init>:


void lcd_init (void)
{
 800036a:	b580      	push	{r7, lr}
 800036c:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 800036e:	2032      	movs	r0, #50	; 0x32
 8000370:	f000 fcba 	bl	8000ce8 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000374:	2030      	movs	r0, #48	; 0x30
 8000376:	f7ff ffa5 	bl	80002c4 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 800037a:	2005      	movs	r0, #5
 800037c:	f000 fcb4 	bl	8000ce8 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000380:	2030      	movs	r0, #48	; 0x30
 8000382:	f7ff ff9f 	bl	80002c4 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8000386:	2001      	movs	r0, #1
 8000388:	f000 fcae 	bl	8000ce8 <HAL_Delay>
	lcd_send_cmd (0x30);
 800038c:	2030      	movs	r0, #48	; 0x30
 800038e:	f7ff ff99 	bl	80002c4 <lcd_send_cmd>
	HAL_Delay(10);
 8000392:	200a      	movs	r0, #10
 8000394:	f000 fca8 	bl	8000ce8 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8000398:	2020      	movs	r0, #32
 800039a:	f7ff ff93 	bl	80002c4 <lcd_send_cmd>
	HAL_Delay(10);
 800039e:	200a      	movs	r0, #10
 80003a0:	f000 fca2 	bl	8000ce8 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 80003a4:	2028      	movs	r0, #40	; 0x28
 80003a6:	f7ff ff8d 	bl	80002c4 <lcd_send_cmd>
	HAL_Delay(1);
 80003aa:	2001      	movs	r0, #1
 80003ac:	f000 fc9c 	bl	8000ce8 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 80003b0:	2008      	movs	r0, #8
 80003b2:	f7ff ff87 	bl	80002c4 <lcd_send_cmd>
	HAL_Delay(1);
 80003b6:	2001      	movs	r0, #1
 80003b8:	f000 fc96 	bl	8000ce8 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 80003bc:	2001      	movs	r0, #1
 80003be:	f7ff ff81 	bl	80002c4 <lcd_send_cmd>
	HAL_Delay(1);
 80003c2:	2001      	movs	r0, #1
 80003c4:	f000 fc90 	bl	8000ce8 <HAL_Delay>
	HAL_Delay(1);
 80003c8:	2001      	movs	r0, #1
 80003ca:	f000 fc8d 	bl	8000ce8 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 80003ce:	2006      	movs	r0, #6
 80003d0:	f7ff ff78 	bl	80002c4 <lcd_send_cmd>
	HAL_Delay(1);
 80003d4:	2001      	movs	r0, #1
 80003d6:	f000 fc87 	bl	8000ce8 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 80003da:	200c      	movs	r0, #12
 80003dc:	f7ff ff72 	bl	80002c4 <lcd_send_cmd>
}
 80003e0:	bf00      	nop
 80003e2:	bd80      	pop	{r7, pc}

080003e4 <lcd_send_string>:

void lcd_send_string (char *str)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	b082      	sub	sp, #8
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 80003ec:	e006      	b.n	80003fc <lcd_send_string+0x18>
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	1c5a      	adds	r2, r3, #1
 80003f2:	607a      	str	r2, [r7, #4]
 80003f4:	781b      	ldrb	r3, [r3, #0]
 80003f6:	4618      	mov	r0, r3
 80003f8:	f7ff ff7e 	bl	80002f8 <lcd_send_data>
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	781b      	ldrb	r3, [r3, #0]
 8000400:	2b00      	cmp	r3, #0
 8000402:	d1f4      	bne.n	80003ee <lcd_send_string+0xa>
}
 8000404:	bf00      	nop
 8000406:	bf00      	nop
 8000408:	3708      	adds	r7, #8
 800040a:	46bd      	mov	sp, r7
 800040c:	bd80      	pop	{r7, pc}
	...

08000410 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000410:	b580      	push	{r7, lr}
 8000412:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000414:	f000 fc02 	bl	8000c1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000418:	f000 f828 	bl	800046c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800041c:	f000 f98e 	bl	800073c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000420:	f000 f95c 	bl	80006dc <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8000424:	f000 f92a 	bl	800067c <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8000428:	f000 f8da 	bl	80005e0 <MX_TIM2_Init>
  MX_TIM1_Init();
 800042c:	f000 f884 	bl	8000538 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  memset(buffer, 0, sizeof(buffer));
 8000430:	2228      	movs	r2, #40	; 0x28
 8000432:	2100      	movs	r1, #0
 8000434:	4809      	ldr	r0, [pc, #36]	; (800045c <main+0x4c>)
 8000436:	f004 f97c 	bl	8004732 <memset>
  HAL_TIM_Base_Start_IT(&htim2);
 800043a:	4809      	ldr	r0, [pc, #36]	; (8000460 <main+0x50>)
 800043c:	f002 fcbc 	bl	8002db8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim1);
 8000440:	4808      	ldr	r0, [pc, #32]	; (8000464 <main+0x54>)
 8000442:	f002 fcb9 	bl	8002db8 <HAL_TIM_Base_Start_IT>
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);
 8000446:	4b08      	ldr	r3, [pc, #32]	; (8000468 <main+0x58>)
 8000448:	681b      	ldr	r3, [r3, #0]
 800044a:	681a      	ldr	r2, [r3, #0]
 800044c:	4b06      	ldr	r3, [pc, #24]	; (8000468 <main+0x58>)
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	f042 0220 	orr.w	r2, r2, #32
 8000454:	601a      	str	r2, [r3, #0]
  lcd_init();
 8000456:	f7ff ff88 	bl	800036a <lcd_init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800045a:	e7fe      	b.n	800045a <main+0x4a>
 800045c:	200001d0 	.word	0x200001d0
 8000460:	20000074 	.word	0x20000074
 8000464:	20000028 	.word	0x20000028
 8000468:	200000c0 	.word	0x200000c0

0800046c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	b0a6      	sub	sp, #152	; 0x98
 8000470:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000472:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000476:	2228      	movs	r2, #40	; 0x28
 8000478:	2100      	movs	r1, #0
 800047a:	4618      	mov	r0, r3
 800047c:	f004 f959 	bl	8004732 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000480:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000484:	2200      	movs	r2, #0
 8000486:	601a      	str	r2, [r3, #0]
 8000488:	605a      	str	r2, [r3, #4]
 800048a:	609a      	str	r2, [r3, #8]
 800048c:	60da      	str	r2, [r3, #12]
 800048e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000490:	1d3b      	adds	r3, r7, #4
 8000492:	2258      	movs	r2, #88	; 0x58
 8000494:	2100      	movs	r1, #0
 8000496:	4618      	mov	r0, r3
 8000498:	f004 f94b 	bl	8004732 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800049c:	2301      	movs	r3, #1
 800049e:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80004a0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80004a4:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004a6:	2301      	movs	r3, #1
 80004a8:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004aa:	2302      	movs	r3, #2
 80004ac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80004b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80004b4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80004b8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80004bc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80004c0:	2300      	movs	r3, #0
 80004c2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004c6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80004ca:	4618      	mov	r0, r3
 80004cc:	f000 ff74 	bl	80013b8 <HAL_RCC_OscConfig>
 80004d0:	4603      	mov	r3, r0
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	d001      	beq.n	80004da <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80004d6:	f000 f999 	bl	800080c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004da:	230f      	movs	r3, #15
 80004dc:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004de:	2302      	movs	r3, #2
 80004e0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004e2:	2300      	movs	r3, #0
 80004e4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80004e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004ea:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004ec:	2300      	movs	r3, #0
 80004ee:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80004f0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80004f4:	2102      	movs	r1, #2
 80004f6:	4618      	mov	r0, r3
 80004f8:	f001 ffb2 	bl	8002460 <HAL_RCC_ClockConfig>
 80004fc:	4603      	mov	r3, r0
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d001      	beq.n	8000506 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000502:	f000 f983 	bl	800080c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 8000506:	4b0b      	ldr	r3, [pc, #44]	; (8000534 <SystemClock_Config+0xc8>)
 8000508:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_TIM1|RCC_PERIPHCLK_TIM2;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800050a:	2300      	movs	r3, #0
 800050c:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800050e:	2300      	movs	r3, #0
 8000510:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000512:	2300      	movs	r3, #0
 8000514:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_HCLK;
 8000516:	2300      	movs	r3, #0
 8000518:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800051a:	1d3b      	adds	r3, r7, #4
 800051c:	4618      	mov	r0, r3
 800051e:	f002 f9d5 	bl	80028cc <HAL_RCCEx_PeriphCLKConfig>
 8000522:	4603      	mov	r3, r0
 8000524:	2b00      	cmp	r3, #0
 8000526:	d001      	beq.n	800052c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000528:	f000 f970 	bl	800080c <Error_Handler>
  }
}
 800052c:	bf00      	nop
 800052e:	3798      	adds	r7, #152	; 0x98
 8000530:	46bd      	mov	sp, r7
 8000532:	bd80      	pop	{r7, pc}
 8000534:	00101003 	.word	0x00101003

08000538 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b088      	sub	sp, #32
 800053c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800053e:	f107 0310 	add.w	r3, r7, #16
 8000542:	2200      	movs	r2, #0
 8000544:	601a      	str	r2, [r3, #0]
 8000546:	605a      	str	r2, [r3, #4]
 8000548:	609a      	str	r2, [r3, #8]
 800054a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800054c:	1d3b      	adds	r3, r7, #4
 800054e:	2200      	movs	r2, #0
 8000550:	601a      	str	r2, [r3, #0]
 8000552:	605a      	str	r2, [r3, #4]
 8000554:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000556:	4b20      	ldr	r3, [pc, #128]	; (80005d8 <MX_TIM1_Init+0xa0>)
 8000558:	4a20      	ldr	r2, [pc, #128]	; (80005dc <MX_TIM1_Init+0xa4>)
 800055a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 800055c:	4b1e      	ldr	r3, [pc, #120]	; (80005d8 <MX_TIM1_Init+0xa0>)
 800055e:	2247      	movs	r2, #71	; 0x47
 8000560:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000562:	4b1d      	ldr	r3, [pc, #116]	; (80005d8 <MX_TIM1_Init+0xa0>)
 8000564:	2200      	movs	r2, #0
 8000566:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 8000568:	4b1b      	ldr	r3, [pc, #108]	; (80005d8 <MX_TIM1_Init+0xa0>)
 800056a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800056e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000570:	4b19      	ldr	r3, [pc, #100]	; (80005d8 <MX_TIM1_Init+0xa0>)
 8000572:	2200      	movs	r2, #0
 8000574:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000576:	4b18      	ldr	r3, [pc, #96]	; (80005d8 <MX_TIM1_Init+0xa0>)
 8000578:	2200      	movs	r2, #0
 800057a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800057c:	4b16      	ldr	r3, [pc, #88]	; (80005d8 <MX_TIM1_Init+0xa0>)
 800057e:	2200      	movs	r2, #0
 8000580:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000582:	4815      	ldr	r0, [pc, #84]	; (80005d8 <MX_TIM1_Init+0xa0>)
 8000584:	f002 fbc0 	bl	8002d08 <HAL_TIM_Base_Init>
 8000588:	4603      	mov	r3, r0
 800058a:	2b00      	cmp	r3, #0
 800058c:	d001      	beq.n	8000592 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800058e:	f000 f93d 	bl	800080c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000592:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000596:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000598:	f107 0310 	add.w	r3, r7, #16
 800059c:	4619      	mov	r1, r3
 800059e:	480e      	ldr	r0, [pc, #56]	; (80005d8 <MX_TIM1_Init+0xa0>)
 80005a0:	f002 fd99 	bl	80030d6 <HAL_TIM_ConfigClockSource>
 80005a4:	4603      	mov	r3, r0
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d001      	beq.n	80005ae <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80005aa:	f000 f92f 	bl	800080c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005ae:	2300      	movs	r3, #0
 80005b0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80005b2:	2300      	movs	r3, #0
 80005b4:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005b6:	2300      	movs	r3, #0
 80005b8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80005ba:	1d3b      	adds	r3, r7, #4
 80005bc:	4619      	mov	r1, r3
 80005be:	4806      	ldr	r0, [pc, #24]	; (80005d8 <MX_TIM1_Init+0xa0>)
 80005c0:	f002 ffbc 	bl	800353c <HAL_TIMEx_MasterConfigSynchronization>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d001      	beq.n	80005ce <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80005ca:	f000 f91f 	bl	800080c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80005ce:	bf00      	nop
 80005d0:	3720      	adds	r7, #32
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bd80      	pop	{r7, pc}
 80005d6:	bf00      	nop
 80005d8:	20000028 	.word	0x20000028
 80005dc:	40012c00 	.word	0x40012c00

080005e0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b088      	sub	sp, #32
 80005e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80005e6:	f107 0310 	add.w	r3, r7, #16
 80005ea:	2200      	movs	r2, #0
 80005ec:	601a      	str	r2, [r3, #0]
 80005ee:	605a      	str	r2, [r3, #4]
 80005f0:	609a      	str	r2, [r3, #8]
 80005f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005f4:	1d3b      	adds	r3, r7, #4
 80005f6:	2200      	movs	r2, #0
 80005f8:	601a      	str	r2, [r3, #0]
 80005fa:	605a      	str	r2, [r3, #4]
 80005fc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80005fe:	4b1e      	ldr	r3, [pc, #120]	; (8000678 <MX_TIM2_Init+0x98>)
 8000600:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000604:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 720;
 8000606:	4b1c      	ldr	r3, [pc, #112]	; (8000678 <MX_TIM2_Init+0x98>)
 8000608:	f44f 7234 	mov.w	r2, #720	; 0x2d0
 800060c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800060e:	4b1a      	ldr	r3, [pc, #104]	; (8000678 <MX_TIM2_Init+0x98>)
 8000610:	2200      	movs	r2, #0
 8000612:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1999;
 8000614:	4b18      	ldr	r3, [pc, #96]	; (8000678 <MX_TIM2_Init+0x98>)
 8000616:	f240 72cf 	movw	r2, #1999	; 0x7cf
 800061a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800061c:	4b16      	ldr	r3, [pc, #88]	; (8000678 <MX_TIM2_Init+0x98>)
 800061e:	2200      	movs	r2, #0
 8000620:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000622:	4b15      	ldr	r3, [pc, #84]	; (8000678 <MX_TIM2_Init+0x98>)
 8000624:	2200      	movs	r2, #0
 8000626:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000628:	4813      	ldr	r0, [pc, #76]	; (8000678 <MX_TIM2_Init+0x98>)
 800062a:	f002 fb6d 	bl	8002d08 <HAL_TIM_Base_Init>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d001      	beq.n	8000638 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8000634:	f000 f8ea 	bl	800080c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000638:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800063c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800063e:	f107 0310 	add.w	r3, r7, #16
 8000642:	4619      	mov	r1, r3
 8000644:	480c      	ldr	r0, [pc, #48]	; (8000678 <MX_TIM2_Init+0x98>)
 8000646:	f002 fd46 	bl	80030d6 <HAL_TIM_ConfigClockSource>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d001      	beq.n	8000654 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000650:	f000 f8dc 	bl	800080c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000654:	2300      	movs	r3, #0
 8000656:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000658:	2300      	movs	r3, #0
 800065a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800065c:	1d3b      	adds	r3, r7, #4
 800065e:	4619      	mov	r1, r3
 8000660:	4805      	ldr	r0, [pc, #20]	; (8000678 <MX_TIM2_Init+0x98>)
 8000662:	f002 ff6b 	bl	800353c <HAL_TIMEx_MasterConfigSynchronization>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d001      	beq.n	8000670 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 800066c:	f000 f8ce 	bl	800080c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000670:	bf00      	nop
 8000672:	3720      	adds	r7, #32
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}
 8000678:	20000074 	.word	0x20000074

0800067c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000680:	4b14      	ldr	r3, [pc, #80]	; (80006d4 <MX_USART1_UART_Init+0x58>)
 8000682:	4a15      	ldr	r2, [pc, #84]	; (80006d8 <MX_USART1_UART_Init+0x5c>)
 8000684:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000686:	4b13      	ldr	r3, [pc, #76]	; (80006d4 <MX_USART1_UART_Init+0x58>)
 8000688:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800068c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800068e:	4b11      	ldr	r3, [pc, #68]	; (80006d4 <MX_USART1_UART_Init+0x58>)
 8000690:	2200      	movs	r2, #0
 8000692:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000694:	4b0f      	ldr	r3, [pc, #60]	; (80006d4 <MX_USART1_UART_Init+0x58>)
 8000696:	2200      	movs	r2, #0
 8000698:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800069a:	4b0e      	ldr	r3, [pc, #56]	; (80006d4 <MX_USART1_UART_Init+0x58>)
 800069c:	2200      	movs	r2, #0
 800069e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80006a0:	4b0c      	ldr	r3, [pc, #48]	; (80006d4 <MX_USART1_UART_Init+0x58>)
 80006a2:	220c      	movs	r2, #12
 80006a4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006a6:	4b0b      	ldr	r3, [pc, #44]	; (80006d4 <MX_USART1_UART_Init+0x58>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80006ac:	4b09      	ldr	r3, [pc, #36]	; (80006d4 <MX_USART1_UART_Init+0x58>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006b2:	4b08      	ldr	r3, [pc, #32]	; (80006d4 <MX_USART1_UART_Init+0x58>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006b8:	4b06      	ldr	r3, [pc, #24]	; (80006d4 <MX_USART1_UART_Init+0x58>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80006be:	4805      	ldr	r0, [pc, #20]	; (80006d4 <MX_USART1_UART_Init+0x58>)
 80006c0:	f002 ffe6 	bl	8003690 <HAL_UART_Init>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80006ca:	f000 f89f 	bl	800080c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80006ce:	bf00      	nop
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	200000c0 	.word	0x200000c0
 80006d8:	40013800 	.word	0x40013800

080006dc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006e0:	4b14      	ldr	r3, [pc, #80]	; (8000734 <MX_USART2_UART_Init+0x58>)
 80006e2:	4a15      	ldr	r2, [pc, #84]	; (8000738 <MX_USART2_UART_Init+0x5c>)
 80006e4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80006e6:	4b13      	ldr	r3, [pc, #76]	; (8000734 <MX_USART2_UART_Init+0x58>)
 80006e8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80006ec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006ee:	4b11      	ldr	r3, [pc, #68]	; (8000734 <MX_USART2_UART_Init+0x58>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006f4:	4b0f      	ldr	r3, [pc, #60]	; (8000734 <MX_USART2_UART_Init+0x58>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006fa:	4b0e      	ldr	r3, [pc, #56]	; (8000734 <MX_USART2_UART_Init+0x58>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000700:	4b0c      	ldr	r3, [pc, #48]	; (8000734 <MX_USART2_UART_Init+0x58>)
 8000702:	220c      	movs	r2, #12
 8000704:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000706:	4b0b      	ldr	r3, [pc, #44]	; (8000734 <MX_USART2_UART_Init+0x58>)
 8000708:	2200      	movs	r2, #0
 800070a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800070c:	4b09      	ldr	r3, [pc, #36]	; (8000734 <MX_USART2_UART_Init+0x58>)
 800070e:	2200      	movs	r2, #0
 8000710:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000712:	4b08      	ldr	r3, [pc, #32]	; (8000734 <MX_USART2_UART_Init+0x58>)
 8000714:	2200      	movs	r2, #0
 8000716:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000718:	4b06      	ldr	r3, [pc, #24]	; (8000734 <MX_USART2_UART_Init+0x58>)
 800071a:	2200      	movs	r2, #0
 800071c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800071e:	4805      	ldr	r0, [pc, #20]	; (8000734 <MX_USART2_UART_Init+0x58>)
 8000720:	f002 ffb6 	bl	8003690 <HAL_UART_Init>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800072a:	f000 f86f 	bl	800080c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800072e:	bf00      	nop
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	20000148 	.word	0x20000148
 8000738:	40004400 	.word	0x40004400

0800073c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b08a      	sub	sp, #40	; 0x28
 8000740:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000742:	f107 0314 	add.w	r3, r7, #20
 8000746:	2200      	movs	r2, #0
 8000748:	601a      	str	r2, [r3, #0]
 800074a:	605a      	str	r2, [r3, #4]
 800074c:	609a      	str	r2, [r3, #8]
 800074e:	60da      	str	r2, [r3, #12]
 8000750:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000752:	4b2c      	ldr	r3, [pc, #176]	; (8000804 <MX_GPIO_Init+0xc8>)
 8000754:	695b      	ldr	r3, [r3, #20]
 8000756:	4a2b      	ldr	r2, [pc, #172]	; (8000804 <MX_GPIO_Init+0xc8>)
 8000758:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800075c:	6153      	str	r3, [r2, #20]
 800075e:	4b29      	ldr	r3, [pc, #164]	; (8000804 <MX_GPIO_Init+0xc8>)
 8000760:	695b      	ldr	r3, [r3, #20]
 8000762:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000766:	613b      	str	r3, [r7, #16]
 8000768:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800076a:	4b26      	ldr	r3, [pc, #152]	; (8000804 <MX_GPIO_Init+0xc8>)
 800076c:	695b      	ldr	r3, [r3, #20]
 800076e:	4a25      	ldr	r2, [pc, #148]	; (8000804 <MX_GPIO_Init+0xc8>)
 8000770:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000774:	6153      	str	r3, [r2, #20]
 8000776:	4b23      	ldr	r3, [pc, #140]	; (8000804 <MX_GPIO_Init+0xc8>)
 8000778:	695b      	ldr	r3, [r3, #20]
 800077a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800077e:	60fb      	str	r3, [r7, #12]
 8000780:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000782:	4b20      	ldr	r3, [pc, #128]	; (8000804 <MX_GPIO_Init+0xc8>)
 8000784:	695b      	ldr	r3, [r3, #20]
 8000786:	4a1f      	ldr	r2, [pc, #124]	; (8000804 <MX_GPIO_Init+0xc8>)
 8000788:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800078c:	6153      	str	r3, [r2, #20]
 800078e:	4b1d      	ldr	r3, [pc, #116]	; (8000804 <MX_GPIO_Init+0xc8>)
 8000790:	695b      	ldr	r3, [r3, #20]
 8000792:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000796:	60bb      	str	r3, [r7, #8]
 8000798:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800079a:	4b1a      	ldr	r3, [pc, #104]	; (8000804 <MX_GPIO_Init+0xc8>)
 800079c:	695b      	ldr	r3, [r3, #20]
 800079e:	4a19      	ldr	r2, [pc, #100]	; (8000804 <MX_GPIO_Init+0xc8>)
 80007a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80007a4:	6153      	str	r3, [r2, #20]
 80007a6:	4b17      	ldr	r3, [pc, #92]	; (8000804 <MX_GPIO_Init+0xc8>)
 80007a8:	695b      	ldr	r3, [r3, #20]
 80007aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80007ae:	607b      	str	r3, [r7, #4]
 80007b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|LD2_Pin
 80007b2:	2200      	movs	r2, #0
 80007b4:	f640 7133 	movw	r1, #3891	; 0xf33
 80007b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007bc:	f000 fdca 	bl	8001354 <HAL_GPIO_WritePin>
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007c6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80007ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007cc:	2300      	movs	r3, #0
 80007ce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007d0:	f107 0314 	add.w	r3, r7, #20
 80007d4:	4619      	mov	r1, r3
 80007d6:	480c      	ldr	r0, [pc, #48]	; (8000808 <MX_GPIO_Init+0xcc>)
 80007d8:	f000 fc32 	bl	8001040 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA4 LD2_Pin
                           PA8 PA9 PA10 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|LD2_Pin
 80007dc:	f640 7333 	movw	r3, #3891	; 0xf33
 80007e0:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007e2:	2301      	movs	r3, #1
 80007e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e6:	2300      	movs	r3, #0
 80007e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ea:	2300      	movs	r3, #0
 80007ec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ee:	f107 0314 	add.w	r3, r7, #20
 80007f2:	4619      	mov	r1, r3
 80007f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007f8:	f000 fc22 	bl	8001040 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007fc:	bf00      	nop
 80007fe:	3728      	adds	r7, #40	; 0x28
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}
 8000804:	40021000 	.word	0x40021000
 8000808:	48000800 	.word	0x48000800

0800080c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000810:	b672      	cpsid	i
}
 8000812:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000814:	e7fe      	b.n	8000814 <Error_Handler+0x8>
	...

08000818 <display_msg_on_lcd>:
  // Clear the buffer
  memset(buffer, 0, sizeof(buffer));
}

void display_msg_on_lcd()
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b086      	sub	sp, #24
 800081c:	af00      	add	r7, sp, #0
// Find the position of '\n' in the buffer
    // Find the position of '\n' in the buffer
    char* newline_position = (char *)strchr((char *)buffer, '\n');
 800081e:	210a      	movs	r1, #10
 8000820:	483a      	ldr	r0, [pc, #232]	; (800090c <display_msg_on_lcd+0xf4>)
 8000822:	f003 ff8e 	bl	8004742 <strchr>
 8000826:	60f8      	str	r0, [r7, #12]

    if (newline_position != NULL) {
 8000828:	68fb      	ldr	r3, [r7, #12]
 800082a:	2b00      	cmp	r3, #0
 800082c:	d069      	beq.n	8000902 <display_msg_on_lcd+0xea>
        // Calculate the length of the first substring
        int first_string_length = newline_position - (char *)buffer;
 800082e:	68fb      	ldr	r3, [r7, #12]
 8000830:	4a36      	ldr	r2, [pc, #216]	; (800090c <display_msg_on_lcd+0xf4>)
 8000832:	1a9b      	subs	r3, r3, r2
 8000834:	60bb      	str	r3, [r7, #8]

        // Copy the first substring to the firstString variable
        strncpy(first_string, (char *)buffer, first_string_length);
 8000836:	68bb      	ldr	r3, [r7, #8]
 8000838:	461a      	mov	r2, r3
 800083a:	4934      	ldr	r1, [pc, #208]	; (800090c <display_msg_on_lcd+0xf4>)
 800083c:	4834      	ldr	r0, [pc, #208]	; (8000910 <display_msg_on_lcd+0xf8>)
 800083e:	f003 ff8d 	bl	800475c <strncpy>
        first_string[first_string_length] = '\0';
 8000842:	4a33      	ldr	r2, [pc, #204]	; (8000910 <display_msg_on_lcd+0xf8>)
 8000844:	68bb      	ldr	r3, [r7, #8]
 8000846:	4413      	add	r3, r2
 8000848:	2200      	movs	r2, #0
 800084a:	701a      	strb	r2, [r3, #0]

        // Copy the second substring to the secondString variable
        strcpy(second_string, newline_position + 1);
 800084c:	68fb      	ldr	r3, [r7, #12]
 800084e:	3301      	adds	r3, #1
 8000850:	4619      	mov	r1, r3
 8000852:	4830      	ldr	r0, [pc, #192]	; (8000914 <display_msg_on_lcd+0xfc>)
 8000854:	f003 ffba 	bl	80047cc <strcpy>

        // Fill the first and second strings with spaces to reach 16 characters
        int space_count = 16 - strlen(first_string);
 8000858:	482d      	ldr	r0, [pc, #180]	; (8000910 <display_msg_on_lcd+0xf8>)
 800085a:	f7ff fcbb 	bl	80001d4 <strlen>
 800085e:	4603      	mov	r3, r0
 8000860:	f1c3 0310 	rsb	r3, r3, #16
 8000864:	607b      	str	r3, [r7, #4]
        for (int i = 0; i < space_count; i++) {
 8000866:	2300      	movs	r3, #0
 8000868:	617b      	str	r3, [r7, #20]
 800086a:	e00e      	b.n	800088a <display_msg_on_lcd+0x72>
            strcat(first_string, " ");
 800086c:	4828      	ldr	r0, [pc, #160]	; (8000910 <display_msg_on_lcd+0xf8>)
 800086e:	f7ff fcb1 	bl	80001d4 <strlen>
 8000872:	4603      	mov	r3, r0
 8000874:	461a      	mov	r2, r3
 8000876:	4b26      	ldr	r3, [pc, #152]	; (8000910 <display_msg_on_lcd+0xf8>)
 8000878:	4413      	add	r3, r2
 800087a:	4927      	ldr	r1, [pc, #156]	; (8000918 <display_msg_on_lcd+0x100>)
 800087c:	461a      	mov	r2, r3
 800087e:	460b      	mov	r3, r1
 8000880:	881b      	ldrh	r3, [r3, #0]
 8000882:	8013      	strh	r3, [r2, #0]
        for (int i = 0; i < space_count; i++) {
 8000884:	697b      	ldr	r3, [r7, #20]
 8000886:	3301      	adds	r3, #1
 8000888:	617b      	str	r3, [r7, #20]
 800088a:	697a      	ldr	r2, [r7, #20]
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	429a      	cmp	r2, r3
 8000890:	dbec      	blt.n	800086c <display_msg_on_lcd+0x54>
        }

        space_count = 16 - strlen(second_string);
 8000892:	4820      	ldr	r0, [pc, #128]	; (8000914 <display_msg_on_lcd+0xfc>)
 8000894:	f7ff fc9e 	bl	80001d4 <strlen>
 8000898:	4603      	mov	r3, r0
 800089a:	f1c3 0310 	rsb	r3, r3, #16
 800089e:	607b      	str	r3, [r7, #4]
        for (int i = 0; i < space_count; i++) {
 80008a0:	2300      	movs	r3, #0
 80008a2:	613b      	str	r3, [r7, #16]
 80008a4:	e00e      	b.n	80008c4 <display_msg_on_lcd+0xac>
            strcat(second_string, " ");
 80008a6:	481b      	ldr	r0, [pc, #108]	; (8000914 <display_msg_on_lcd+0xfc>)
 80008a8:	f7ff fc94 	bl	80001d4 <strlen>
 80008ac:	4603      	mov	r3, r0
 80008ae:	461a      	mov	r2, r3
 80008b0:	4b18      	ldr	r3, [pc, #96]	; (8000914 <display_msg_on_lcd+0xfc>)
 80008b2:	4413      	add	r3, r2
 80008b4:	4918      	ldr	r1, [pc, #96]	; (8000918 <display_msg_on_lcd+0x100>)
 80008b6:	461a      	mov	r2, r3
 80008b8:	460b      	mov	r3, r1
 80008ba:	881b      	ldrh	r3, [r3, #0]
 80008bc:	8013      	strh	r3, [r2, #0]
        for (int i = 0; i < space_count; i++) {
 80008be:	693b      	ldr	r3, [r7, #16]
 80008c0:	3301      	adds	r3, #1
 80008c2:	613b      	str	r3, [r7, #16]
 80008c4:	693a      	ldr	r2, [r7, #16]
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	429a      	cmp	r2, r3
 80008ca:	dbec      	blt.n	80008a6 <display_msg_on_lcd+0x8e>
        }

		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80008cc:	2120      	movs	r1, #32
 80008ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008d2:	f000 fd57 	bl	8001384 <HAL_GPIO_TogglePin>
		// Instructions for LCD
		//lcd_clear();
		lcd_put_cur(0, 0);
 80008d6:	2100      	movs	r1, #0
 80008d8:	2000      	movs	r0, #0
 80008da:	f7ff fd27 	bl	800032c <lcd_put_cur>
		lcd_send_string(first_string);
 80008de:	480c      	ldr	r0, [pc, #48]	; (8000910 <display_msg_on_lcd+0xf8>)
 80008e0:	f7ff fd80 	bl	80003e4 <lcd_send_string>
		lcd_put_cur(1, 0);
 80008e4:	2100      	movs	r1, #0
 80008e6:	2001      	movs	r0, #1
 80008e8:	f7ff fd20 	bl	800032c <lcd_put_cur>
		lcd_send_string(second_string);
 80008ec:	4809      	ldr	r0, [pc, #36]	; (8000914 <display_msg_on_lcd+0xfc>)
 80008ee:	f7ff fd79 	bl	80003e4 <lcd_send_string>

		// Clear the buffer
		memset(buffer, 0, sizeof(buffer));
 80008f2:	2228      	movs	r2, #40	; 0x28
 80008f4:	2100      	movs	r1, #0
 80008f6:	4805      	ldr	r0, [pc, #20]	; (800090c <display_msg_on_lcd+0xf4>)
 80008f8:	f003 ff1b 	bl	8004732 <memset>
		buffer_index = 0;
 80008fc:	4b07      	ldr	r3, [pc, #28]	; (800091c <display_msg_on_lcd+0x104>)
 80008fe:	2200      	movs	r2, #0
 8000900:	801a      	strh	r2, [r3, #0]

    }
}
 8000902:	bf00      	nop
 8000904:	3718      	adds	r7, #24
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	200001d0 	.word	0x200001d0
 8000910:	200001fc 	.word	0x200001fc
 8000914:	20000210 	.word	0x20000210
 8000918:	080047f4 	.word	0x080047f4
 800091c:	200001f8 	.word	0x200001f8

08000920 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b082      	sub	sp, #8
 8000924:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000926:	4b0f      	ldr	r3, [pc, #60]	; (8000964 <HAL_MspInit+0x44>)
 8000928:	699b      	ldr	r3, [r3, #24]
 800092a:	4a0e      	ldr	r2, [pc, #56]	; (8000964 <HAL_MspInit+0x44>)
 800092c:	f043 0301 	orr.w	r3, r3, #1
 8000930:	6193      	str	r3, [r2, #24]
 8000932:	4b0c      	ldr	r3, [pc, #48]	; (8000964 <HAL_MspInit+0x44>)
 8000934:	699b      	ldr	r3, [r3, #24]
 8000936:	f003 0301 	and.w	r3, r3, #1
 800093a:	607b      	str	r3, [r7, #4]
 800093c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800093e:	4b09      	ldr	r3, [pc, #36]	; (8000964 <HAL_MspInit+0x44>)
 8000940:	69db      	ldr	r3, [r3, #28]
 8000942:	4a08      	ldr	r2, [pc, #32]	; (8000964 <HAL_MspInit+0x44>)
 8000944:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000948:	61d3      	str	r3, [r2, #28]
 800094a:	4b06      	ldr	r3, [pc, #24]	; (8000964 <HAL_MspInit+0x44>)
 800094c:	69db      	ldr	r3, [r3, #28]
 800094e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000952:	603b      	str	r3, [r7, #0]
 8000954:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000956:	2007      	movs	r0, #7
 8000958:	f000 faba 	bl	8000ed0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800095c:	bf00      	nop
 800095e:	3708      	adds	r7, #8
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}
 8000964:	40021000 	.word	0x40021000

08000968 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b084      	sub	sp, #16
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	4a16      	ldr	r2, [pc, #88]	; (80009d0 <HAL_TIM_Base_MspInit+0x68>)
 8000976:	4293      	cmp	r3, r2
 8000978:	d10c      	bne.n	8000994 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800097a:	4b16      	ldr	r3, [pc, #88]	; (80009d4 <HAL_TIM_Base_MspInit+0x6c>)
 800097c:	699b      	ldr	r3, [r3, #24]
 800097e:	4a15      	ldr	r2, [pc, #84]	; (80009d4 <HAL_TIM_Base_MspInit+0x6c>)
 8000980:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000984:	6193      	str	r3, [r2, #24]
 8000986:	4b13      	ldr	r3, [pc, #76]	; (80009d4 <HAL_TIM_Base_MspInit+0x6c>)
 8000988:	699b      	ldr	r3, [r3, #24]
 800098a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800098e:	60fb      	str	r3, [r7, #12]
 8000990:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000992:	e018      	b.n	80009c6 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM2)
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800099c:	d113      	bne.n	80009c6 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800099e:	4b0d      	ldr	r3, [pc, #52]	; (80009d4 <HAL_TIM_Base_MspInit+0x6c>)
 80009a0:	69db      	ldr	r3, [r3, #28]
 80009a2:	4a0c      	ldr	r2, [pc, #48]	; (80009d4 <HAL_TIM_Base_MspInit+0x6c>)
 80009a4:	f043 0301 	orr.w	r3, r3, #1
 80009a8:	61d3      	str	r3, [r2, #28]
 80009aa:	4b0a      	ldr	r3, [pc, #40]	; (80009d4 <HAL_TIM_Base_MspInit+0x6c>)
 80009ac:	69db      	ldr	r3, [r3, #28]
 80009ae:	f003 0301 	and.w	r3, r3, #1
 80009b2:	60bb      	str	r3, [r7, #8]
 80009b4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80009b6:	2200      	movs	r2, #0
 80009b8:	2100      	movs	r1, #0
 80009ba:	201c      	movs	r0, #28
 80009bc:	f000 fa93 	bl	8000ee6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80009c0:	201c      	movs	r0, #28
 80009c2:	f000 faac 	bl	8000f1e <HAL_NVIC_EnableIRQ>
}
 80009c6:	bf00      	nop
 80009c8:	3710      	adds	r7, #16
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	40012c00 	.word	0x40012c00
 80009d4:	40021000 	.word	0x40021000

080009d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b08c      	sub	sp, #48	; 0x30
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e0:	f107 031c 	add.w	r3, r7, #28
 80009e4:	2200      	movs	r2, #0
 80009e6:	601a      	str	r2, [r3, #0]
 80009e8:	605a      	str	r2, [r3, #4]
 80009ea:	609a      	str	r2, [r3, #8]
 80009ec:	60da      	str	r2, [r3, #12]
 80009ee:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	4a36      	ldr	r2, [pc, #216]	; (8000ad0 <HAL_UART_MspInit+0xf8>)
 80009f6:	4293      	cmp	r3, r2
 80009f8:	d130      	bne.n	8000a5c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80009fa:	4b36      	ldr	r3, [pc, #216]	; (8000ad4 <HAL_UART_MspInit+0xfc>)
 80009fc:	699b      	ldr	r3, [r3, #24]
 80009fe:	4a35      	ldr	r2, [pc, #212]	; (8000ad4 <HAL_UART_MspInit+0xfc>)
 8000a00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a04:	6193      	str	r3, [r2, #24]
 8000a06:	4b33      	ldr	r3, [pc, #204]	; (8000ad4 <HAL_UART_MspInit+0xfc>)
 8000a08:	699b      	ldr	r3, [r3, #24]
 8000a0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a0e:	61bb      	str	r3, [r7, #24]
 8000a10:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a12:	4b30      	ldr	r3, [pc, #192]	; (8000ad4 <HAL_UART_MspInit+0xfc>)
 8000a14:	695b      	ldr	r3, [r3, #20]
 8000a16:	4a2f      	ldr	r2, [pc, #188]	; (8000ad4 <HAL_UART_MspInit+0xfc>)
 8000a18:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000a1c:	6153      	str	r3, [r2, #20]
 8000a1e:	4b2d      	ldr	r3, [pc, #180]	; (8000ad4 <HAL_UART_MspInit+0xfc>)
 8000a20:	695b      	ldr	r3, [r3, #20]
 8000a22:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000a26:	617b      	str	r3, [r7, #20]
 8000a28:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000a2a:	2330      	movs	r3, #48	; 0x30
 8000a2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a2e:	2302      	movs	r3, #2
 8000a30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a32:	2300      	movs	r3, #0
 8000a34:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a36:	2303      	movs	r3, #3
 8000a38:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000a3a:	2307      	movs	r3, #7
 8000a3c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a3e:	f107 031c 	add.w	r3, r7, #28
 8000a42:	4619      	mov	r1, r3
 8000a44:	4824      	ldr	r0, [pc, #144]	; (8000ad8 <HAL_UART_MspInit+0x100>)
 8000a46:	f000 fafb 	bl	8001040 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	2100      	movs	r1, #0
 8000a4e:	2025      	movs	r0, #37	; 0x25
 8000a50:	f000 fa49 	bl	8000ee6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000a54:	2025      	movs	r0, #37	; 0x25
 8000a56:	f000 fa62 	bl	8000f1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a5a:	e035      	b.n	8000ac8 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	4a1e      	ldr	r2, [pc, #120]	; (8000adc <HAL_UART_MspInit+0x104>)
 8000a62:	4293      	cmp	r3, r2
 8000a64:	d130      	bne.n	8000ac8 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a66:	4b1b      	ldr	r3, [pc, #108]	; (8000ad4 <HAL_UART_MspInit+0xfc>)
 8000a68:	69db      	ldr	r3, [r3, #28]
 8000a6a:	4a1a      	ldr	r2, [pc, #104]	; (8000ad4 <HAL_UART_MspInit+0xfc>)
 8000a6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a70:	61d3      	str	r3, [r2, #28]
 8000a72:	4b18      	ldr	r3, [pc, #96]	; (8000ad4 <HAL_UART_MspInit+0xfc>)
 8000a74:	69db      	ldr	r3, [r3, #28]
 8000a76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a7a:	613b      	str	r3, [r7, #16]
 8000a7c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a7e:	4b15      	ldr	r3, [pc, #84]	; (8000ad4 <HAL_UART_MspInit+0xfc>)
 8000a80:	695b      	ldr	r3, [r3, #20]
 8000a82:	4a14      	ldr	r2, [pc, #80]	; (8000ad4 <HAL_UART_MspInit+0xfc>)
 8000a84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a88:	6153      	str	r3, [r2, #20]
 8000a8a:	4b12      	ldr	r3, [pc, #72]	; (8000ad4 <HAL_UART_MspInit+0xfc>)
 8000a8c:	695b      	ldr	r3, [r3, #20]
 8000a8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a92:	60fb      	str	r3, [r7, #12]
 8000a94:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a96:	230c      	movs	r3, #12
 8000a98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a9a:	2302      	movs	r3, #2
 8000a9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000aa6:	2307      	movs	r3, #7
 8000aa8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aaa:	f107 031c 	add.w	r3, r7, #28
 8000aae:	4619      	mov	r1, r3
 8000ab0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ab4:	f000 fac4 	bl	8001040 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000ab8:	2200      	movs	r2, #0
 8000aba:	2100      	movs	r1, #0
 8000abc:	2026      	movs	r0, #38	; 0x26
 8000abe:	f000 fa12 	bl	8000ee6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000ac2:	2026      	movs	r0, #38	; 0x26
 8000ac4:	f000 fa2b 	bl	8000f1e <HAL_NVIC_EnableIRQ>
}
 8000ac8:	bf00      	nop
 8000aca:	3730      	adds	r7, #48	; 0x30
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	40013800 	.word	0x40013800
 8000ad4:	40021000 	.word	0x40021000
 8000ad8:	48000800 	.word	0x48000800
 8000adc:	40004400 	.word	0x40004400

08000ae0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ae4:	e7fe      	b.n	8000ae4 <NMI_Handler+0x4>

08000ae6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ae6:	b480      	push	{r7}
 8000ae8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aea:	e7fe      	b.n	8000aea <HardFault_Handler+0x4>

08000aec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000af0:	e7fe      	b.n	8000af0 <MemManage_Handler+0x4>

08000af2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000af2:	b480      	push	{r7}
 8000af4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000af6:	e7fe      	b.n	8000af6 <BusFault_Handler+0x4>

08000af8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000afc:	e7fe      	b.n	8000afc <UsageFault_Handler+0x4>

08000afe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000afe:	b480      	push	{r7}
 8000b00:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b02:	bf00      	nop
 8000b04:	46bd      	mov	sp, r7
 8000b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0a:	4770      	bx	lr

08000b0c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b10:	bf00      	nop
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr

08000b1a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b1a:	b480      	push	{r7}
 8000b1c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b1e:	bf00      	nop
 8000b20:	46bd      	mov	sp, r7
 8000b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b26:	4770      	bx	lr

08000b28 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b2c:	f000 f8bc 	bl	8000ca8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b30:	bf00      	nop
 8000b32:	bd80      	pop	{r7, pc}

08000b34 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0
//
//  if(timer_count>5)
//	  Message_handler();

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000b38:	4802      	ldr	r0, [pc, #8]	; (8000b44 <TIM2_IRQHandler+0x10>)
 8000b3a:	f002 f9ad 	bl	8002e98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000b3e:	bf00      	nop
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	20000074 	.word	0x20000074

08000b48 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  // Receive one byte of data from UART1 and store it in the buffer
  HAL_UART_Receive(&huart1, (uint8_t*)&buffer[buffer_index++], 1, 100);
 8000b4c:	4b0d      	ldr	r3, [pc, #52]	; (8000b84 <USART1_IRQHandler+0x3c>)
 8000b4e:	881b      	ldrh	r3, [r3, #0]
 8000b50:	1c5a      	adds	r2, r3, #1
 8000b52:	b291      	uxth	r1, r2
 8000b54:	4a0b      	ldr	r2, [pc, #44]	; (8000b84 <USART1_IRQHandler+0x3c>)
 8000b56:	8011      	strh	r1, [r2, #0]
 8000b58:	461a      	mov	r2, r3
 8000b5a:	4b0b      	ldr	r3, [pc, #44]	; (8000b88 <USART1_IRQHandler+0x40>)
 8000b5c:	18d1      	adds	r1, r2, r3
 8000b5e:	2364      	movs	r3, #100	; 0x64
 8000b60:	2201      	movs	r2, #1
 8000b62:	480a      	ldr	r0, [pc, #40]	; (8000b8c <USART1_IRQHandler+0x44>)
 8000b64:	f002 fde2 	bl	800372c <HAL_UART_Receive>

  // Check if the last received character is '0'
  if (buffer[buffer_index - 1] == '\0')
 8000b68:	4b06      	ldr	r3, [pc, #24]	; (8000b84 <USART1_IRQHandler+0x3c>)
 8000b6a:	881b      	ldrh	r3, [r3, #0]
 8000b6c:	3b01      	subs	r3, #1
 8000b6e:	4a06      	ldr	r2, [pc, #24]	; (8000b88 <USART1_IRQHandler+0x40>)
 8000b70:	5cd3      	ldrb	r3, [r2, r3]
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d101      	bne.n	8000b7a <USART1_IRQHandler+0x32>
  	  {
	    //send_to_uart(&huart2);
	    display_msg_on_lcd();
 8000b76:	f7ff fe4f 	bl	8000818 <display_msg_on_lcd>
	  	//display_msg_on_lcd();

	  }
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000b7a:	4804      	ldr	r0, [pc, #16]	; (8000b8c <USART1_IRQHandler+0x44>)
 8000b7c:	f002 fea0 	bl	80038c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000b80:	bf00      	nop
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	200001f8 	.word	0x200001f8
 8000b88:	200001d0 	.word	0x200001d0
 8000b8c:	200000c0 	.word	0x200000c0

08000b90 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000b94:	4802      	ldr	r0, [pc, #8]	; (8000ba0 <USART2_IRQHandler+0x10>)
 8000b96:	f002 fe93 	bl	80038c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000b9a:	bf00      	nop
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	20000148 	.word	0x20000148

08000ba4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ba8:	4b06      	ldr	r3, [pc, #24]	; (8000bc4 <SystemInit+0x20>)
 8000baa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bae:	4a05      	ldr	r2, [pc, #20]	; (8000bc4 <SystemInit+0x20>)
 8000bb0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bb4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bb8:	bf00      	nop
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop
 8000bc4:	e000ed00 	.word	0xe000ed00

08000bc8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000bc8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c00 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000bcc:	f7ff ffea 	bl	8000ba4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bd0:	480c      	ldr	r0, [pc, #48]	; (8000c04 <LoopForever+0x6>)
  ldr r1, =_edata
 8000bd2:	490d      	ldr	r1, [pc, #52]	; (8000c08 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bd4:	4a0d      	ldr	r2, [pc, #52]	; (8000c0c <LoopForever+0xe>)
  movs r3, #0
 8000bd6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bd8:	e002      	b.n	8000be0 <LoopCopyDataInit>

08000bda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bdc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bde:	3304      	adds	r3, #4

08000be0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000be0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000be2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000be4:	d3f9      	bcc.n	8000bda <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000be6:	4a0a      	ldr	r2, [pc, #40]	; (8000c10 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000be8:	4c0a      	ldr	r4, [pc, #40]	; (8000c14 <LoopForever+0x16>)
  movs r3, #0
 8000bea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bec:	e001      	b.n	8000bf2 <LoopFillZerobss>

08000bee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bf0:	3204      	adds	r2, #4

08000bf2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bf2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bf4:	d3fb      	bcc.n	8000bee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bf6:	f003 fdc5 	bl	8004784 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000bfa:	f7ff fc09 	bl	8000410 <main>

08000bfe <LoopForever>:

LoopForever:
    b LoopForever
 8000bfe:	e7fe      	b.n	8000bfe <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000c00:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000c04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c08:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000c0c:	08004838 	.word	0x08004838
  ldr r2, =_sbss
 8000c10:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000c14:	20000228 	.word	0x20000228

08000c18 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c18:	e7fe      	b.n	8000c18 <ADC1_2_IRQHandler>
	...

08000c1c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c20:	4b08      	ldr	r3, [pc, #32]	; (8000c44 <HAL_Init+0x28>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	4a07      	ldr	r2, [pc, #28]	; (8000c44 <HAL_Init+0x28>)
 8000c26:	f043 0310 	orr.w	r3, r3, #16
 8000c2a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c2c:	2003      	movs	r0, #3
 8000c2e:	f000 f94f 	bl	8000ed0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c32:	2000      	movs	r0, #0
 8000c34:	f000 f808 	bl	8000c48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c38:	f7ff fe72 	bl	8000920 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c3c:	2300      	movs	r3, #0
}
 8000c3e:	4618      	mov	r0, r3
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	40022000 	.word	0x40022000

08000c48 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b082      	sub	sp, #8
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c50:	4b12      	ldr	r3, [pc, #72]	; (8000c9c <HAL_InitTick+0x54>)
 8000c52:	681a      	ldr	r2, [r3, #0]
 8000c54:	4b12      	ldr	r3, [pc, #72]	; (8000ca0 <HAL_InitTick+0x58>)
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	4619      	mov	r1, r3
 8000c5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c62:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c66:	4618      	mov	r0, r3
 8000c68:	f000 f967 	bl	8000f3a <HAL_SYSTICK_Config>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d001      	beq.n	8000c76 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c72:	2301      	movs	r3, #1
 8000c74:	e00e      	b.n	8000c94 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	2b0f      	cmp	r3, #15
 8000c7a:	d80a      	bhi.n	8000c92 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	6879      	ldr	r1, [r7, #4]
 8000c80:	f04f 30ff 	mov.w	r0, #4294967295
 8000c84:	f000 f92f 	bl	8000ee6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c88:	4a06      	ldr	r2, [pc, #24]	; (8000ca4 <HAL_InitTick+0x5c>)
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	e000      	b.n	8000c94 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c92:	2301      	movs	r3, #1
}
 8000c94:	4618      	mov	r0, r3
 8000c96:	3708      	adds	r7, #8
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	20000000 	.word	0x20000000
 8000ca0:	20000008 	.word	0x20000008
 8000ca4:	20000004 	.word	0x20000004

08000ca8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cac:	4b06      	ldr	r3, [pc, #24]	; (8000cc8 <HAL_IncTick+0x20>)
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	461a      	mov	r2, r3
 8000cb2:	4b06      	ldr	r3, [pc, #24]	; (8000ccc <HAL_IncTick+0x24>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	4413      	add	r3, r2
 8000cb8:	4a04      	ldr	r2, [pc, #16]	; (8000ccc <HAL_IncTick+0x24>)
 8000cba:	6013      	str	r3, [r2, #0]
}
 8000cbc:	bf00      	nop
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop
 8000cc8:	20000008 	.word	0x20000008
 8000ccc:	20000224 	.word	0x20000224

08000cd0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  return uwTick;  
 8000cd4:	4b03      	ldr	r3, [pc, #12]	; (8000ce4 <HAL_GetTick+0x14>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
}
 8000cd8:	4618      	mov	r0, r3
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr
 8000ce2:	bf00      	nop
 8000ce4:	20000224 	.word	0x20000224

08000ce8 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b084      	sub	sp, #16
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cf0:	f7ff ffee 	bl	8000cd0 <HAL_GetTick>
 8000cf4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d00:	d005      	beq.n	8000d0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d02:	4b0a      	ldr	r3, [pc, #40]	; (8000d2c <HAL_Delay+0x44>)
 8000d04:	781b      	ldrb	r3, [r3, #0]
 8000d06:	461a      	mov	r2, r3
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	4413      	add	r3, r2
 8000d0c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000d0e:	bf00      	nop
 8000d10:	f7ff ffde 	bl	8000cd0 <HAL_GetTick>
 8000d14:	4602      	mov	r2, r0
 8000d16:	68bb      	ldr	r3, [r7, #8]
 8000d18:	1ad3      	subs	r3, r2, r3
 8000d1a:	68fa      	ldr	r2, [r7, #12]
 8000d1c:	429a      	cmp	r2, r3
 8000d1e:	d8f7      	bhi.n	8000d10 <HAL_Delay+0x28>
  {
  }
}
 8000d20:	bf00      	nop
 8000d22:	bf00      	nop
 8000d24:	3710      	adds	r7, #16
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	20000008 	.word	0x20000008

08000d30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d30:	b480      	push	{r7}
 8000d32:	b085      	sub	sp, #20
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	f003 0307 	and.w	r3, r3, #7
 8000d3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d40:	4b0c      	ldr	r3, [pc, #48]	; (8000d74 <__NVIC_SetPriorityGrouping+0x44>)
 8000d42:	68db      	ldr	r3, [r3, #12]
 8000d44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d46:	68ba      	ldr	r2, [r7, #8]
 8000d48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d4c:	4013      	ands	r3, r2
 8000d4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d54:	68bb      	ldr	r3, [r7, #8]
 8000d56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d62:	4a04      	ldr	r2, [pc, #16]	; (8000d74 <__NVIC_SetPriorityGrouping+0x44>)
 8000d64:	68bb      	ldr	r3, [r7, #8]
 8000d66:	60d3      	str	r3, [r2, #12]
}
 8000d68:	bf00      	nop
 8000d6a:	3714      	adds	r7, #20
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d72:	4770      	bx	lr
 8000d74:	e000ed00 	.word	0xe000ed00

08000d78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d7c:	4b04      	ldr	r3, [pc, #16]	; (8000d90 <__NVIC_GetPriorityGrouping+0x18>)
 8000d7e:	68db      	ldr	r3, [r3, #12]
 8000d80:	0a1b      	lsrs	r3, r3, #8
 8000d82:	f003 0307 	and.w	r3, r3, #7
}
 8000d86:	4618      	mov	r0, r3
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8e:	4770      	bx	lr
 8000d90:	e000ed00 	.word	0xe000ed00

08000d94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d94:	b480      	push	{r7}
 8000d96:	b083      	sub	sp, #12
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	db0b      	blt.n	8000dbe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000da6:	79fb      	ldrb	r3, [r7, #7]
 8000da8:	f003 021f 	and.w	r2, r3, #31
 8000dac:	4907      	ldr	r1, [pc, #28]	; (8000dcc <__NVIC_EnableIRQ+0x38>)
 8000dae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db2:	095b      	lsrs	r3, r3, #5
 8000db4:	2001      	movs	r0, #1
 8000db6:	fa00 f202 	lsl.w	r2, r0, r2
 8000dba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000dbe:	bf00      	nop
 8000dc0:	370c      	adds	r7, #12
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr
 8000dca:	bf00      	nop
 8000dcc:	e000e100 	.word	0xe000e100

08000dd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	b083      	sub	sp, #12
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	6039      	str	r1, [r7, #0]
 8000dda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ddc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	db0a      	blt.n	8000dfa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	b2da      	uxtb	r2, r3
 8000de8:	490c      	ldr	r1, [pc, #48]	; (8000e1c <__NVIC_SetPriority+0x4c>)
 8000dea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dee:	0112      	lsls	r2, r2, #4
 8000df0:	b2d2      	uxtb	r2, r2
 8000df2:	440b      	add	r3, r1
 8000df4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000df8:	e00a      	b.n	8000e10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	b2da      	uxtb	r2, r3
 8000dfe:	4908      	ldr	r1, [pc, #32]	; (8000e20 <__NVIC_SetPriority+0x50>)
 8000e00:	79fb      	ldrb	r3, [r7, #7]
 8000e02:	f003 030f 	and.w	r3, r3, #15
 8000e06:	3b04      	subs	r3, #4
 8000e08:	0112      	lsls	r2, r2, #4
 8000e0a:	b2d2      	uxtb	r2, r2
 8000e0c:	440b      	add	r3, r1
 8000e0e:	761a      	strb	r2, [r3, #24]
}
 8000e10:	bf00      	nop
 8000e12:	370c      	adds	r7, #12
 8000e14:	46bd      	mov	sp, r7
 8000e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1a:	4770      	bx	lr
 8000e1c:	e000e100 	.word	0xe000e100
 8000e20:	e000ed00 	.word	0xe000ed00

08000e24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b089      	sub	sp, #36	; 0x24
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	60f8      	str	r0, [r7, #12]
 8000e2c:	60b9      	str	r1, [r7, #8]
 8000e2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	f003 0307 	and.w	r3, r3, #7
 8000e36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e38:	69fb      	ldr	r3, [r7, #28]
 8000e3a:	f1c3 0307 	rsb	r3, r3, #7
 8000e3e:	2b04      	cmp	r3, #4
 8000e40:	bf28      	it	cs
 8000e42:	2304      	movcs	r3, #4
 8000e44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e46:	69fb      	ldr	r3, [r7, #28]
 8000e48:	3304      	adds	r3, #4
 8000e4a:	2b06      	cmp	r3, #6
 8000e4c:	d902      	bls.n	8000e54 <NVIC_EncodePriority+0x30>
 8000e4e:	69fb      	ldr	r3, [r7, #28]
 8000e50:	3b03      	subs	r3, #3
 8000e52:	e000      	b.n	8000e56 <NVIC_EncodePriority+0x32>
 8000e54:	2300      	movs	r3, #0
 8000e56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e58:	f04f 32ff 	mov.w	r2, #4294967295
 8000e5c:	69bb      	ldr	r3, [r7, #24]
 8000e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e62:	43da      	mvns	r2, r3
 8000e64:	68bb      	ldr	r3, [r7, #8]
 8000e66:	401a      	ands	r2, r3
 8000e68:	697b      	ldr	r3, [r7, #20]
 8000e6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e6c:	f04f 31ff 	mov.w	r1, #4294967295
 8000e70:	697b      	ldr	r3, [r7, #20]
 8000e72:	fa01 f303 	lsl.w	r3, r1, r3
 8000e76:	43d9      	mvns	r1, r3
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e7c:	4313      	orrs	r3, r2
         );
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	3724      	adds	r7, #36	; 0x24
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr
	...

08000e8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	3b01      	subs	r3, #1
 8000e98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e9c:	d301      	bcc.n	8000ea2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	e00f      	b.n	8000ec2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ea2:	4a0a      	ldr	r2, [pc, #40]	; (8000ecc <SysTick_Config+0x40>)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	3b01      	subs	r3, #1
 8000ea8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000eaa:	210f      	movs	r1, #15
 8000eac:	f04f 30ff 	mov.w	r0, #4294967295
 8000eb0:	f7ff ff8e 	bl	8000dd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000eb4:	4b05      	ldr	r3, [pc, #20]	; (8000ecc <SysTick_Config+0x40>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000eba:	4b04      	ldr	r3, [pc, #16]	; (8000ecc <SysTick_Config+0x40>)
 8000ebc:	2207      	movs	r2, #7
 8000ebe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ec0:	2300      	movs	r3, #0
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	3708      	adds	r7, #8
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	e000e010 	.word	0xe000e010

08000ed0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ed8:	6878      	ldr	r0, [r7, #4]
 8000eda:	f7ff ff29 	bl	8000d30 <__NVIC_SetPriorityGrouping>
}
 8000ede:	bf00      	nop
 8000ee0:	3708      	adds	r7, #8
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}

08000ee6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ee6:	b580      	push	{r7, lr}
 8000ee8:	b086      	sub	sp, #24
 8000eea:	af00      	add	r7, sp, #0
 8000eec:	4603      	mov	r3, r0
 8000eee:	60b9      	str	r1, [r7, #8]
 8000ef0:	607a      	str	r2, [r7, #4]
 8000ef2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ef8:	f7ff ff3e 	bl	8000d78 <__NVIC_GetPriorityGrouping>
 8000efc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000efe:	687a      	ldr	r2, [r7, #4]
 8000f00:	68b9      	ldr	r1, [r7, #8]
 8000f02:	6978      	ldr	r0, [r7, #20]
 8000f04:	f7ff ff8e 	bl	8000e24 <NVIC_EncodePriority>
 8000f08:	4602      	mov	r2, r0
 8000f0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f0e:	4611      	mov	r1, r2
 8000f10:	4618      	mov	r0, r3
 8000f12:	f7ff ff5d 	bl	8000dd0 <__NVIC_SetPriority>
}
 8000f16:	bf00      	nop
 8000f18:	3718      	adds	r7, #24
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}

08000f1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f1e:	b580      	push	{r7, lr}
 8000f20:	b082      	sub	sp, #8
 8000f22:	af00      	add	r7, sp, #0
 8000f24:	4603      	mov	r3, r0
 8000f26:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f7ff ff31 	bl	8000d94 <__NVIC_EnableIRQ>
}
 8000f32:	bf00      	nop
 8000f34:	3708      	adds	r7, #8
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}

08000f3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f3a:	b580      	push	{r7, lr}
 8000f3c:	b082      	sub	sp, #8
 8000f3e:	af00      	add	r7, sp, #0
 8000f40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f42:	6878      	ldr	r0, [r7, #4]
 8000f44:	f7ff ffa2 	bl	8000e8c <SysTick_Config>
 8000f48:	4603      	mov	r3, r0
}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	3708      	adds	r7, #8
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}

08000f52 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000f52:	b480      	push	{r7}
 8000f54:	b083      	sub	sp, #12
 8000f56:	af00      	add	r7, sp, #0
 8000f58:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000f60:	2b02      	cmp	r3, #2
 8000f62:	d008      	beq.n	8000f76 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	2204      	movs	r2, #4
 8000f68:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000f72:	2301      	movs	r3, #1
 8000f74:	e020      	b.n	8000fb8 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	681a      	ldr	r2, [r3, #0]
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	f022 020e 	bic.w	r2, r2, #14
 8000f84:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	681a      	ldr	r2, [r3, #0]
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	f022 0201 	bic.w	r2, r2, #1
 8000f94:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f9e:	2101      	movs	r1, #1
 8000fa0:	fa01 f202 	lsl.w	r2, r1, r2
 8000fa4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	2201      	movs	r2, #1
 8000faa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8000fb6:	2300      	movs	r3, #0
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	370c      	adds	r7, #12
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr

08000fc4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b084      	sub	sp, #16
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000fd6:	2b02      	cmp	r3, #2
 8000fd8:	d005      	beq.n	8000fe6 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	2204      	movs	r2, #4
 8000fde:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	73fb      	strb	r3, [r7, #15]
 8000fe4:	e027      	b.n	8001036 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	681a      	ldr	r2, [r3, #0]
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f022 020e 	bic.w	r2, r2, #14
 8000ff4:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	681a      	ldr	r2, [r3, #0]
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	f022 0201 	bic.w	r2, r2, #1
 8001004:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800100e:	2101      	movs	r1, #1
 8001010:	fa01 f202 	lsl.w	r2, r1, r2
 8001014:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	2201      	movs	r2, #1
 800101a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	2200      	movs	r2, #0
 8001022:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800102a:	2b00      	cmp	r3, #0
 800102c:	d003      	beq.n	8001036 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001032:	6878      	ldr	r0, [r7, #4]
 8001034:	4798      	blx	r3
    } 
  }
  return status;
 8001036:	7bfb      	ldrb	r3, [r7, #15]
}
 8001038:	4618      	mov	r0, r3
 800103a:	3710      	adds	r7, #16
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}

08001040 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001040:	b480      	push	{r7}
 8001042:	b087      	sub	sp, #28
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
 8001048:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800104a:	2300      	movs	r3, #0
 800104c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800104e:	e160      	b.n	8001312 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	681a      	ldr	r2, [r3, #0]
 8001054:	2101      	movs	r1, #1
 8001056:	697b      	ldr	r3, [r7, #20]
 8001058:	fa01 f303 	lsl.w	r3, r1, r3
 800105c:	4013      	ands	r3, r2
 800105e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	2b00      	cmp	r3, #0
 8001064:	f000 8152 	beq.w	800130c <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	f003 0303 	and.w	r3, r3, #3
 8001070:	2b01      	cmp	r3, #1
 8001072:	d005      	beq.n	8001080 <HAL_GPIO_Init+0x40>
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	f003 0303 	and.w	r3, r3, #3
 800107c:	2b02      	cmp	r3, #2
 800107e:	d130      	bne.n	80010e2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	689b      	ldr	r3, [r3, #8]
 8001084:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001086:	697b      	ldr	r3, [r7, #20]
 8001088:	005b      	lsls	r3, r3, #1
 800108a:	2203      	movs	r2, #3
 800108c:	fa02 f303 	lsl.w	r3, r2, r3
 8001090:	43db      	mvns	r3, r3
 8001092:	693a      	ldr	r2, [r7, #16]
 8001094:	4013      	ands	r3, r2
 8001096:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	68da      	ldr	r2, [r3, #12]
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	005b      	lsls	r3, r3, #1
 80010a0:	fa02 f303 	lsl.w	r3, r2, r3
 80010a4:	693a      	ldr	r2, [r7, #16]
 80010a6:	4313      	orrs	r3, r2
 80010a8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	693a      	ldr	r2, [r7, #16]
 80010ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010b6:	2201      	movs	r2, #1
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	fa02 f303 	lsl.w	r3, r2, r3
 80010be:	43db      	mvns	r3, r3
 80010c0:	693a      	ldr	r2, [r7, #16]
 80010c2:	4013      	ands	r3, r2
 80010c4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	091b      	lsrs	r3, r3, #4
 80010cc:	f003 0201 	and.w	r2, r3, #1
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	fa02 f303 	lsl.w	r3, r2, r3
 80010d6:	693a      	ldr	r2, [r7, #16]
 80010d8:	4313      	orrs	r3, r2
 80010da:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	693a      	ldr	r2, [r7, #16]
 80010e0:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	f003 0303 	and.w	r3, r3, #3
 80010ea:	2b03      	cmp	r3, #3
 80010ec:	d017      	beq.n	800111e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	68db      	ldr	r3, [r3, #12]
 80010f2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	005b      	lsls	r3, r3, #1
 80010f8:	2203      	movs	r2, #3
 80010fa:	fa02 f303 	lsl.w	r3, r2, r3
 80010fe:	43db      	mvns	r3, r3
 8001100:	693a      	ldr	r2, [r7, #16]
 8001102:	4013      	ands	r3, r2
 8001104:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	689a      	ldr	r2, [r3, #8]
 800110a:	697b      	ldr	r3, [r7, #20]
 800110c:	005b      	lsls	r3, r3, #1
 800110e:	fa02 f303 	lsl.w	r3, r2, r3
 8001112:	693a      	ldr	r2, [r7, #16]
 8001114:	4313      	orrs	r3, r2
 8001116:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	693a      	ldr	r2, [r7, #16]
 800111c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	f003 0303 	and.w	r3, r3, #3
 8001126:	2b02      	cmp	r3, #2
 8001128:	d123      	bne.n	8001172 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800112a:	697b      	ldr	r3, [r7, #20]
 800112c:	08da      	lsrs	r2, r3, #3
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	3208      	adds	r2, #8
 8001132:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001136:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	f003 0307 	and.w	r3, r3, #7
 800113e:	009b      	lsls	r3, r3, #2
 8001140:	220f      	movs	r2, #15
 8001142:	fa02 f303 	lsl.w	r3, r2, r3
 8001146:	43db      	mvns	r3, r3
 8001148:	693a      	ldr	r2, [r7, #16]
 800114a:	4013      	ands	r3, r2
 800114c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	691a      	ldr	r2, [r3, #16]
 8001152:	697b      	ldr	r3, [r7, #20]
 8001154:	f003 0307 	and.w	r3, r3, #7
 8001158:	009b      	lsls	r3, r3, #2
 800115a:	fa02 f303 	lsl.w	r3, r2, r3
 800115e:	693a      	ldr	r2, [r7, #16]
 8001160:	4313      	orrs	r3, r2
 8001162:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001164:	697b      	ldr	r3, [r7, #20]
 8001166:	08da      	lsrs	r2, r3, #3
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	3208      	adds	r2, #8
 800116c:	6939      	ldr	r1, [r7, #16]
 800116e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001178:	697b      	ldr	r3, [r7, #20]
 800117a:	005b      	lsls	r3, r3, #1
 800117c:	2203      	movs	r2, #3
 800117e:	fa02 f303 	lsl.w	r3, r2, r3
 8001182:	43db      	mvns	r3, r3
 8001184:	693a      	ldr	r2, [r7, #16]
 8001186:	4013      	ands	r3, r2
 8001188:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	f003 0203 	and.w	r2, r3, #3
 8001192:	697b      	ldr	r3, [r7, #20]
 8001194:	005b      	lsls	r3, r3, #1
 8001196:	fa02 f303 	lsl.w	r3, r2, r3
 800119a:	693a      	ldr	r2, [r7, #16]
 800119c:	4313      	orrs	r3, r2
 800119e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	693a      	ldr	r2, [r7, #16]
 80011a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	f000 80ac 	beq.w	800130c <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011b4:	4b5e      	ldr	r3, [pc, #376]	; (8001330 <HAL_GPIO_Init+0x2f0>)
 80011b6:	699b      	ldr	r3, [r3, #24]
 80011b8:	4a5d      	ldr	r2, [pc, #372]	; (8001330 <HAL_GPIO_Init+0x2f0>)
 80011ba:	f043 0301 	orr.w	r3, r3, #1
 80011be:	6193      	str	r3, [r2, #24]
 80011c0:	4b5b      	ldr	r3, [pc, #364]	; (8001330 <HAL_GPIO_Init+0x2f0>)
 80011c2:	699b      	ldr	r3, [r3, #24]
 80011c4:	f003 0301 	and.w	r3, r3, #1
 80011c8:	60bb      	str	r3, [r7, #8]
 80011ca:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80011cc:	4a59      	ldr	r2, [pc, #356]	; (8001334 <HAL_GPIO_Init+0x2f4>)
 80011ce:	697b      	ldr	r3, [r7, #20]
 80011d0:	089b      	lsrs	r3, r3, #2
 80011d2:	3302      	adds	r3, #2
 80011d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011d8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80011da:	697b      	ldr	r3, [r7, #20]
 80011dc:	f003 0303 	and.w	r3, r3, #3
 80011e0:	009b      	lsls	r3, r3, #2
 80011e2:	220f      	movs	r2, #15
 80011e4:	fa02 f303 	lsl.w	r3, r2, r3
 80011e8:	43db      	mvns	r3, r3
 80011ea:	693a      	ldr	r2, [r7, #16]
 80011ec:	4013      	ands	r3, r2
 80011ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80011f6:	d025      	beq.n	8001244 <HAL_GPIO_Init+0x204>
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	4a4f      	ldr	r2, [pc, #316]	; (8001338 <HAL_GPIO_Init+0x2f8>)
 80011fc:	4293      	cmp	r3, r2
 80011fe:	d01f      	beq.n	8001240 <HAL_GPIO_Init+0x200>
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	4a4e      	ldr	r2, [pc, #312]	; (800133c <HAL_GPIO_Init+0x2fc>)
 8001204:	4293      	cmp	r3, r2
 8001206:	d019      	beq.n	800123c <HAL_GPIO_Init+0x1fc>
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	4a4d      	ldr	r2, [pc, #308]	; (8001340 <HAL_GPIO_Init+0x300>)
 800120c:	4293      	cmp	r3, r2
 800120e:	d013      	beq.n	8001238 <HAL_GPIO_Init+0x1f8>
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	4a4c      	ldr	r2, [pc, #304]	; (8001344 <HAL_GPIO_Init+0x304>)
 8001214:	4293      	cmp	r3, r2
 8001216:	d00d      	beq.n	8001234 <HAL_GPIO_Init+0x1f4>
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	4a4b      	ldr	r2, [pc, #300]	; (8001348 <HAL_GPIO_Init+0x308>)
 800121c:	4293      	cmp	r3, r2
 800121e:	d007      	beq.n	8001230 <HAL_GPIO_Init+0x1f0>
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	4a4a      	ldr	r2, [pc, #296]	; (800134c <HAL_GPIO_Init+0x30c>)
 8001224:	4293      	cmp	r3, r2
 8001226:	d101      	bne.n	800122c <HAL_GPIO_Init+0x1ec>
 8001228:	2306      	movs	r3, #6
 800122a:	e00c      	b.n	8001246 <HAL_GPIO_Init+0x206>
 800122c:	2307      	movs	r3, #7
 800122e:	e00a      	b.n	8001246 <HAL_GPIO_Init+0x206>
 8001230:	2305      	movs	r3, #5
 8001232:	e008      	b.n	8001246 <HAL_GPIO_Init+0x206>
 8001234:	2304      	movs	r3, #4
 8001236:	e006      	b.n	8001246 <HAL_GPIO_Init+0x206>
 8001238:	2303      	movs	r3, #3
 800123a:	e004      	b.n	8001246 <HAL_GPIO_Init+0x206>
 800123c:	2302      	movs	r3, #2
 800123e:	e002      	b.n	8001246 <HAL_GPIO_Init+0x206>
 8001240:	2301      	movs	r3, #1
 8001242:	e000      	b.n	8001246 <HAL_GPIO_Init+0x206>
 8001244:	2300      	movs	r3, #0
 8001246:	697a      	ldr	r2, [r7, #20]
 8001248:	f002 0203 	and.w	r2, r2, #3
 800124c:	0092      	lsls	r2, r2, #2
 800124e:	4093      	lsls	r3, r2
 8001250:	693a      	ldr	r2, [r7, #16]
 8001252:	4313      	orrs	r3, r2
 8001254:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001256:	4937      	ldr	r1, [pc, #220]	; (8001334 <HAL_GPIO_Init+0x2f4>)
 8001258:	697b      	ldr	r3, [r7, #20]
 800125a:	089b      	lsrs	r3, r3, #2
 800125c:	3302      	adds	r3, #2
 800125e:	693a      	ldr	r2, [r7, #16]
 8001260:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001264:	4b3a      	ldr	r3, [pc, #232]	; (8001350 <HAL_GPIO_Init+0x310>)
 8001266:	689b      	ldr	r3, [r3, #8]
 8001268:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	43db      	mvns	r3, r3
 800126e:	693a      	ldr	r2, [r7, #16]
 8001270:	4013      	ands	r3, r2
 8001272:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800127c:	2b00      	cmp	r3, #0
 800127e:	d003      	beq.n	8001288 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8001280:	693a      	ldr	r2, [r7, #16]
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	4313      	orrs	r3, r2
 8001286:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001288:	4a31      	ldr	r2, [pc, #196]	; (8001350 <HAL_GPIO_Init+0x310>)
 800128a:	693b      	ldr	r3, [r7, #16]
 800128c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800128e:	4b30      	ldr	r3, [pc, #192]	; (8001350 <HAL_GPIO_Init+0x310>)
 8001290:	68db      	ldr	r3, [r3, #12]
 8001292:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	43db      	mvns	r3, r3
 8001298:	693a      	ldr	r2, [r7, #16]
 800129a:	4013      	ands	r3, r2
 800129c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d003      	beq.n	80012b2 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 80012aa:	693a      	ldr	r2, [r7, #16]
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	4313      	orrs	r3, r2
 80012b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80012b2:	4a27      	ldr	r2, [pc, #156]	; (8001350 <HAL_GPIO_Init+0x310>)
 80012b4:	693b      	ldr	r3, [r7, #16]
 80012b6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80012b8:	4b25      	ldr	r3, [pc, #148]	; (8001350 <HAL_GPIO_Init+0x310>)
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	43db      	mvns	r3, r3
 80012c2:	693a      	ldr	r2, [r7, #16]
 80012c4:	4013      	ands	r3, r2
 80012c6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d003      	beq.n	80012dc <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80012d4:	693a      	ldr	r2, [r7, #16]
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	4313      	orrs	r3, r2
 80012da:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80012dc:	4a1c      	ldr	r2, [pc, #112]	; (8001350 <HAL_GPIO_Init+0x310>)
 80012de:	693b      	ldr	r3, [r7, #16]
 80012e0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012e2:	4b1b      	ldr	r3, [pc, #108]	; (8001350 <HAL_GPIO_Init+0x310>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	43db      	mvns	r3, r3
 80012ec:	693a      	ldr	r2, [r7, #16]
 80012ee:	4013      	ands	r3, r2
 80012f0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d003      	beq.n	8001306 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 80012fe:	693a      	ldr	r2, [r7, #16]
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	4313      	orrs	r3, r2
 8001304:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001306:	4a12      	ldr	r2, [pc, #72]	; (8001350 <HAL_GPIO_Init+0x310>)
 8001308:	693b      	ldr	r3, [r7, #16]
 800130a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	3301      	adds	r3, #1
 8001310:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	681a      	ldr	r2, [r3, #0]
 8001316:	697b      	ldr	r3, [r7, #20]
 8001318:	fa22 f303 	lsr.w	r3, r2, r3
 800131c:	2b00      	cmp	r3, #0
 800131e:	f47f ae97 	bne.w	8001050 <HAL_GPIO_Init+0x10>
  }
}
 8001322:	bf00      	nop
 8001324:	bf00      	nop
 8001326:	371c      	adds	r7, #28
 8001328:	46bd      	mov	sp, r7
 800132a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132e:	4770      	bx	lr
 8001330:	40021000 	.word	0x40021000
 8001334:	40010000 	.word	0x40010000
 8001338:	48000400 	.word	0x48000400
 800133c:	48000800 	.word	0x48000800
 8001340:	48000c00 	.word	0x48000c00
 8001344:	48001000 	.word	0x48001000
 8001348:	48001400 	.word	0x48001400
 800134c:	48001800 	.word	0x48001800
 8001350:	40010400 	.word	0x40010400

08001354 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001354:	b480      	push	{r7}
 8001356:	b083      	sub	sp, #12
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
 800135c:	460b      	mov	r3, r1
 800135e:	807b      	strh	r3, [r7, #2]
 8001360:	4613      	mov	r3, r2
 8001362:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001364:	787b      	ldrb	r3, [r7, #1]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d003      	beq.n	8001372 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800136a:	887a      	ldrh	r2, [r7, #2]
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001370:	e002      	b.n	8001378 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001372:	887a      	ldrh	r2, [r7, #2]
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001378:	bf00      	nop
 800137a:	370c      	adds	r7, #12
 800137c:	46bd      	mov	sp, r7
 800137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001382:	4770      	bx	lr

08001384 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001384:	b480      	push	{r7}
 8001386:	b085      	sub	sp, #20
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
 800138c:	460b      	mov	r3, r1
 800138e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	695b      	ldr	r3, [r3, #20]
 8001394:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001396:	887a      	ldrh	r2, [r7, #2]
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	4013      	ands	r3, r2
 800139c:	041a      	lsls	r2, r3, #16
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	43d9      	mvns	r1, r3
 80013a2:	887b      	ldrh	r3, [r7, #2]
 80013a4:	400b      	ands	r3, r1
 80013a6:	431a      	orrs	r2, r3
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	619a      	str	r2, [r3, #24]
}
 80013ac:	bf00      	nop
 80013ae:	3714      	adds	r7, #20
 80013b0:	46bd      	mov	sp, r7
 80013b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b6:	4770      	bx	lr

080013b8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 80013be:	af00      	add	r7, sp, #0
 80013c0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80013c4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80013c8:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80013ca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80013ce:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d102      	bne.n	80013de <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80013d8:	2301      	movs	r3, #1
 80013da:	f001 b83a 	b.w	8002452 <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013de:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80013e2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f003 0301 	and.w	r3, r3, #1
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	f000 816f 	beq.w	80016d2 <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80013f4:	4bb5      	ldr	r3, [pc, #724]	; (80016cc <HAL_RCC_OscConfig+0x314>)
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	f003 030c 	and.w	r3, r3, #12
 80013fc:	2b04      	cmp	r3, #4
 80013fe:	d00c      	beq.n	800141a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001400:	4bb2      	ldr	r3, [pc, #712]	; (80016cc <HAL_RCC_OscConfig+0x314>)
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	f003 030c 	and.w	r3, r3, #12
 8001408:	2b08      	cmp	r3, #8
 800140a:	d15c      	bne.n	80014c6 <HAL_RCC_OscConfig+0x10e>
 800140c:	4baf      	ldr	r3, [pc, #700]	; (80016cc <HAL_RCC_OscConfig+0x314>)
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001414:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001418:	d155      	bne.n	80014c6 <HAL_RCC_OscConfig+0x10e>
 800141a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800141e:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001422:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001426:	fa93 f3a3 	rbit	r3, r3
 800142a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800142e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001432:	fab3 f383 	clz	r3, r3
 8001436:	b2db      	uxtb	r3, r3
 8001438:	095b      	lsrs	r3, r3, #5
 800143a:	b2db      	uxtb	r3, r3
 800143c:	f043 0301 	orr.w	r3, r3, #1
 8001440:	b2db      	uxtb	r3, r3
 8001442:	2b01      	cmp	r3, #1
 8001444:	d102      	bne.n	800144c <HAL_RCC_OscConfig+0x94>
 8001446:	4ba1      	ldr	r3, [pc, #644]	; (80016cc <HAL_RCC_OscConfig+0x314>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	e015      	b.n	8001478 <HAL_RCC_OscConfig+0xc0>
 800144c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001450:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001454:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8001458:	fa93 f3a3 	rbit	r3, r3
 800145c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8001460:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001464:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001468:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 800146c:	fa93 f3a3 	rbit	r3, r3
 8001470:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001474:	4b95      	ldr	r3, [pc, #596]	; (80016cc <HAL_RCC_OscConfig+0x314>)
 8001476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001478:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800147c:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8001480:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8001484:	fa92 f2a2 	rbit	r2, r2
 8001488:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 800148c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001490:	fab2 f282 	clz	r2, r2
 8001494:	b2d2      	uxtb	r2, r2
 8001496:	f042 0220 	orr.w	r2, r2, #32
 800149a:	b2d2      	uxtb	r2, r2
 800149c:	f002 021f 	and.w	r2, r2, #31
 80014a0:	2101      	movs	r1, #1
 80014a2:	fa01 f202 	lsl.w	r2, r1, r2
 80014a6:	4013      	ands	r3, r2
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	f000 8111 	beq.w	80016d0 <HAL_RCC_OscConfig+0x318>
 80014ae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80014b2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	f040 8108 	bne.w	80016d0 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 80014c0:	2301      	movs	r3, #1
 80014c2:	f000 bfc6 	b.w	8002452 <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014c6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80014ca:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014d6:	d106      	bne.n	80014e6 <HAL_RCC_OscConfig+0x12e>
 80014d8:	4b7c      	ldr	r3, [pc, #496]	; (80016cc <HAL_RCC_OscConfig+0x314>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a7b      	ldr	r2, [pc, #492]	; (80016cc <HAL_RCC_OscConfig+0x314>)
 80014de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014e2:	6013      	str	r3, [r2, #0]
 80014e4:	e036      	b.n	8001554 <HAL_RCC_OscConfig+0x19c>
 80014e6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80014ea:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d10c      	bne.n	8001510 <HAL_RCC_OscConfig+0x158>
 80014f6:	4b75      	ldr	r3, [pc, #468]	; (80016cc <HAL_RCC_OscConfig+0x314>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4a74      	ldr	r2, [pc, #464]	; (80016cc <HAL_RCC_OscConfig+0x314>)
 80014fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001500:	6013      	str	r3, [r2, #0]
 8001502:	4b72      	ldr	r3, [pc, #456]	; (80016cc <HAL_RCC_OscConfig+0x314>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	4a71      	ldr	r2, [pc, #452]	; (80016cc <HAL_RCC_OscConfig+0x314>)
 8001508:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800150c:	6013      	str	r3, [r2, #0]
 800150e:	e021      	b.n	8001554 <HAL_RCC_OscConfig+0x19c>
 8001510:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001514:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001520:	d10c      	bne.n	800153c <HAL_RCC_OscConfig+0x184>
 8001522:	4b6a      	ldr	r3, [pc, #424]	; (80016cc <HAL_RCC_OscConfig+0x314>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4a69      	ldr	r2, [pc, #420]	; (80016cc <HAL_RCC_OscConfig+0x314>)
 8001528:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800152c:	6013      	str	r3, [r2, #0]
 800152e:	4b67      	ldr	r3, [pc, #412]	; (80016cc <HAL_RCC_OscConfig+0x314>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4a66      	ldr	r2, [pc, #408]	; (80016cc <HAL_RCC_OscConfig+0x314>)
 8001534:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001538:	6013      	str	r3, [r2, #0]
 800153a:	e00b      	b.n	8001554 <HAL_RCC_OscConfig+0x19c>
 800153c:	4b63      	ldr	r3, [pc, #396]	; (80016cc <HAL_RCC_OscConfig+0x314>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a62      	ldr	r2, [pc, #392]	; (80016cc <HAL_RCC_OscConfig+0x314>)
 8001542:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001546:	6013      	str	r3, [r2, #0]
 8001548:	4b60      	ldr	r3, [pc, #384]	; (80016cc <HAL_RCC_OscConfig+0x314>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a5f      	ldr	r2, [pc, #380]	; (80016cc <HAL_RCC_OscConfig+0x314>)
 800154e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001552:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001554:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001558:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d059      	beq.n	8001618 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001564:	f7ff fbb4 	bl	8000cd0 <HAL_GetTick>
 8001568:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800156c:	e00a      	b.n	8001584 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800156e:	f7ff fbaf 	bl	8000cd0 <HAL_GetTick>
 8001572:	4602      	mov	r2, r0
 8001574:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001578:	1ad3      	subs	r3, r2, r3
 800157a:	2b64      	cmp	r3, #100	; 0x64
 800157c:	d902      	bls.n	8001584 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800157e:	2303      	movs	r3, #3
 8001580:	f000 bf67 	b.w	8002452 <HAL_RCC_OscConfig+0x109a>
 8001584:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001588:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800158c:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8001590:	fa93 f3a3 	rbit	r3, r3
 8001594:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8001598:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800159c:	fab3 f383 	clz	r3, r3
 80015a0:	b2db      	uxtb	r3, r3
 80015a2:	095b      	lsrs	r3, r3, #5
 80015a4:	b2db      	uxtb	r3, r3
 80015a6:	f043 0301 	orr.w	r3, r3, #1
 80015aa:	b2db      	uxtb	r3, r3
 80015ac:	2b01      	cmp	r3, #1
 80015ae:	d102      	bne.n	80015b6 <HAL_RCC_OscConfig+0x1fe>
 80015b0:	4b46      	ldr	r3, [pc, #280]	; (80016cc <HAL_RCC_OscConfig+0x314>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	e015      	b.n	80015e2 <HAL_RCC_OscConfig+0x22a>
 80015b6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80015ba:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015be:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80015c2:	fa93 f3a3 	rbit	r3, r3
 80015c6:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 80015ca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80015ce:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80015d2:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 80015d6:	fa93 f3a3 	rbit	r3, r3
 80015da:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80015de:	4b3b      	ldr	r3, [pc, #236]	; (80016cc <HAL_RCC_OscConfig+0x314>)
 80015e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015e2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80015e6:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 80015ea:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 80015ee:	fa92 f2a2 	rbit	r2, r2
 80015f2:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 80015f6:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80015fa:	fab2 f282 	clz	r2, r2
 80015fe:	b2d2      	uxtb	r2, r2
 8001600:	f042 0220 	orr.w	r2, r2, #32
 8001604:	b2d2      	uxtb	r2, r2
 8001606:	f002 021f 	and.w	r2, r2, #31
 800160a:	2101      	movs	r1, #1
 800160c:	fa01 f202 	lsl.w	r2, r1, r2
 8001610:	4013      	ands	r3, r2
 8001612:	2b00      	cmp	r3, #0
 8001614:	d0ab      	beq.n	800156e <HAL_RCC_OscConfig+0x1b6>
 8001616:	e05c      	b.n	80016d2 <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001618:	f7ff fb5a 	bl	8000cd0 <HAL_GetTick>
 800161c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001620:	e00a      	b.n	8001638 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001622:	f7ff fb55 	bl	8000cd0 <HAL_GetTick>
 8001626:	4602      	mov	r2, r0
 8001628:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800162c:	1ad3      	subs	r3, r2, r3
 800162e:	2b64      	cmp	r3, #100	; 0x64
 8001630:	d902      	bls.n	8001638 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8001632:	2303      	movs	r3, #3
 8001634:	f000 bf0d 	b.w	8002452 <HAL_RCC_OscConfig+0x109a>
 8001638:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800163c:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001640:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8001644:	fa93 f3a3 	rbit	r3, r3
 8001648:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 800164c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001650:	fab3 f383 	clz	r3, r3
 8001654:	b2db      	uxtb	r3, r3
 8001656:	095b      	lsrs	r3, r3, #5
 8001658:	b2db      	uxtb	r3, r3
 800165a:	f043 0301 	orr.w	r3, r3, #1
 800165e:	b2db      	uxtb	r3, r3
 8001660:	2b01      	cmp	r3, #1
 8001662:	d102      	bne.n	800166a <HAL_RCC_OscConfig+0x2b2>
 8001664:	4b19      	ldr	r3, [pc, #100]	; (80016cc <HAL_RCC_OscConfig+0x314>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	e015      	b.n	8001696 <HAL_RCC_OscConfig+0x2de>
 800166a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800166e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001672:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8001676:	fa93 f3a3 	rbit	r3, r3
 800167a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 800167e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001682:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001686:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800168a:	fa93 f3a3 	rbit	r3, r3
 800168e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001692:	4b0e      	ldr	r3, [pc, #56]	; (80016cc <HAL_RCC_OscConfig+0x314>)
 8001694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001696:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800169a:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 800169e:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80016a2:	fa92 f2a2 	rbit	r2, r2
 80016a6:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 80016aa:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80016ae:	fab2 f282 	clz	r2, r2
 80016b2:	b2d2      	uxtb	r2, r2
 80016b4:	f042 0220 	orr.w	r2, r2, #32
 80016b8:	b2d2      	uxtb	r2, r2
 80016ba:	f002 021f 	and.w	r2, r2, #31
 80016be:	2101      	movs	r1, #1
 80016c0:	fa01 f202 	lsl.w	r2, r1, r2
 80016c4:	4013      	ands	r3, r2
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d1ab      	bne.n	8001622 <HAL_RCC_OscConfig+0x26a>
 80016ca:	e002      	b.n	80016d2 <HAL_RCC_OscConfig+0x31a>
 80016cc:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016d2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016d6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f003 0302 	and.w	r3, r3, #2
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	f000 817f 	beq.w	80019e6 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80016e8:	4ba7      	ldr	r3, [pc, #668]	; (8001988 <HAL_RCC_OscConfig+0x5d0>)
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	f003 030c 	and.w	r3, r3, #12
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d00c      	beq.n	800170e <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80016f4:	4ba4      	ldr	r3, [pc, #656]	; (8001988 <HAL_RCC_OscConfig+0x5d0>)
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	f003 030c 	and.w	r3, r3, #12
 80016fc:	2b08      	cmp	r3, #8
 80016fe:	d173      	bne.n	80017e8 <HAL_RCC_OscConfig+0x430>
 8001700:	4ba1      	ldr	r3, [pc, #644]	; (8001988 <HAL_RCC_OscConfig+0x5d0>)
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001708:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800170c:	d16c      	bne.n	80017e8 <HAL_RCC_OscConfig+0x430>
 800170e:	2302      	movs	r3, #2
 8001710:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001714:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001718:	fa93 f3a3 	rbit	r3, r3
 800171c:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8001720:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001724:	fab3 f383 	clz	r3, r3
 8001728:	b2db      	uxtb	r3, r3
 800172a:	095b      	lsrs	r3, r3, #5
 800172c:	b2db      	uxtb	r3, r3
 800172e:	f043 0301 	orr.w	r3, r3, #1
 8001732:	b2db      	uxtb	r3, r3
 8001734:	2b01      	cmp	r3, #1
 8001736:	d102      	bne.n	800173e <HAL_RCC_OscConfig+0x386>
 8001738:	4b93      	ldr	r3, [pc, #588]	; (8001988 <HAL_RCC_OscConfig+0x5d0>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	e013      	b.n	8001766 <HAL_RCC_OscConfig+0x3ae>
 800173e:	2302      	movs	r3, #2
 8001740:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001744:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001748:	fa93 f3a3 	rbit	r3, r3
 800174c:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8001750:	2302      	movs	r3, #2
 8001752:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001756:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 800175a:	fa93 f3a3 	rbit	r3, r3
 800175e:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001762:	4b89      	ldr	r3, [pc, #548]	; (8001988 <HAL_RCC_OscConfig+0x5d0>)
 8001764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001766:	2202      	movs	r2, #2
 8001768:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 800176c:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8001770:	fa92 f2a2 	rbit	r2, r2
 8001774:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8001778:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800177c:	fab2 f282 	clz	r2, r2
 8001780:	b2d2      	uxtb	r2, r2
 8001782:	f042 0220 	orr.w	r2, r2, #32
 8001786:	b2d2      	uxtb	r2, r2
 8001788:	f002 021f 	and.w	r2, r2, #31
 800178c:	2101      	movs	r1, #1
 800178e:	fa01 f202 	lsl.w	r2, r1, r2
 8001792:	4013      	ands	r3, r2
 8001794:	2b00      	cmp	r3, #0
 8001796:	d00a      	beq.n	80017ae <HAL_RCC_OscConfig+0x3f6>
 8001798:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800179c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	68db      	ldr	r3, [r3, #12]
 80017a4:	2b01      	cmp	r3, #1
 80017a6:	d002      	beq.n	80017ae <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 80017a8:	2301      	movs	r3, #1
 80017aa:	f000 be52 	b.w	8002452 <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017ae:	4b76      	ldr	r3, [pc, #472]	; (8001988 <HAL_RCC_OscConfig+0x5d0>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017b6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017ba:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	691b      	ldr	r3, [r3, #16]
 80017c2:	21f8      	movs	r1, #248	; 0xf8
 80017c4:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017c8:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 80017cc:	fa91 f1a1 	rbit	r1, r1
 80017d0:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 80017d4:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80017d8:	fab1 f181 	clz	r1, r1
 80017dc:	b2c9      	uxtb	r1, r1
 80017de:	408b      	lsls	r3, r1
 80017e0:	4969      	ldr	r1, [pc, #420]	; (8001988 <HAL_RCC_OscConfig+0x5d0>)
 80017e2:	4313      	orrs	r3, r2
 80017e4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017e6:	e0fe      	b.n	80019e6 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80017e8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017ec:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	68db      	ldr	r3, [r3, #12]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	f000 8088 	beq.w	800190a <HAL_RCC_OscConfig+0x552>
 80017fa:	2301      	movs	r3, #1
 80017fc:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001800:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001804:	fa93 f3a3 	rbit	r3, r3
 8001808:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 800180c:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001810:	fab3 f383 	clz	r3, r3
 8001814:	b2db      	uxtb	r3, r3
 8001816:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800181a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800181e:	009b      	lsls	r3, r3, #2
 8001820:	461a      	mov	r2, r3
 8001822:	2301      	movs	r3, #1
 8001824:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001826:	f7ff fa53 	bl	8000cd0 <HAL_GetTick>
 800182a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800182e:	e00a      	b.n	8001846 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001830:	f7ff fa4e 	bl	8000cd0 <HAL_GetTick>
 8001834:	4602      	mov	r2, r0
 8001836:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800183a:	1ad3      	subs	r3, r2, r3
 800183c:	2b02      	cmp	r3, #2
 800183e:	d902      	bls.n	8001846 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001840:	2303      	movs	r3, #3
 8001842:	f000 be06 	b.w	8002452 <HAL_RCC_OscConfig+0x109a>
 8001846:	2302      	movs	r3, #2
 8001848:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800184c:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001850:	fa93 f3a3 	rbit	r3, r3
 8001854:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8001858:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800185c:	fab3 f383 	clz	r3, r3
 8001860:	b2db      	uxtb	r3, r3
 8001862:	095b      	lsrs	r3, r3, #5
 8001864:	b2db      	uxtb	r3, r3
 8001866:	f043 0301 	orr.w	r3, r3, #1
 800186a:	b2db      	uxtb	r3, r3
 800186c:	2b01      	cmp	r3, #1
 800186e:	d102      	bne.n	8001876 <HAL_RCC_OscConfig+0x4be>
 8001870:	4b45      	ldr	r3, [pc, #276]	; (8001988 <HAL_RCC_OscConfig+0x5d0>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	e013      	b.n	800189e <HAL_RCC_OscConfig+0x4e6>
 8001876:	2302      	movs	r3, #2
 8001878:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800187c:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001880:	fa93 f3a3 	rbit	r3, r3
 8001884:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8001888:	2302      	movs	r3, #2
 800188a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800188e:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001892:	fa93 f3a3 	rbit	r3, r3
 8001896:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800189a:	4b3b      	ldr	r3, [pc, #236]	; (8001988 <HAL_RCC_OscConfig+0x5d0>)
 800189c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800189e:	2202      	movs	r2, #2
 80018a0:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80018a4:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80018a8:	fa92 f2a2 	rbit	r2, r2
 80018ac:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 80018b0:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80018b4:	fab2 f282 	clz	r2, r2
 80018b8:	b2d2      	uxtb	r2, r2
 80018ba:	f042 0220 	orr.w	r2, r2, #32
 80018be:	b2d2      	uxtb	r2, r2
 80018c0:	f002 021f 	and.w	r2, r2, #31
 80018c4:	2101      	movs	r1, #1
 80018c6:	fa01 f202 	lsl.w	r2, r1, r2
 80018ca:	4013      	ands	r3, r2
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d0af      	beq.n	8001830 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018d0:	4b2d      	ldr	r3, [pc, #180]	; (8001988 <HAL_RCC_OscConfig+0x5d0>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018d8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018dc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	691b      	ldr	r3, [r3, #16]
 80018e4:	21f8      	movs	r1, #248	; 0xf8
 80018e6:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018ea:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 80018ee:	fa91 f1a1 	rbit	r1, r1
 80018f2:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 80018f6:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80018fa:	fab1 f181 	clz	r1, r1
 80018fe:	b2c9      	uxtb	r1, r1
 8001900:	408b      	lsls	r3, r1
 8001902:	4921      	ldr	r1, [pc, #132]	; (8001988 <HAL_RCC_OscConfig+0x5d0>)
 8001904:	4313      	orrs	r3, r2
 8001906:	600b      	str	r3, [r1, #0]
 8001908:	e06d      	b.n	80019e6 <HAL_RCC_OscConfig+0x62e>
 800190a:	2301      	movs	r3, #1
 800190c:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001910:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001914:	fa93 f3a3 	rbit	r3, r3
 8001918:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 800191c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001920:	fab3 f383 	clz	r3, r3
 8001924:	b2db      	uxtb	r3, r3
 8001926:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800192a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800192e:	009b      	lsls	r3, r3, #2
 8001930:	461a      	mov	r2, r3
 8001932:	2300      	movs	r3, #0
 8001934:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001936:	f7ff f9cb 	bl	8000cd0 <HAL_GetTick>
 800193a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800193e:	e00a      	b.n	8001956 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001940:	f7ff f9c6 	bl	8000cd0 <HAL_GetTick>
 8001944:	4602      	mov	r2, r0
 8001946:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800194a:	1ad3      	subs	r3, r2, r3
 800194c:	2b02      	cmp	r3, #2
 800194e:	d902      	bls.n	8001956 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8001950:	2303      	movs	r3, #3
 8001952:	f000 bd7e 	b.w	8002452 <HAL_RCC_OscConfig+0x109a>
 8001956:	2302      	movs	r3, #2
 8001958:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800195c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001960:	fa93 f3a3 	rbit	r3, r3
 8001964:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8001968:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800196c:	fab3 f383 	clz	r3, r3
 8001970:	b2db      	uxtb	r3, r3
 8001972:	095b      	lsrs	r3, r3, #5
 8001974:	b2db      	uxtb	r3, r3
 8001976:	f043 0301 	orr.w	r3, r3, #1
 800197a:	b2db      	uxtb	r3, r3
 800197c:	2b01      	cmp	r3, #1
 800197e:	d105      	bne.n	800198c <HAL_RCC_OscConfig+0x5d4>
 8001980:	4b01      	ldr	r3, [pc, #4]	; (8001988 <HAL_RCC_OscConfig+0x5d0>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	e016      	b.n	80019b4 <HAL_RCC_OscConfig+0x5fc>
 8001986:	bf00      	nop
 8001988:	40021000 	.word	0x40021000
 800198c:	2302      	movs	r3, #2
 800198e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001992:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001996:	fa93 f3a3 	rbit	r3, r3
 800199a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800199e:	2302      	movs	r3, #2
 80019a0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80019a4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80019a8:	fa93 f3a3 	rbit	r3, r3
 80019ac:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80019b0:	4bbf      	ldr	r3, [pc, #764]	; (8001cb0 <HAL_RCC_OscConfig+0x8f8>)
 80019b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019b4:	2202      	movs	r2, #2
 80019b6:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80019ba:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80019be:	fa92 f2a2 	rbit	r2, r2
 80019c2:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 80019c6:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80019ca:	fab2 f282 	clz	r2, r2
 80019ce:	b2d2      	uxtb	r2, r2
 80019d0:	f042 0220 	orr.w	r2, r2, #32
 80019d4:	b2d2      	uxtb	r2, r2
 80019d6:	f002 021f 	and.w	r2, r2, #31
 80019da:	2101      	movs	r1, #1
 80019dc:	fa01 f202 	lsl.w	r2, r1, r2
 80019e0:	4013      	ands	r3, r2
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d1ac      	bne.n	8001940 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019e6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019ea:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f003 0308 	and.w	r3, r3, #8
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	f000 8113 	beq.w	8001c22 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80019fc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a00:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	695b      	ldr	r3, [r3, #20]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d07c      	beq.n	8001b06 <HAL_RCC_OscConfig+0x74e>
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001a16:	fa93 f3a3 	rbit	r3, r3
 8001a1a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8001a1e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a22:	fab3 f383 	clz	r3, r3
 8001a26:	b2db      	uxtb	r3, r3
 8001a28:	461a      	mov	r2, r3
 8001a2a:	4ba2      	ldr	r3, [pc, #648]	; (8001cb4 <HAL_RCC_OscConfig+0x8fc>)
 8001a2c:	4413      	add	r3, r2
 8001a2e:	009b      	lsls	r3, r3, #2
 8001a30:	461a      	mov	r2, r3
 8001a32:	2301      	movs	r3, #1
 8001a34:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a36:	f7ff f94b 	bl	8000cd0 <HAL_GetTick>
 8001a3a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a3e:	e00a      	b.n	8001a56 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a40:	f7ff f946 	bl	8000cd0 <HAL_GetTick>
 8001a44:	4602      	mov	r2, r0
 8001a46:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001a4a:	1ad3      	subs	r3, r2, r3
 8001a4c:	2b02      	cmp	r3, #2
 8001a4e:	d902      	bls.n	8001a56 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8001a50:	2303      	movs	r3, #3
 8001a52:	f000 bcfe 	b.w	8002452 <HAL_RCC_OscConfig+0x109a>
 8001a56:	2302      	movs	r3, #2
 8001a58:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001a60:	fa93 f2a3 	rbit	r2, r3
 8001a64:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a68:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001a6c:	601a      	str	r2, [r3, #0]
 8001a6e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a72:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001a76:	2202      	movs	r2, #2
 8001a78:	601a      	str	r2, [r3, #0]
 8001a7a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a7e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	fa93 f2a3 	rbit	r2, r3
 8001a88:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001a90:	601a      	str	r2, [r3, #0]
 8001a92:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a96:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001a9a:	2202      	movs	r2, #2
 8001a9c:	601a      	str	r2, [r3, #0]
 8001a9e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001aa2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	fa93 f2a3 	rbit	r2, r3
 8001aac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ab0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001ab4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ab6:	4b7e      	ldr	r3, [pc, #504]	; (8001cb0 <HAL_RCC_OscConfig+0x8f8>)
 8001ab8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001aba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001abe:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001ac2:	2102      	movs	r1, #2
 8001ac4:	6019      	str	r1, [r3, #0]
 8001ac6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001aca:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	fa93 f1a3 	rbit	r1, r3
 8001ad4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ad8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001adc:	6019      	str	r1, [r3, #0]
  return result;
 8001ade:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ae2:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	fab3 f383 	clz	r3, r3
 8001aec:	b2db      	uxtb	r3, r3
 8001aee:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001af2:	b2db      	uxtb	r3, r3
 8001af4:	f003 031f 	and.w	r3, r3, #31
 8001af8:	2101      	movs	r1, #1
 8001afa:	fa01 f303 	lsl.w	r3, r1, r3
 8001afe:	4013      	ands	r3, r2
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d09d      	beq.n	8001a40 <HAL_RCC_OscConfig+0x688>
 8001b04:	e08d      	b.n	8001c22 <HAL_RCC_OscConfig+0x86a>
 8001b06:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b0a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001b0e:	2201      	movs	r2, #1
 8001b10:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b12:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b16:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	fa93 f2a3 	rbit	r2, r3
 8001b20:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b24:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001b28:	601a      	str	r2, [r3, #0]
  return result;
 8001b2a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b2e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001b32:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b34:	fab3 f383 	clz	r3, r3
 8001b38:	b2db      	uxtb	r3, r3
 8001b3a:	461a      	mov	r2, r3
 8001b3c:	4b5d      	ldr	r3, [pc, #372]	; (8001cb4 <HAL_RCC_OscConfig+0x8fc>)
 8001b3e:	4413      	add	r3, r2
 8001b40:	009b      	lsls	r3, r3, #2
 8001b42:	461a      	mov	r2, r3
 8001b44:	2300      	movs	r3, #0
 8001b46:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b48:	f7ff f8c2 	bl	8000cd0 <HAL_GetTick>
 8001b4c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b50:	e00a      	b.n	8001b68 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b52:	f7ff f8bd 	bl	8000cd0 <HAL_GetTick>
 8001b56:	4602      	mov	r2, r0
 8001b58:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001b5c:	1ad3      	subs	r3, r2, r3
 8001b5e:	2b02      	cmp	r3, #2
 8001b60:	d902      	bls.n	8001b68 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8001b62:	2303      	movs	r3, #3
 8001b64:	f000 bc75 	b.w	8002452 <HAL_RCC_OscConfig+0x109a>
 8001b68:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b6c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001b70:	2202      	movs	r2, #2
 8001b72:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b74:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b78:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	fa93 f2a3 	rbit	r2, r3
 8001b82:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b86:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001b8a:	601a      	str	r2, [r3, #0]
 8001b8c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b90:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001b94:	2202      	movs	r2, #2
 8001b96:	601a      	str	r2, [r3, #0]
 8001b98:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b9c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	fa93 f2a3 	rbit	r2, r3
 8001ba6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001baa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001bae:	601a      	str	r2, [r3, #0]
 8001bb0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bb4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001bb8:	2202      	movs	r2, #2
 8001bba:	601a      	str	r2, [r3, #0]
 8001bbc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bc0:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	fa93 f2a3 	rbit	r2, r3
 8001bca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bce:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001bd2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bd4:	4b36      	ldr	r3, [pc, #216]	; (8001cb0 <HAL_RCC_OscConfig+0x8f8>)
 8001bd6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001bd8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bdc:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001be0:	2102      	movs	r1, #2
 8001be2:	6019      	str	r1, [r3, #0]
 8001be4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001be8:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	fa93 f1a3 	rbit	r1, r3
 8001bf2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bf6:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001bfa:	6019      	str	r1, [r3, #0]
  return result;
 8001bfc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c00:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	fab3 f383 	clz	r3, r3
 8001c0a:	b2db      	uxtb	r3, r3
 8001c0c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001c10:	b2db      	uxtb	r3, r3
 8001c12:	f003 031f 	and.w	r3, r3, #31
 8001c16:	2101      	movs	r1, #1
 8001c18:	fa01 f303 	lsl.w	r3, r1, r3
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d197      	bne.n	8001b52 <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c22:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c26:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f003 0304 	and.w	r3, r3, #4
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	f000 81a5 	beq.w	8001f82 <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c3e:	4b1c      	ldr	r3, [pc, #112]	; (8001cb0 <HAL_RCC_OscConfig+0x8f8>)
 8001c40:	69db      	ldr	r3, [r3, #28]
 8001c42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d116      	bne.n	8001c78 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c4a:	4b19      	ldr	r3, [pc, #100]	; (8001cb0 <HAL_RCC_OscConfig+0x8f8>)
 8001c4c:	69db      	ldr	r3, [r3, #28]
 8001c4e:	4a18      	ldr	r2, [pc, #96]	; (8001cb0 <HAL_RCC_OscConfig+0x8f8>)
 8001c50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c54:	61d3      	str	r3, [r2, #28]
 8001c56:	4b16      	ldr	r3, [pc, #88]	; (8001cb0 <HAL_RCC_OscConfig+0x8f8>)
 8001c58:	69db      	ldr	r3, [r3, #28]
 8001c5a:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001c5e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c62:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c66:	601a      	str	r2, [r3, #0]
 8001c68:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c6c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c70:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001c72:	2301      	movs	r3, #1
 8001c74:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c78:	4b0f      	ldr	r3, [pc, #60]	; (8001cb8 <HAL_RCC_OscConfig+0x900>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d121      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c84:	4b0c      	ldr	r3, [pc, #48]	; (8001cb8 <HAL_RCC_OscConfig+0x900>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a0b      	ldr	r2, [pc, #44]	; (8001cb8 <HAL_RCC_OscConfig+0x900>)
 8001c8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c8e:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c90:	f7ff f81e 	bl	8000cd0 <HAL_GetTick>
 8001c94:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c98:	e010      	b.n	8001cbc <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c9a:	f7ff f819 	bl	8000cd0 <HAL_GetTick>
 8001c9e:	4602      	mov	r2, r0
 8001ca0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001ca4:	1ad3      	subs	r3, r2, r3
 8001ca6:	2b64      	cmp	r3, #100	; 0x64
 8001ca8:	d908      	bls.n	8001cbc <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8001caa:	2303      	movs	r3, #3
 8001cac:	e3d1      	b.n	8002452 <HAL_RCC_OscConfig+0x109a>
 8001cae:	bf00      	nop
 8001cb0:	40021000 	.word	0x40021000
 8001cb4:	10908120 	.word	0x10908120
 8001cb8:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cbc:	4b8d      	ldr	r3, [pc, #564]	; (8001ef4 <HAL_RCC_OscConfig+0xb3c>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d0e8      	beq.n	8001c9a <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cc8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ccc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	689b      	ldr	r3, [r3, #8]
 8001cd4:	2b01      	cmp	r3, #1
 8001cd6:	d106      	bne.n	8001ce6 <HAL_RCC_OscConfig+0x92e>
 8001cd8:	4b87      	ldr	r3, [pc, #540]	; (8001ef8 <HAL_RCC_OscConfig+0xb40>)
 8001cda:	6a1b      	ldr	r3, [r3, #32]
 8001cdc:	4a86      	ldr	r2, [pc, #536]	; (8001ef8 <HAL_RCC_OscConfig+0xb40>)
 8001cde:	f043 0301 	orr.w	r3, r3, #1
 8001ce2:	6213      	str	r3, [r2, #32]
 8001ce4:	e035      	b.n	8001d52 <HAL_RCC_OscConfig+0x99a>
 8001ce6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cea:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	689b      	ldr	r3, [r3, #8]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d10c      	bne.n	8001d10 <HAL_RCC_OscConfig+0x958>
 8001cf6:	4b80      	ldr	r3, [pc, #512]	; (8001ef8 <HAL_RCC_OscConfig+0xb40>)
 8001cf8:	6a1b      	ldr	r3, [r3, #32]
 8001cfa:	4a7f      	ldr	r2, [pc, #508]	; (8001ef8 <HAL_RCC_OscConfig+0xb40>)
 8001cfc:	f023 0301 	bic.w	r3, r3, #1
 8001d00:	6213      	str	r3, [r2, #32]
 8001d02:	4b7d      	ldr	r3, [pc, #500]	; (8001ef8 <HAL_RCC_OscConfig+0xb40>)
 8001d04:	6a1b      	ldr	r3, [r3, #32]
 8001d06:	4a7c      	ldr	r2, [pc, #496]	; (8001ef8 <HAL_RCC_OscConfig+0xb40>)
 8001d08:	f023 0304 	bic.w	r3, r3, #4
 8001d0c:	6213      	str	r3, [r2, #32]
 8001d0e:	e020      	b.n	8001d52 <HAL_RCC_OscConfig+0x99a>
 8001d10:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d14:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	689b      	ldr	r3, [r3, #8]
 8001d1c:	2b05      	cmp	r3, #5
 8001d1e:	d10c      	bne.n	8001d3a <HAL_RCC_OscConfig+0x982>
 8001d20:	4b75      	ldr	r3, [pc, #468]	; (8001ef8 <HAL_RCC_OscConfig+0xb40>)
 8001d22:	6a1b      	ldr	r3, [r3, #32]
 8001d24:	4a74      	ldr	r2, [pc, #464]	; (8001ef8 <HAL_RCC_OscConfig+0xb40>)
 8001d26:	f043 0304 	orr.w	r3, r3, #4
 8001d2a:	6213      	str	r3, [r2, #32]
 8001d2c:	4b72      	ldr	r3, [pc, #456]	; (8001ef8 <HAL_RCC_OscConfig+0xb40>)
 8001d2e:	6a1b      	ldr	r3, [r3, #32]
 8001d30:	4a71      	ldr	r2, [pc, #452]	; (8001ef8 <HAL_RCC_OscConfig+0xb40>)
 8001d32:	f043 0301 	orr.w	r3, r3, #1
 8001d36:	6213      	str	r3, [r2, #32]
 8001d38:	e00b      	b.n	8001d52 <HAL_RCC_OscConfig+0x99a>
 8001d3a:	4b6f      	ldr	r3, [pc, #444]	; (8001ef8 <HAL_RCC_OscConfig+0xb40>)
 8001d3c:	6a1b      	ldr	r3, [r3, #32]
 8001d3e:	4a6e      	ldr	r2, [pc, #440]	; (8001ef8 <HAL_RCC_OscConfig+0xb40>)
 8001d40:	f023 0301 	bic.w	r3, r3, #1
 8001d44:	6213      	str	r3, [r2, #32]
 8001d46:	4b6c      	ldr	r3, [pc, #432]	; (8001ef8 <HAL_RCC_OscConfig+0xb40>)
 8001d48:	6a1b      	ldr	r3, [r3, #32]
 8001d4a:	4a6b      	ldr	r2, [pc, #428]	; (8001ef8 <HAL_RCC_OscConfig+0xb40>)
 8001d4c:	f023 0304 	bic.w	r3, r3, #4
 8001d50:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d52:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d56:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	689b      	ldr	r3, [r3, #8]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	f000 8081 	beq.w	8001e66 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d64:	f7fe ffb4 	bl	8000cd0 <HAL_GetTick>
 8001d68:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d6c:	e00b      	b.n	8001d86 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d6e:	f7fe ffaf 	bl	8000cd0 <HAL_GetTick>
 8001d72:	4602      	mov	r2, r0
 8001d74:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001d78:	1ad3      	subs	r3, r2, r3
 8001d7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d901      	bls.n	8001d86 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8001d82:	2303      	movs	r3, #3
 8001d84:	e365      	b.n	8002452 <HAL_RCC_OscConfig+0x109a>
 8001d86:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d8a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001d8e:	2202      	movs	r2, #2
 8001d90:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d92:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d96:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	fa93 f2a3 	rbit	r2, r3
 8001da0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001da4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001da8:	601a      	str	r2, [r3, #0]
 8001daa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dae:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001db2:	2202      	movs	r2, #2
 8001db4:	601a      	str	r2, [r3, #0]
 8001db6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dba:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	fa93 f2a3 	rbit	r2, r3
 8001dc4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dc8:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001dcc:	601a      	str	r2, [r3, #0]
  return result;
 8001dce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dd2:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001dd6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dd8:	fab3 f383 	clz	r3, r3
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	095b      	lsrs	r3, r3, #5
 8001de0:	b2db      	uxtb	r3, r3
 8001de2:	f043 0302 	orr.w	r3, r3, #2
 8001de6:	b2db      	uxtb	r3, r3
 8001de8:	2b02      	cmp	r3, #2
 8001dea:	d102      	bne.n	8001df2 <HAL_RCC_OscConfig+0xa3a>
 8001dec:	4b42      	ldr	r3, [pc, #264]	; (8001ef8 <HAL_RCC_OscConfig+0xb40>)
 8001dee:	6a1b      	ldr	r3, [r3, #32]
 8001df0:	e013      	b.n	8001e1a <HAL_RCC_OscConfig+0xa62>
 8001df2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001df6:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001dfa:	2202      	movs	r2, #2
 8001dfc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dfe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e02:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	fa93 f2a3 	rbit	r2, r3
 8001e0c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e10:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8001e14:	601a      	str	r2, [r3, #0]
 8001e16:	4b38      	ldr	r3, [pc, #224]	; (8001ef8 <HAL_RCC_OscConfig+0xb40>)
 8001e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e1a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001e1e:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001e22:	2102      	movs	r1, #2
 8001e24:	6011      	str	r1, [r2, #0]
 8001e26:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001e2a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001e2e:	6812      	ldr	r2, [r2, #0]
 8001e30:	fa92 f1a2 	rbit	r1, r2
 8001e34:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001e38:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8001e3c:	6011      	str	r1, [r2, #0]
  return result;
 8001e3e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001e42:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8001e46:	6812      	ldr	r2, [r2, #0]
 8001e48:	fab2 f282 	clz	r2, r2
 8001e4c:	b2d2      	uxtb	r2, r2
 8001e4e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001e52:	b2d2      	uxtb	r2, r2
 8001e54:	f002 021f 	and.w	r2, r2, #31
 8001e58:	2101      	movs	r1, #1
 8001e5a:	fa01 f202 	lsl.w	r2, r1, r2
 8001e5e:	4013      	ands	r3, r2
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d084      	beq.n	8001d6e <HAL_RCC_OscConfig+0x9b6>
 8001e64:	e083      	b.n	8001f6e <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e66:	f7fe ff33 	bl	8000cd0 <HAL_GetTick>
 8001e6a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e6e:	e00b      	b.n	8001e88 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e70:	f7fe ff2e 	bl	8000cd0 <HAL_GetTick>
 8001e74:	4602      	mov	r2, r0
 8001e76:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001e7a:	1ad3      	subs	r3, r2, r3
 8001e7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d901      	bls.n	8001e88 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8001e84:	2303      	movs	r3, #3
 8001e86:	e2e4      	b.n	8002452 <HAL_RCC_OscConfig+0x109a>
 8001e88:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e8c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001e90:	2202      	movs	r2, #2
 8001e92:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e94:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e98:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	fa93 f2a3 	rbit	r2, r3
 8001ea2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ea6:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001eaa:	601a      	str	r2, [r3, #0]
 8001eac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001eb0:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001eb4:	2202      	movs	r2, #2
 8001eb6:	601a      	str	r2, [r3, #0]
 8001eb8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ebc:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	fa93 f2a3 	rbit	r2, r3
 8001ec6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001eca:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001ece:	601a      	str	r2, [r3, #0]
  return result;
 8001ed0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ed4:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001ed8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001eda:	fab3 f383 	clz	r3, r3
 8001ede:	b2db      	uxtb	r3, r3
 8001ee0:	095b      	lsrs	r3, r3, #5
 8001ee2:	b2db      	uxtb	r3, r3
 8001ee4:	f043 0302 	orr.w	r3, r3, #2
 8001ee8:	b2db      	uxtb	r3, r3
 8001eea:	2b02      	cmp	r3, #2
 8001eec:	d106      	bne.n	8001efc <HAL_RCC_OscConfig+0xb44>
 8001eee:	4b02      	ldr	r3, [pc, #8]	; (8001ef8 <HAL_RCC_OscConfig+0xb40>)
 8001ef0:	6a1b      	ldr	r3, [r3, #32]
 8001ef2:	e017      	b.n	8001f24 <HAL_RCC_OscConfig+0xb6c>
 8001ef4:	40007000 	.word	0x40007000
 8001ef8:	40021000 	.word	0x40021000
 8001efc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f00:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001f04:	2202      	movs	r2, #2
 8001f06:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f08:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f0c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	fa93 f2a3 	rbit	r2, r3
 8001f16:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f1a:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8001f1e:	601a      	str	r2, [r3, #0]
 8001f20:	4bb3      	ldr	r3, [pc, #716]	; (80021f0 <HAL_RCC_OscConfig+0xe38>)
 8001f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f24:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001f28:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001f2c:	2102      	movs	r1, #2
 8001f2e:	6011      	str	r1, [r2, #0]
 8001f30:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001f34:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001f38:	6812      	ldr	r2, [r2, #0]
 8001f3a:	fa92 f1a2 	rbit	r1, r2
 8001f3e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001f42:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8001f46:	6011      	str	r1, [r2, #0]
  return result;
 8001f48:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001f4c:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8001f50:	6812      	ldr	r2, [r2, #0]
 8001f52:	fab2 f282 	clz	r2, r2
 8001f56:	b2d2      	uxtb	r2, r2
 8001f58:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001f5c:	b2d2      	uxtb	r2, r2
 8001f5e:	f002 021f 	and.w	r2, r2, #31
 8001f62:	2101      	movs	r1, #1
 8001f64:	fa01 f202 	lsl.w	r2, r1, r2
 8001f68:	4013      	ands	r3, r2
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d180      	bne.n	8001e70 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001f6e:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8001f72:	2b01      	cmp	r3, #1
 8001f74:	d105      	bne.n	8001f82 <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f76:	4b9e      	ldr	r3, [pc, #632]	; (80021f0 <HAL_RCC_OscConfig+0xe38>)
 8001f78:	69db      	ldr	r3, [r3, #28]
 8001f7a:	4a9d      	ldr	r2, [pc, #628]	; (80021f0 <HAL_RCC_OscConfig+0xe38>)
 8001f7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f80:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f82:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f86:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	699b      	ldr	r3, [r3, #24]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	f000 825e 	beq.w	8002450 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f94:	4b96      	ldr	r3, [pc, #600]	; (80021f0 <HAL_RCC_OscConfig+0xe38>)
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	f003 030c 	and.w	r3, r3, #12
 8001f9c:	2b08      	cmp	r3, #8
 8001f9e:	f000 821f 	beq.w	80023e0 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001fa2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fa6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	699b      	ldr	r3, [r3, #24]
 8001fae:	2b02      	cmp	r3, #2
 8001fb0:	f040 8170 	bne.w	8002294 <HAL_RCC_OscConfig+0xedc>
 8001fb4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fb8:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001fbc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001fc0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fc2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fc6:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	fa93 f2a3 	rbit	r2, r3
 8001fd0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fd4:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001fd8:	601a      	str	r2, [r3, #0]
  return result;
 8001fda:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fde:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001fe2:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fe4:	fab3 f383 	clz	r3, r3
 8001fe8:	b2db      	uxtb	r3, r3
 8001fea:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001fee:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001ff2:	009b      	lsls	r3, r3, #2
 8001ff4:	461a      	mov	r2, r3
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ffa:	f7fe fe69 	bl	8000cd0 <HAL_GetTick>
 8001ffe:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002002:	e009      	b.n	8002018 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002004:	f7fe fe64 	bl	8000cd0 <HAL_GetTick>
 8002008:	4602      	mov	r2, r0
 800200a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800200e:	1ad3      	subs	r3, r2, r3
 8002010:	2b02      	cmp	r3, #2
 8002012:	d901      	bls.n	8002018 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8002014:	2303      	movs	r3, #3
 8002016:	e21c      	b.n	8002452 <HAL_RCC_OscConfig+0x109a>
 8002018:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800201c:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002020:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002024:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002026:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800202a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	fa93 f2a3 	rbit	r2, r3
 8002034:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002038:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800203c:	601a      	str	r2, [r3, #0]
  return result;
 800203e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002042:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002046:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002048:	fab3 f383 	clz	r3, r3
 800204c:	b2db      	uxtb	r3, r3
 800204e:	095b      	lsrs	r3, r3, #5
 8002050:	b2db      	uxtb	r3, r3
 8002052:	f043 0301 	orr.w	r3, r3, #1
 8002056:	b2db      	uxtb	r3, r3
 8002058:	2b01      	cmp	r3, #1
 800205a:	d102      	bne.n	8002062 <HAL_RCC_OscConfig+0xcaa>
 800205c:	4b64      	ldr	r3, [pc, #400]	; (80021f0 <HAL_RCC_OscConfig+0xe38>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	e027      	b.n	80020b2 <HAL_RCC_OscConfig+0xcfa>
 8002062:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002066:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800206a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800206e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002070:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002074:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	fa93 f2a3 	rbit	r2, r3
 800207e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002082:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002086:	601a      	str	r2, [r3, #0]
 8002088:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800208c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002090:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002094:	601a      	str	r2, [r3, #0]
 8002096:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800209a:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	fa93 f2a3 	rbit	r2, r3
 80020a4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020a8:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 80020ac:	601a      	str	r2, [r3, #0]
 80020ae:	4b50      	ldr	r3, [pc, #320]	; (80021f0 <HAL_RCC_OscConfig+0xe38>)
 80020b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020b2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80020b6:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80020ba:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80020be:	6011      	str	r1, [r2, #0]
 80020c0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80020c4:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80020c8:	6812      	ldr	r2, [r2, #0]
 80020ca:	fa92 f1a2 	rbit	r1, r2
 80020ce:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80020d2:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 80020d6:	6011      	str	r1, [r2, #0]
  return result;
 80020d8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80020dc:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 80020e0:	6812      	ldr	r2, [r2, #0]
 80020e2:	fab2 f282 	clz	r2, r2
 80020e6:	b2d2      	uxtb	r2, r2
 80020e8:	f042 0220 	orr.w	r2, r2, #32
 80020ec:	b2d2      	uxtb	r2, r2
 80020ee:	f002 021f 	and.w	r2, r2, #31
 80020f2:	2101      	movs	r1, #1
 80020f4:	fa01 f202 	lsl.w	r2, r1, r2
 80020f8:	4013      	ands	r3, r2
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d182      	bne.n	8002004 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020fe:	4b3c      	ldr	r3, [pc, #240]	; (80021f0 <HAL_RCC_OscConfig+0xe38>)
 8002100:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002102:	f023 020f 	bic.w	r2, r3, #15
 8002106:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800210a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002112:	4937      	ldr	r1, [pc, #220]	; (80021f0 <HAL_RCC_OscConfig+0xe38>)
 8002114:	4313      	orrs	r3, r2
 8002116:	62cb      	str	r3, [r1, #44]	; 0x2c
 8002118:	4b35      	ldr	r3, [pc, #212]	; (80021f0 <HAL_RCC_OscConfig+0xe38>)
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8002120:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002124:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	6a19      	ldr	r1, [r3, #32]
 800212c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002130:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	69db      	ldr	r3, [r3, #28]
 8002138:	430b      	orrs	r3, r1
 800213a:	492d      	ldr	r1, [pc, #180]	; (80021f0 <HAL_RCC_OscConfig+0xe38>)
 800213c:	4313      	orrs	r3, r2
 800213e:	604b      	str	r3, [r1, #4]
 8002140:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002144:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002148:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800214c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800214e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002152:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	fa93 f2a3 	rbit	r2, r3
 800215c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002160:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002164:	601a      	str	r2, [r3, #0]
  return result;
 8002166:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800216a:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800216e:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002170:	fab3 f383 	clz	r3, r3
 8002174:	b2db      	uxtb	r3, r3
 8002176:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800217a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800217e:	009b      	lsls	r3, r3, #2
 8002180:	461a      	mov	r2, r3
 8002182:	2301      	movs	r3, #1
 8002184:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002186:	f7fe fda3 	bl	8000cd0 <HAL_GetTick>
 800218a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800218e:	e009      	b.n	80021a4 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002190:	f7fe fd9e 	bl	8000cd0 <HAL_GetTick>
 8002194:	4602      	mov	r2, r0
 8002196:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800219a:	1ad3      	subs	r3, r2, r3
 800219c:	2b02      	cmp	r3, #2
 800219e:	d901      	bls.n	80021a4 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 80021a0:	2303      	movs	r3, #3
 80021a2:	e156      	b.n	8002452 <HAL_RCC_OscConfig+0x109a>
 80021a4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021a8:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80021ac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80021b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021b2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021b6:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	fa93 f2a3 	rbit	r2, r3
 80021c0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021c4:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80021c8:	601a      	str	r2, [r3, #0]
  return result;
 80021ca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021ce:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80021d2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80021d4:	fab3 f383 	clz	r3, r3
 80021d8:	b2db      	uxtb	r3, r3
 80021da:	095b      	lsrs	r3, r3, #5
 80021dc:	b2db      	uxtb	r3, r3
 80021de:	f043 0301 	orr.w	r3, r3, #1
 80021e2:	b2db      	uxtb	r3, r3
 80021e4:	2b01      	cmp	r3, #1
 80021e6:	d105      	bne.n	80021f4 <HAL_RCC_OscConfig+0xe3c>
 80021e8:	4b01      	ldr	r3, [pc, #4]	; (80021f0 <HAL_RCC_OscConfig+0xe38>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	e02a      	b.n	8002244 <HAL_RCC_OscConfig+0xe8c>
 80021ee:	bf00      	nop
 80021f0:	40021000 	.word	0x40021000
 80021f4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021f8:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80021fc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002200:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002202:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002206:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	fa93 f2a3 	rbit	r2, r3
 8002210:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002214:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002218:	601a      	str	r2, [r3, #0]
 800221a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800221e:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002222:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002226:	601a      	str	r2, [r3, #0]
 8002228:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800222c:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	fa93 f2a3 	rbit	r2, r3
 8002236:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800223a:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 800223e:	601a      	str	r2, [r3, #0]
 8002240:	4b86      	ldr	r3, [pc, #536]	; (800245c <HAL_RCC_OscConfig+0x10a4>)
 8002242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002244:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002248:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800224c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002250:	6011      	str	r1, [r2, #0]
 8002252:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002256:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800225a:	6812      	ldr	r2, [r2, #0]
 800225c:	fa92 f1a2 	rbit	r1, r2
 8002260:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002264:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8002268:	6011      	str	r1, [r2, #0]
  return result;
 800226a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800226e:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8002272:	6812      	ldr	r2, [r2, #0]
 8002274:	fab2 f282 	clz	r2, r2
 8002278:	b2d2      	uxtb	r2, r2
 800227a:	f042 0220 	orr.w	r2, r2, #32
 800227e:	b2d2      	uxtb	r2, r2
 8002280:	f002 021f 	and.w	r2, r2, #31
 8002284:	2101      	movs	r1, #1
 8002286:	fa01 f202 	lsl.w	r2, r1, r2
 800228a:	4013      	ands	r3, r2
 800228c:	2b00      	cmp	r3, #0
 800228e:	f43f af7f 	beq.w	8002190 <HAL_RCC_OscConfig+0xdd8>
 8002292:	e0dd      	b.n	8002450 <HAL_RCC_OscConfig+0x1098>
 8002294:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002298:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800229c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80022a0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022a2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022a6:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	fa93 f2a3 	rbit	r2, r3
 80022b0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022b4:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80022b8:	601a      	str	r2, [r3, #0]
  return result;
 80022ba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022be:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80022c2:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022c4:	fab3 f383 	clz	r3, r3
 80022c8:	b2db      	uxtb	r3, r3
 80022ca:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80022ce:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80022d2:	009b      	lsls	r3, r3, #2
 80022d4:	461a      	mov	r2, r3
 80022d6:	2300      	movs	r3, #0
 80022d8:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022da:	f7fe fcf9 	bl	8000cd0 <HAL_GetTick>
 80022de:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022e2:	e009      	b.n	80022f8 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022e4:	f7fe fcf4 	bl	8000cd0 <HAL_GetTick>
 80022e8:	4602      	mov	r2, r0
 80022ea:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80022ee:	1ad3      	subs	r3, r2, r3
 80022f0:	2b02      	cmp	r3, #2
 80022f2:	d901      	bls.n	80022f8 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 80022f4:	2303      	movs	r3, #3
 80022f6:	e0ac      	b.n	8002452 <HAL_RCC_OscConfig+0x109a>
 80022f8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022fc:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002300:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002304:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002306:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800230a:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	fa93 f2a3 	rbit	r2, r3
 8002314:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002318:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800231c:	601a      	str	r2, [r3, #0]
  return result;
 800231e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002322:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002326:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002328:	fab3 f383 	clz	r3, r3
 800232c:	b2db      	uxtb	r3, r3
 800232e:	095b      	lsrs	r3, r3, #5
 8002330:	b2db      	uxtb	r3, r3
 8002332:	f043 0301 	orr.w	r3, r3, #1
 8002336:	b2db      	uxtb	r3, r3
 8002338:	2b01      	cmp	r3, #1
 800233a:	d102      	bne.n	8002342 <HAL_RCC_OscConfig+0xf8a>
 800233c:	4b47      	ldr	r3, [pc, #284]	; (800245c <HAL_RCC_OscConfig+0x10a4>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	e027      	b.n	8002392 <HAL_RCC_OscConfig+0xfda>
 8002342:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002346:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800234a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800234e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002350:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002354:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	fa93 f2a3 	rbit	r2, r3
 800235e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002362:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002366:	601a      	str	r2, [r3, #0]
 8002368:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800236c:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002370:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002374:	601a      	str	r2, [r3, #0]
 8002376:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800237a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	fa93 f2a3 	rbit	r2, r3
 8002384:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002388:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 800238c:	601a      	str	r2, [r3, #0]
 800238e:	4b33      	ldr	r3, [pc, #204]	; (800245c <HAL_RCC_OscConfig+0x10a4>)
 8002390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002392:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002396:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800239a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800239e:	6011      	str	r1, [r2, #0]
 80023a0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80023a4:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80023a8:	6812      	ldr	r2, [r2, #0]
 80023aa:	fa92 f1a2 	rbit	r1, r2
 80023ae:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80023b2:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 80023b6:	6011      	str	r1, [r2, #0]
  return result;
 80023b8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80023bc:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 80023c0:	6812      	ldr	r2, [r2, #0]
 80023c2:	fab2 f282 	clz	r2, r2
 80023c6:	b2d2      	uxtb	r2, r2
 80023c8:	f042 0220 	orr.w	r2, r2, #32
 80023cc:	b2d2      	uxtb	r2, r2
 80023ce:	f002 021f 	and.w	r2, r2, #31
 80023d2:	2101      	movs	r1, #1
 80023d4:	fa01 f202 	lsl.w	r2, r1, r2
 80023d8:	4013      	ands	r3, r2
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d182      	bne.n	80022e4 <HAL_RCC_OscConfig+0xf2c>
 80023de:	e037      	b.n	8002450 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023e4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	699b      	ldr	r3, [r3, #24]
 80023ec:	2b01      	cmp	r3, #1
 80023ee:	d101      	bne.n	80023f4 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 80023f0:	2301      	movs	r3, #1
 80023f2:	e02e      	b.n	8002452 <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80023f4:	4b19      	ldr	r3, [pc, #100]	; (800245c <HAL_RCC_OscConfig+0x10a4>)
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 80023fc:	4b17      	ldr	r3, [pc, #92]	; (800245c <HAL_RCC_OscConfig+0x10a4>)
 80023fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002400:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002404:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002408:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 800240c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002410:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	69db      	ldr	r3, [r3, #28]
 8002418:	429a      	cmp	r2, r3
 800241a:	d117      	bne.n	800244c <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 800241c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002420:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002424:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002428:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002430:	429a      	cmp	r2, r3
 8002432:	d10b      	bne.n	800244c <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8002434:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002438:	f003 020f 	and.w	r2, r3, #15
 800243c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002440:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002448:	429a      	cmp	r2, r3
 800244a:	d001      	beq.n	8002450 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 800244c:	2301      	movs	r3, #1
 800244e:	e000      	b.n	8002452 <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8002450:	2300      	movs	r3, #0
}
 8002452:	4618      	mov	r0, r3
 8002454:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}
 800245c:	40021000 	.word	0x40021000

08002460 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b09e      	sub	sp, #120	; 0x78
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
 8002468:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800246a:	2300      	movs	r3, #0
 800246c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d101      	bne.n	8002478 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002474:	2301      	movs	r3, #1
 8002476:	e162      	b.n	800273e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002478:	4b90      	ldr	r3, [pc, #576]	; (80026bc <HAL_RCC_ClockConfig+0x25c>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f003 0307 	and.w	r3, r3, #7
 8002480:	683a      	ldr	r2, [r7, #0]
 8002482:	429a      	cmp	r2, r3
 8002484:	d910      	bls.n	80024a8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002486:	4b8d      	ldr	r3, [pc, #564]	; (80026bc <HAL_RCC_ClockConfig+0x25c>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f023 0207 	bic.w	r2, r3, #7
 800248e:	498b      	ldr	r1, [pc, #556]	; (80026bc <HAL_RCC_ClockConfig+0x25c>)
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	4313      	orrs	r3, r2
 8002494:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002496:	4b89      	ldr	r3, [pc, #548]	; (80026bc <HAL_RCC_ClockConfig+0x25c>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f003 0307 	and.w	r3, r3, #7
 800249e:	683a      	ldr	r2, [r7, #0]
 80024a0:	429a      	cmp	r2, r3
 80024a2:	d001      	beq.n	80024a8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80024a4:	2301      	movs	r3, #1
 80024a6:	e14a      	b.n	800273e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f003 0302 	and.w	r3, r3, #2
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d008      	beq.n	80024c6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024b4:	4b82      	ldr	r3, [pc, #520]	; (80026c0 <HAL_RCC_ClockConfig+0x260>)
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	689b      	ldr	r3, [r3, #8]
 80024c0:	497f      	ldr	r1, [pc, #508]	; (80026c0 <HAL_RCC_ClockConfig+0x260>)
 80024c2:	4313      	orrs	r3, r2
 80024c4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 0301 	and.w	r3, r3, #1
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	f000 80dc 	beq.w	800268c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	2b01      	cmp	r3, #1
 80024da:	d13c      	bne.n	8002556 <HAL_RCC_ClockConfig+0xf6>
 80024dc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80024e0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80024e4:	fa93 f3a3 	rbit	r3, r3
 80024e8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80024ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024ec:	fab3 f383 	clz	r3, r3
 80024f0:	b2db      	uxtb	r3, r3
 80024f2:	095b      	lsrs	r3, r3, #5
 80024f4:	b2db      	uxtb	r3, r3
 80024f6:	f043 0301 	orr.w	r3, r3, #1
 80024fa:	b2db      	uxtb	r3, r3
 80024fc:	2b01      	cmp	r3, #1
 80024fe:	d102      	bne.n	8002506 <HAL_RCC_ClockConfig+0xa6>
 8002500:	4b6f      	ldr	r3, [pc, #444]	; (80026c0 <HAL_RCC_ClockConfig+0x260>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	e00f      	b.n	8002526 <HAL_RCC_ClockConfig+0xc6>
 8002506:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800250a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800250c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800250e:	fa93 f3a3 	rbit	r3, r3
 8002512:	667b      	str	r3, [r7, #100]	; 0x64
 8002514:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002518:	663b      	str	r3, [r7, #96]	; 0x60
 800251a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800251c:	fa93 f3a3 	rbit	r3, r3
 8002520:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002522:	4b67      	ldr	r3, [pc, #412]	; (80026c0 <HAL_RCC_ClockConfig+0x260>)
 8002524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002526:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800252a:	65ba      	str	r2, [r7, #88]	; 0x58
 800252c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800252e:	fa92 f2a2 	rbit	r2, r2
 8002532:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002534:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002536:	fab2 f282 	clz	r2, r2
 800253a:	b2d2      	uxtb	r2, r2
 800253c:	f042 0220 	orr.w	r2, r2, #32
 8002540:	b2d2      	uxtb	r2, r2
 8002542:	f002 021f 	and.w	r2, r2, #31
 8002546:	2101      	movs	r1, #1
 8002548:	fa01 f202 	lsl.w	r2, r1, r2
 800254c:	4013      	ands	r3, r2
 800254e:	2b00      	cmp	r3, #0
 8002550:	d17b      	bne.n	800264a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002552:	2301      	movs	r3, #1
 8002554:	e0f3      	b.n	800273e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	2b02      	cmp	r3, #2
 800255c:	d13c      	bne.n	80025d8 <HAL_RCC_ClockConfig+0x178>
 800255e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002562:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002564:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002566:	fa93 f3a3 	rbit	r3, r3
 800256a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800256c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800256e:	fab3 f383 	clz	r3, r3
 8002572:	b2db      	uxtb	r3, r3
 8002574:	095b      	lsrs	r3, r3, #5
 8002576:	b2db      	uxtb	r3, r3
 8002578:	f043 0301 	orr.w	r3, r3, #1
 800257c:	b2db      	uxtb	r3, r3
 800257e:	2b01      	cmp	r3, #1
 8002580:	d102      	bne.n	8002588 <HAL_RCC_ClockConfig+0x128>
 8002582:	4b4f      	ldr	r3, [pc, #316]	; (80026c0 <HAL_RCC_ClockConfig+0x260>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	e00f      	b.n	80025a8 <HAL_RCC_ClockConfig+0x148>
 8002588:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800258c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800258e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002590:	fa93 f3a3 	rbit	r3, r3
 8002594:	647b      	str	r3, [r7, #68]	; 0x44
 8002596:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800259a:	643b      	str	r3, [r7, #64]	; 0x40
 800259c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800259e:	fa93 f3a3 	rbit	r3, r3
 80025a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80025a4:	4b46      	ldr	r3, [pc, #280]	; (80026c0 <HAL_RCC_ClockConfig+0x260>)
 80025a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80025ac:	63ba      	str	r2, [r7, #56]	; 0x38
 80025ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80025b0:	fa92 f2a2 	rbit	r2, r2
 80025b4:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80025b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80025b8:	fab2 f282 	clz	r2, r2
 80025bc:	b2d2      	uxtb	r2, r2
 80025be:	f042 0220 	orr.w	r2, r2, #32
 80025c2:	b2d2      	uxtb	r2, r2
 80025c4:	f002 021f 	and.w	r2, r2, #31
 80025c8:	2101      	movs	r1, #1
 80025ca:	fa01 f202 	lsl.w	r2, r1, r2
 80025ce:	4013      	ands	r3, r2
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d13a      	bne.n	800264a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80025d4:	2301      	movs	r3, #1
 80025d6:	e0b2      	b.n	800273e <HAL_RCC_ClockConfig+0x2de>
 80025d8:	2302      	movs	r3, #2
 80025da:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025de:	fa93 f3a3 	rbit	r3, r3
 80025e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80025e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025e6:	fab3 f383 	clz	r3, r3
 80025ea:	b2db      	uxtb	r3, r3
 80025ec:	095b      	lsrs	r3, r3, #5
 80025ee:	b2db      	uxtb	r3, r3
 80025f0:	f043 0301 	orr.w	r3, r3, #1
 80025f4:	b2db      	uxtb	r3, r3
 80025f6:	2b01      	cmp	r3, #1
 80025f8:	d102      	bne.n	8002600 <HAL_RCC_ClockConfig+0x1a0>
 80025fa:	4b31      	ldr	r3, [pc, #196]	; (80026c0 <HAL_RCC_ClockConfig+0x260>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	e00d      	b.n	800261c <HAL_RCC_ClockConfig+0x1bc>
 8002600:	2302      	movs	r3, #2
 8002602:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002606:	fa93 f3a3 	rbit	r3, r3
 800260a:	627b      	str	r3, [r7, #36]	; 0x24
 800260c:	2302      	movs	r3, #2
 800260e:	623b      	str	r3, [r7, #32]
 8002610:	6a3b      	ldr	r3, [r7, #32]
 8002612:	fa93 f3a3 	rbit	r3, r3
 8002616:	61fb      	str	r3, [r7, #28]
 8002618:	4b29      	ldr	r3, [pc, #164]	; (80026c0 <HAL_RCC_ClockConfig+0x260>)
 800261a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800261c:	2202      	movs	r2, #2
 800261e:	61ba      	str	r2, [r7, #24]
 8002620:	69ba      	ldr	r2, [r7, #24]
 8002622:	fa92 f2a2 	rbit	r2, r2
 8002626:	617a      	str	r2, [r7, #20]
  return result;
 8002628:	697a      	ldr	r2, [r7, #20]
 800262a:	fab2 f282 	clz	r2, r2
 800262e:	b2d2      	uxtb	r2, r2
 8002630:	f042 0220 	orr.w	r2, r2, #32
 8002634:	b2d2      	uxtb	r2, r2
 8002636:	f002 021f 	and.w	r2, r2, #31
 800263a:	2101      	movs	r1, #1
 800263c:	fa01 f202 	lsl.w	r2, r1, r2
 8002640:	4013      	ands	r3, r2
 8002642:	2b00      	cmp	r3, #0
 8002644:	d101      	bne.n	800264a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002646:	2301      	movs	r3, #1
 8002648:	e079      	b.n	800273e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800264a:	4b1d      	ldr	r3, [pc, #116]	; (80026c0 <HAL_RCC_ClockConfig+0x260>)
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	f023 0203 	bic.w	r2, r3, #3
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	491a      	ldr	r1, [pc, #104]	; (80026c0 <HAL_RCC_ClockConfig+0x260>)
 8002658:	4313      	orrs	r3, r2
 800265a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800265c:	f7fe fb38 	bl	8000cd0 <HAL_GetTick>
 8002660:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002662:	e00a      	b.n	800267a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002664:	f7fe fb34 	bl	8000cd0 <HAL_GetTick>
 8002668:	4602      	mov	r2, r0
 800266a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800266c:	1ad3      	subs	r3, r2, r3
 800266e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002672:	4293      	cmp	r3, r2
 8002674:	d901      	bls.n	800267a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002676:	2303      	movs	r3, #3
 8002678:	e061      	b.n	800273e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800267a:	4b11      	ldr	r3, [pc, #68]	; (80026c0 <HAL_RCC_ClockConfig+0x260>)
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	f003 020c 	and.w	r2, r3, #12
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	009b      	lsls	r3, r3, #2
 8002688:	429a      	cmp	r2, r3
 800268a:	d1eb      	bne.n	8002664 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800268c:	4b0b      	ldr	r3, [pc, #44]	; (80026bc <HAL_RCC_ClockConfig+0x25c>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f003 0307 	and.w	r3, r3, #7
 8002694:	683a      	ldr	r2, [r7, #0]
 8002696:	429a      	cmp	r2, r3
 8002698:	d214      	bcs.n	80026c4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800269a:	4b08      	ldr	r3, [pc, #32]	; (80026bc <HAL_RCC_ClockConfig+0x25c>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f023 0207 	bic.w	r2, r3, #7
 80026a2:	4906      	ldr	r1, [pc, #24]	; (80026bc <HAL_RCC_ClockConfig+0x25c>)
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	4313      	orrs	r3, r2
 80026a8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026aa:	4b04      	ldr	r3, [pc, #16]	; (80026bc <HAL_RCC_ClockConfig+0x25c>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f003 0307 	and.w	r3, r3, #7
 80026b2:	683a      	ldr	r2, [r7, #0]
 80026b4:	429a      	cmp	r2, r3
 80026b6:	d005      	beq.n	80026c4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80026b8:	2301      	movs	r3, #1
 80026ba:	e040      	b.n	800273e <HAL_RCC_ClockConfig+0x2de>
 80026bc:	40022000 	.word	0x40022000
 80026c0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f003 0304 	and.w	r3, r3, #4
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d008      	beq.n	80026e2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026d0:	4b1d      	ldr	r3, [pc, #116]	; (8002748 <HAL_RCC_ClockConfig+0x2e8>)
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	68db      	ldr	r3, [r3, #12]
 80026dc:	491a      	ldr	r1, [pc, #104]	; (8002748 <HAL_RCC_ClockConfig+0x2e8>)
 80026de:	4313      	orrs	r3, r2
 80026e0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f003 0308 	and.w	r3, r3, #8
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d009      	beq.n	8002702 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80026ee:	4b16      	ldr	r3, [pc, #88]	; (8002748 <HAL_RCC_ClockConfig+0x2e8>)
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	691b      	ldr	r3, [r3, #16]
 80026fa:	00db      	lsls	r3, r3, #3
 80026fc:	4912      	ldr	r1, [pc, #72]	; (8002748 <HAL_RCC_ClockConfig+0x2e8>)
 80026fe:	4313      	orrs	r3, r2
 8002700:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002702:	f000 f829 	bl	8002758 <HAL_RCC_GetSysClockFreq>
 8002706:	4601      	mov	r1, r0
 8002708:	4b0f      	ldr	r3, [pc, #60]	; (8002748 <HAL_RCC_ClockConfig+0x2e8>)
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002710:	22f0      	movs	r2, #240	; 0xf0
 8002712:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002714:	693a      	ldr	r2, [r7, #16]
 8002716:	fa92 f2a2 	rbit	r2, r2
 800271a:	60fa      	str	r2, [r7, #12]
  return result;
 800271c:	68fa      	ldr	r2, [r7, #12]
 800271e:	fab2 f282 	clz	r2, r2
 8002722:	b2d2      	uxtb	r2, r2
 8002724:	40d3      	lsrs	r3, r2
 8002726:	4a09      	ldr	r2, [pc, #36]	; (800274c <HAL_RCC_ClockConfig+0x2ec>)
 8002728:	5cd3      	ldrb	r3, [r2, r3]
 800272a:	fa21 f303 	lsr.w	r3, r1, r3
 800272e:	4a08      	ldr	r2, [pc, #32]	; (8002750 <HAL_RCC_ClockConfig+0x2f0>)
 8002730:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002732:	4b08      	ldr	r3, [pc, #32]	; (8002754 <HAL_RCC_ClockConfig+0x2f4>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4618      	mov	r0, r3
 8002738:	f7fe fa86 	bl	8000c48 <HAL_InitTick>
  
  return HAL_OK;
 800273c:	2300      	movs	r3, #0
}
 800273e:	4618      	mov	r0, r3
 8002740:	3778      	adds	r7, #120	; 0x78
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}
 8002746:	bf00      	nop
 8002748:	40021000 	.word	0x40021000
 800274c:	080047f8 	.word	0x080047f8
 8002750:	20000000 	.word	0x20000000
 8002754:	20000004 	.word	0x20000004

08002758 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002758:	b480      	push	{r7}
 800275a:	b08b      	sub	sp, #44	; 0x2c
 800275c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800275e:	2300      	movs	r3, #0
 8002760:	61fb      	str	r3, [r7, #28]
 8002762:	2300      	movs	r3, #0
 8002764:	61bb      	str	r3, [r7, #24]
 8002766:	2300      	movs	r3, #0
 8002768:	627b      	str	r3, [r7, #36]	; 0x24
 800276a:	2300      	movs	r3, #0
 800276c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800276e:	2300      	movs	r3, #0
 8002770:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002772:	4b2a      	ldr	r3, [pc, #168]	; (800281c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002778:	69fb      	ldr	r3, [r7, #28]
 800277a:	f003 030c 	and.w	r3, r3, #12
 800277e:	2b04      	cmp	r3, #4
 8002780:	d002      	beq.n	8002788 <HAL_RCC_GetSysClockFreq+0x30>
 8002782:	2b08      	cmp	r3, #8
 8002784:	d003      	beq.n	800278e <HAL_RCC_GetSysClockFreq+0x36>
 8002786:	e03f      	b.n	8002808 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002788:	4b25      	ldr	r3, [pc, #148]	; (8002820 <HAL_RCC_GetSysClockFreq+0xc8>)
 800278a:	623b      	str	r3, [r7, #32]
      break;
 800278c:	e03f      	b.n	800280e <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800278e:	69fb      	ldr	r3, [r7, #28]
 8002790:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002794:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002798:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800279a:	68ba      	ldr	r2, [r7, #8]
 800279c:	fa92 f2a2 	rbit	r2, r2
 80027a0:	607a      	str	r2, [r7, #4]
  return result;
 80027a2:	687a      	ldr	r2, [r7, #4]
 80027a4:	fab2 f282 	clz	r2, r2
 80027a8:	b2d2      	uxtb	r2, r2
 80027aa:	40d3      	lsrs	r3, r2
 80027ac:	4a1d      	ldr	r2, [pc, #116]	; (8002824 <HAL_RCC_GetSysClockFreq+0xcc>)
 80027ae:	5cd3      	ldrb	r3, [r2, r3]
 80027b0:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80027b2:	4b1a      	ldr	r3, [pc, #104]	; (800281c <HAL_RCC_GetSysClockFreq+0xc4>)
 80027b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027b6:	f003 030f 	and.w	r3, r3, #15
 80027ba:	220f      	movs	r2, #15
 80027bc:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027be:	693a      	ldr	r2, [r7, #16]
 80027c0:	fa92 f2a2 	rbit	r2, r2
 80027c4:	60fa      	str	r2, [r7, #12]
  return result;
 80027c6:	68fa      	ldr	r2, [r7, #12]
 80027c8:	fab2 f282 	clz	r2, r2
 80027cc:	b2d2      	uxtb	r2, r2
 80027ce:	40d3      	lsrs	r3, r2
 80027d0:	4a15      	ldr	r2, [pc, #84]	; (8002828 <HAL_RCC_GetSysClockFreq+0xd0>)
 80027d2:	5cd3      	ldrb	r3, [r2, r3]
 80027d4:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 80027d6:	69fb      	ldr	r3, [r7, #28]
 80027d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d008      	beq.n	80027f2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80027e0:	4a0f      	ldr	r2, [pc, #60]	; (8002820 <HAL_RCC_GetSysClockFreq+0xc8>)
 80027e2:	69bb      	ldr	r3, [r7, #24]
 80027e4:	fbb2 f2f3 	udiv	r2, r2, r3
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	fb02 f303 	mul.w	r3, r2, r3
 80027ee:	627b      	str	r3, [r7, #36]	; 0x24
 80027f0:	e007      	b.n	8002802 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80027f2:	4a0b      	ldr	r2, [pc, #44]	; (8002820 <HAL_RCC_GetSysClockFreq+0xc8>)
 80027f4:	69bb      	ldr	r3, [r7, #24]
 80027f6:	fbb2 f2f3 	udiv	r2, r2, r3
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	fb02 f303 	mul.w	r3, r2, r3
 8002800:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002804:	623b      	str	r3, [r7, #32]
      break;
 8002806:	e002      	b.n	800280e <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002808:	4b05      	ldr	r3, [pc, #20]	; (8002820 <HAL_RCC_GetSysClockFreq+0xc8>)
 800280a:	623b      	str	r3, [r7, #32]
      break;
 800280c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800280e:	6a3b      	ldr	r3, [r7, #32]
}
 8002810:	4618      	mov	r0, r3
 8002812:	372c      	adds	r7, #44	; 0x2c
 8002814:	46bd      	mov	sp, r7
 8002816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281a:	4770      	bx	lr
 800281c:	40021000 	.word	0x40021000
 8002820:	007a1200 	.word	0x007a1200
 8002824:	08004810 	.word	0x08004810
 8002828:	08004820 	.word	0x08004820

0800282c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800282c:	b480      	push	{r7}
 800282e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002830:	4b03      	ldr	r3, [pc, #12]	; (8002840 <HAL_RCC_GetHCLKFreq+0x14>)
 8002832:	681b      	ldr	r3, [r3, #0]
}
 8002834:	4618      	mov	r0, r3
 8002836:	46bd      	mov	sp, r7
 8002838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283c:	4770      	bx	lr
 800283e:	bf00      	nop
 8002840:	20000000 	.word	0x20000000

08002844 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b082      	sub	sp, #8
 8002848:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800284a:	f7ff ffef 	bl	800282c <HAL_RCC_GetHCLKFreq>
 800284e:	4601      	mov	r1, r0
 8002850:	4b0b      	ldr	r3, [pc, #44]	; (8002880 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002858:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800285c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800285e:	687a      	ldr	r2, [r7, #4]
 8002860:	fa92 f2a2 	rbit	r2, r2
 8002864:	603a      	str	r2, [r7, #0]
  return result;
 8002866:	683a      	ldr	r2, [r7, #0]
 8002868:	fab2 f282 	clz	r2, r2
 800286c:	b2d2      	uxtb	r2, r2
 800286e:	40d3      	lsrs	r3, r2
 8002870:	4a04      	ldr	r2, [pc, #16]	; (8002884 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002872:	5cd3      	ldrb	r3, [r2, r3]
 8002874:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002878:	4618      	mov	r0, r3
 800287a:	3708      	adds	r7, #8
 800287c:	46bd      	mov	sp, r7
 800287e:	bd80      	pop	{r7, pc}
 8002880:	40021000 	.word	0x40021000
 8002884:	08004808 	.word	0x08004808

08002888 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b082      	sub	sp, #8
 800288c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800288e:	f7ff ffcd 	bl	800282c <HAL_RCC_GetHCLKFreq>
 8002892:	4601      	mov	r1, r0
 8002894:	4b0b      	ldr	r3, [pc, #44]	; (80028c4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800289c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80028a0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028a2:	687a      	ldr	r2, [r7, #4]
 80028a4:	fa92 f2a2 	rbit	r2, r2
 80028a8:	603a      	str	r2, [r7, #0]
  return result;
 80028aa:	683a      	ldr	r2, [r7, #0]
 80028ac:	fab2 f282 	clz	r2, r2
 80028b0:	b2d2      	uxtb	r2, r2
 80028b2:	40d3      	lsrs	r3, r2
 80028b4:	4a04      	ldr	r2, [pc, #16]	; (80028c8 <HAL_RCC_GetPCLK2Freq+0x40>)
 80028b6:	5cd3      	ldrb	r3, [r2, r3]
 80028b8:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80028bc:	4618      	mov	r0, r3
 80028be:	3708      	adds	r7, #8
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd80      	pop	{r7, pc}
 80028c4:	40021000 	.word	0x40021000
 80028c8:	08004808 	.word	0x08004808

080028cc <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b092      	sub	sp, #72	; 0x48
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80028d4:	2300      	movs	r3, #0
 80028d6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80028d8:	2300      	movs	r3, #0
 80028da:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80028dc:	2300      	movs	r3, #0
 80028de:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	f000 80d4 	beq.w	8002a98 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028f0:	4b4e      	ldr	r3, [pc, #312]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028f2:	69db      	ldr	r3, [r3, #28]
 80028f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d10e      	bne.n	800291a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028fc:	4b4b      	ldr	r3, [pc, #300]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028fe:	69db      	ldr	r3, [r3, #28]
 8002900:	4a4a      	ldr	r2, [pc, #296]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002902:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002906:	61d3      	str	r3, [r2, #28]
 8002908:	4b48      	ldr	r3, [pc, #288]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800290a:	69db      	ldr	r3, [r3, #28]
 800290c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002910:	60bb      	str	r3, [r7, #8]
 8002912:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002914:	2301      	movs	r3, #1
 8002916:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800291a:	4b45      	ldr	r3, [pc, #276]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002922:	2b00      	cmp	r3, #0
 8002924:	d118      	bne.n	8002958 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002926:	4b42      	ldr	r3, [pc, #264]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a41      	ldr	r2, [pc, #260]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800292c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002930:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002932:	f7fe f9cd 	bl	8000cd0 <HAL_GetTick>
 8002936:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002938:	e008      	b.n	800294c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800293a:	f7fe f9c9 	bl	8000cd0 <HAL_GetTick>
 800293e:	4602      	mov	r2, r0
 8002940:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002942:	1ad3      	subs	r3, r2, r3
 8002944:	2b64      	cmp	r3, #100	; 0x64
 8002946:	d901      	bls.n	800294c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002948:	2303      	movs	r3, #3
 800294a:	e1d6      	b.n	8002cfa <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800294c:	4b38      	ldr	r3, [pc, #224]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002954:	2b00      	cmp	r3, #0
 8002956:	d0f0      	beq.n	800293a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002958:	4b34      	ldr	r3, [pc, #208]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800295a:	6a1b      	ldr	r3, [r3, #32]
 800295c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002960:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002962:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002964:	2b00      	cmp	r3, #0
 8002966:	f000 8084 	beq.w	8002a72 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002972:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002974:	429a      	cmp	r2, r3
 8002976:	d07c      	beq.n	8002a72 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002978:	4b2c      	ldr	r3, [pc, #176]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800297a:	6a1b      	ldr	r3, [r3, #32]
 800297c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002980:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002982:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002986:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800298a:	fa93 f3a3 	rbit	r3, r3
 800298e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002990:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002992:	fab3 f383 	clz	r3, r3
 8002996:	b2db      	uxtb	r3, r3
 8002998:	461a      	mov	r2, r3
 800299a:	4b26      	ldr	r3, [pc, #152]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800299c:	4413      	add	r3, r2
 800299e:	009b      	lsls	r3, r3, #2
 80029a0:	461a      	mov	r2, r3
 80029a2:	2301      	movs	r3, #1
 80029a4:	6013      	str	r3, [r2, #0]
 80029a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80029aa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029ae:	fa93 f3a3 	rbit	r3, r3
 80029b2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80029b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80029b6:	fab3 f383 	clz	r3, r3
 80029ba:	b2db      	uxtb	r3, r3
 80029bc:	461a      	mov	r2, r3
 80029be:	4b1d      	ldr	r3, [pc, #116]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80029c0:	4413      	add	r3, r2
 80029c2:	009b      	lsls	r3, r3, #2
 80029c4:	461a      	mov	r2, r3
 80029c6:	2300      	movs	r3, #0
 80029c8:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80029ca:	4a18      	ldr	r2, [pc, #96]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029ce:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80029d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029d2:	f003 0301 	and.w	r3, r3, #1
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d04b      	beq.n	8002a72 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029da:	f7fe f979 	bl	8000cd0 <HAL_GetTick>
 80029de:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029e0:	e00a      	b.n	80029f8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029e2:	f7fe f975 	bl	8000cd0 <HAL_GetTick>
 80029e6:	4602      	mov	r2, r0
 80029e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80029ea:	1ad3      	subs	r3, r2, r3
 80029ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d901      	bls.n	80029f8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80029f4:	2303      	movs	r3, #3
 80029f6:	e180      	b.n	8002cfa <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80029f8:	2302      	movs	r3, #2
 80029fa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029fe:	fa93 f3a3 	rbit	r3, r3
 8002a02:	627b      	str	r3, [r7, #36]	; 0x24
 8002a04:	2302      	movs	r3, #2
 8002a06:	623b      	str	r3, [r7, #32]
 8002a08:	6a3b      	ldr	r3, [r7, #32]
 8002a0a:	fa93 f3a3 	rbit	r3, r3
 8002a0e:	61fb      	str	r3, [r7, #28]
  return result;
 8002a10:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a12:	fab3 f383 	clz	r3, r3
 8002a16:	b2db      	uxtb	r3, r3
 8002a18:	095b      	lsrs	r3, r3, #5
 8002a1a:	b2db      	uxtb	r3, r3
 8002a1c:	f043 0302 	orr.w	r3, r3, #2
 8002a20:	b2db      	uxtb	r3, r3
 8002a22:	2b02      	cmp	r3, #2
 8002a24:	d108      	bne.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002a26:	4b01      	ldr	r3, [pc, #4]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a28:	6a1b      	ldr	r3, [r3, #32]
 8002a2a:	e00d      	b.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002a2c:	40021000 	.word	0x40021000
 8002a30:	40007000 	.word	0x40007000
 8002a34:	10908100 	.word	0x10908100
 8002a38:	2302      	movs	r3, #2
 8002a3a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a3c:	69bb      	ldr	r3, [r7, #24]
 8002a3e:	fa93 f3a3 	rbit	r3, r3
 8002a42:	617b      	str	r3, [r7, #20]
 8002a44:	4b9a      	ldr	r3, [pc, #616]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a48:	2202      	movs	r2, #2
 8002a4a:	613a      	str	r2, [r7, #16]
 8002a4c:	693a      	ldr	r2, [r7, #16]
 8002a4e:	fa92 f2a2 	rbit	r2, r2
 8002a52:	60fa      	str	r2, [r7, #12]
  return result;
 8002a54:	68fa      	ldr	r2, [r7, #12]
 8002a56:	fab2 f282 	clz	r2, r2
 8002a5a:	b2d2      	uxtb	r2, r2
 8002a5c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a60:	b2d2      	uxtb	r2, r2
 8002a62:	f002 021f 	and.w	r2, r2, #31
 8002a66:	2101      	movs	r1, #1
 8002a68:	fa01 f202 	lsl.w	r2, r1, r2
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d0b7      	beq.n	80029e2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002a72:	4b8f      	ldr	r3, [pc, #572]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a74:	6a1b      	ldr	r3, [r3, #32]
 8002a76:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	498c      	ldr	r1, [pc, #560]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a80:	4313      	orrs	r3, r2
 8002a82:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002a84:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002a88:	2b01      	cmp	r3, #1
 8002a8a:	d105      	bne.n	8002a98 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a8c:	4b88      	ldr	r3, [pc, #544]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a8e:	69db      	ldr	r3, [r3, #28]
 8002a90:	4a87      	ldr	r2, [pc, #540]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a92:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a96:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f003 0301 	and.w	r3, r3, #1
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d008      	beq.n	8002ab6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002aa4:	4b82      	ldr	r3, [pc, #520]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aa8:	f023 0203 	bic.w	r2, r3, #3
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	689b      	ldr	r3, [r3, #8]
 8002ab0:	497f      	ldr	r1, [pc, #508]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f003 0302 	and.w	r3, r3, #2
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d008      	beq.n	8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002ac2:	4b7b      	ldr	r3, [pc, #492]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	68db      	ldr	r3, [r3, #12]
 8002ace:	4978      	ldr	r1, [pc, #480]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f003 0304 	and.w	r3, r3, #4
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d008      	beq.n	8002af2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002ae0:	4b73      	ldr	r3, [pc, #460]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	691b      	ldr	r3, [r3, #16]
 8002aec:	4970      	ldr	r1, [pc, #448]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002aee:	4313      	orrs	r3, r2
 8002af0:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f003 0320 	and.w	r3, r3, #32
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d008      	beq.n	8002b10 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002afe:	4b6c      	ldr	r3, [pc, #432]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b02:	f023 0210 	bic.w	r2, r3, #16
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	69db      	ldr	r3, [r3, #28]
 8002b0a:	4969      	ldr	r1, [pc, #420]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d008      	beq.n	8002b2e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002b1c:	4b64      	ldr	r3, [pc, #400]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b28:	4961      	ldr	r1, [pc, #388]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d008      	beq.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002b3a:	4b5d      	ldr	r3, [pc, #372]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b3e:	f023 0220 	bic.w	r2, r3, #32
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6a1b      	ldr	r3, [r3, #32]
 8002b46:	495a      	ldr	r1, [pc, #360]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d008      	beq.n	8002b6a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002b58:	4b55      	ldr	r3, [pc, #340]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b5c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b64:	4952      	ldr	r1, [pc, #328]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b66:	4313      	orrs	r3, r2
 8002b68:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f003 0308 	and.w	r3, r3, #8
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d008      	beq.n	8002b88 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002b76:	4b4e      	ldr	r3, [pc, #312]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b7a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	695b      	ldr	r3, [r3, #20]
 8002b82:	494b      	ldr	r1, [pc, #300]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b84:	4313      	orrs	r3, r2
 8002b86:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f003 0310 	and.w	r3, r3, #16
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d008      	beq.n	8002ba6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002b94:	4b46      	ldr	r3, [pc, #280]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b98:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	699b      	ldr	r3, [r3, #24]
 8002ba0:	4943      	ldr	r1, [pc, #268]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d008      	beq.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002bb2:	4b3f      	ldr	r3, [pc, #252]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bbe:	493c      	ldr	r1, [pc, #240]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d008      	beq.n	8002be2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002bd0:	4b37      	ldr	r3, [pc, #220]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bd4:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bdc:	4934      	ldr	r1, [pc, #208]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002bde:	4313      	orrs	r3, r2
 8002be0:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d008      	beq.n	8002c00 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002bee:	4b30      	ldr	r3, [pc, #192]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002bf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bf2:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bfa:	492d      	ldr	r1, [pc, #180]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d008      	beq.n	8002c1e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002c0c:	4b28      	ldr	r3, [pc, #160]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c10:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c18:	4925      	ldr	r1, [pc, #148]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d008      	beq.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002c2a:	4b21      	ldr	r3, [pc, #132]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c2e:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c36:	491e      	ldr	r1, [pc, #120]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d008      	beq.n	8002c5a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8002c48:	4b19      	ldr	r3, [pc, #100]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c4c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c54:	4916      	ldr	r1, [pc, #88]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c56:	4313      	orrs	r3, r2
 8002c58:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d008      	beq.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8002c66:	4b12      	ldr	r3, [pc, #72]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c6a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c72:	490f      	ldr	r1, [pc, #60]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c74:	4313      	orrs	r3, r2
 8002c76:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d008      	beq.n	8002c96 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002c84:	4b0a      	ldr	r3, [pc, #40]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c88:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c90:	4907      	ldr	r1, [pc, #28]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c92:	4313      	orrs	r3, r2
 8002c94:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d00c      	beq.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8002ca2:	4b03      	ldr	r3, [pc, #12]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ca6:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	e002      	b.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8002cae:	bf00      	nop
 8002cb0:	40021000 	.word	0x40021000
 8002cb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cb6:	4913      	ldr	r1, [pc, #76]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d008      	beq.n	8002cda <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002cc8:	4b0e      	ldr	r3, [pc, #56]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002cca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ccc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cd4:	490b      	ldr	r1, [pc, #44]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d008      	beq.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8002ce6:	4b07      	ldr	r3, [pc, #28]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cea:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cf2:	4904      	ldr	r1, [pc, #16]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002cf8:	2300      	movs	r3, #0
}
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	3748      	adds	r7, #72	; 0x48
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}
 8002d02:	bf00      	nop
 8002d04:	40021000 	.word	0x40021000

08002d08 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b082      	sub	sp, #8
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d101      	bne.n	8002d1a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	e049      	b.n	8002dae <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d20:	b2db      	uxtb	r3, r3
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d106      	bne.n	8002d34 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002d2e:	6878      	ldr	r0, [r7, #4]
 8002d30:	f7fd fe1a 	bl	8000968 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2202      	movs	r2, #2
 8002d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681a      	ldr	r2, [r3, #0]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	3304      	adds	r3, #4
 8002d44:	4619      	mov	r1, r3
 8002d46:	4610      	mov	r0, r2
 8002d48:	f000 fac0 	bl	80032cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2201      	movs	r2, #1
 8002d50:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2201      	movs	r2, #1
 8002d58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2201      	movs	r2, #1
 8002d60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2201      	movs	r2, #1
 8002d68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2201      	movs	r2, #1
 8002d70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2201      	movs	r2, #1
 8002d78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2201      	movs	r2, #1
 8002d80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2201      	movs	r2, #1
 8002d88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2201      	movs	r2, #1
 8002d90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2201      	movs	r2, #1
 8002d98:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2201      	movs	r2, #1
 8002da0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2201      	movs	r2, #1
 8002da8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002dac:	2300      	movs	r3, #0
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	3708      	adds	r7, #8
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}
	...

08002db8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b085      	sub	sp, #20
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dc6:	b2db      	uxtb	r3, r3
 8002dc8:	2b01      	cmp	r3, #1
 8002dca:	d001      	beq.n	8002dd0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	e04f      	b.n	8002e70 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2202      	movs	r2, #2
 8002dd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	68da      	ldr	r2, [r3, #12]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f042 0201 	orr.w	r2, r2, #1
 8002de6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a23      	ldr	r2, [pc, #140]	; (8002e7c <HAL_TIM_Base_Start_IT+0xc4>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d01d      	beq.n	8002e2e <HAL_TIM_Base_Start_IT+0x76>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dfa:	d018      	beq.n	8002e2e <HAL_TIM_Base_Start_IT+0x76>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a1f      	ldr	r2, [pc, #124]	; (8002e80 <HAL_TIM_Base_Start_IT+0xc8>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d013      	beq.n	8002e2e <HAL_TIM_Base_Start_IT+0x76>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a1e      	ldr	r2, [pc, #120]	; (8002e84 <HAL_TIM_Base_Start_IT+0xcc>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d00e      	beq.n	8002e2e <HAL_TIM_Base_Start_IT+0x76>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a1c      	ldr	r2, [pc, #112]	; (8002e88 <HAL_TIM_Base_Start_IT+0xd0>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d009      	beq.n	8002e2e <HAL_TIM_Base_Start_IT+0x76>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a1b      	ldr	r2, [pc, #108]	; (8002e8c <HAL_TIM_Base_Start_IT+0xd4>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d004      	beq.n	8002e2e <HAL_TIM_Base_Start_IT+0x76>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a19      	ldr	r2, [pc, #100]	; (8002e90 <HAL_TIM_Base_Start_IT+0xd8>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d115      	bne.n	8002e5a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	689a      	ldr	r2, [r3, #8]
 8002e34:	4b17      	ldr	r3, [pc, #92]	; (8002e94 <HAL_TIM_Base_Start_IT+0xdc>)
 8002e36:	4013      	ands	r3, r2
 8002e38:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	2b06      	cmp	r3, #6
 8002e3e:	d015      	beq.n	8002e6c <HAL_TIM_Base_Start_IT+0xb4>
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e46:	d011      	beq.n	8002e6c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	681a      	ldr	r2, [r3, #0]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f042 0201 	orr.w	r2, r2, #1
 8002e56:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e58:	e008      	b.n	8002e6c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	681a      	ldr	r2, [r3, #0]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f042 0201 	orr.w	r2, r2, #1
 8002e68:	601a      	str	r2, [r3, #0]
 8002e6a:	e000      	b.n	8002e6e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e6c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002e6e:	2300      	movs	r3, #0
}
 8002e70:	4618      	mov	r0, r3
 8002e72:	3714      	adds	r7, #20
 8002e74:	46bd      	mov	sp, r7
 8002e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7a:	4770      	bx	lr
 8002e7c:	40012c00 	.word	0x40012c00
 8002e80:	40000400 	.word	0x40000400
 8002e84:	40000800 	.word	0x40000800
 8002e88:	40013400 	.word	0x40013400
 8002e8c:	40014000 	.word	0x40014000
 8002e90:	40015000 	.word	0x40015000
 8002e94:	00010007 	.word	0x00010007

08002e98 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b082      	sub	sp, #8
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	691b      	ldr	r3, [r3, #16]
 8002ea6:	f003 0302 	and.w	r3, r3, #2
 8002eaa:	2b02      	cmp	r3, #2
 8002eac:	d122      	bne.n	8002ef4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	68db      	ldr	r3, [r3, #12]
 8002eb4:	f003 0302 	and.w	r3, r3, #2
 8002eb8:	2b02      	cmp	r3, #2
 8002eba:	d11b      	bne.n	8002ef4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f06f 0202 	mvn.w	r2, #2
 8002ec4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2201      	movs	r2, #1
 8002eca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	699b      	ldr	r3, [r3, #24]
 8002ed2:	f003 0303 	and.w	r3, r3, #3
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d003      	beq.n	8002ee2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002eda:	6878      	ldr	r0, [r7, #4]
 8002edc:	f000 f9d8 	bl	8003290 <HAL_TIM_IC_CaptureCallback>
 8002ee0:	e005      	b.n	8002eee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ee2:	6878      	ldr	r0, [r7, #4]
 8002ee4:	f000 f9ca 	bl	800327c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ee8:	6878      	ldr	r0, [r7, #4]
 8002eea:	f000 f9db 	bl	80032a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	691b      	ldr	r3, [r3, #16]
 8002efa:	f003 0304 	and.w	r3, r3, #4
 8002efe:	2b04      	cmp	r3, #4
 8002f00:	d122      	bne.n	8002f48 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	68db      	ldr	r3, [r3, #12]
 8002f08:	f003 0304 	and.w	r3, r3, #4
 8002f0c:	2b04      	cmp	r3, #4
 8002f0e:	d11b      	bne.n	8002f48 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f06f 0204 	mvn.w	r2, #4
 8002f18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2202      	movs	r2, #2
 8002f1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	699b      	ldr	r3, [r3, #24]
 8002f26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d003      	beq.n	8002f36 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f2e:	6878      	ldr	r0, [r7, #4]
 8002f30:	f000 f9ae 	bl	8003290 <HAL_TIM_IC_CaptureCallback>
 8002f34:	e005      	b.n	8002f42 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f36:	6878      	ldr	r0, [r7, #4]
 8002f38:	f000 f9a0 	bl	800327c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f3c:	6878      	ldr	r0, [r7, #4]
 8002f3e:	f000 f9b1 	bl	80032a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2200      	movs	r2, #0
 8002f46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	691b      	ldr	r3, [r3, #16]
 8002f4e:	f003 0308 	and.w	r3, r3, #8
 8002f52:	2b08      	cmp	r3, #8
 8002f54:	d122      	bne.n	8002f9c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	68db      	ldr	r3, [r3, #12]
 8002f5c:	f003 0308 	and.w	r3, r3, #8
 8002f60:	2b08      	cmp	r3, #8
 8002f62:	d11b      	bne.n	8002f9c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f06f 0208 	mvn.w	r2, #8
 8002f6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2204      	movs	r2, #4
 8002f72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	69db      	ldr	r3, [r3, #28]
 8002f7a:	f003 0303 	and.w	r3, r3, #3
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d003      	beq.n	8002f8a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f82:	6878      	ldr	r0, [r7, #4]
 8002f84:	f000 f984 	bl	8003290 <HAL_TIM_IC_CaptureCallback>
 8002f88:	e005      	b.n	8002f96 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f8a:	6878      	ldr	r0, [r7, #4]
 8002f8c:	f000 f976 	bl	800327c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f90:	6878      	ldr	r0, [r7, #4]
 8002f92:	f000 f987 	bl	80032a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	691b      	ldr	r3, [r3, #16]
 8002fa2:	f003 0310 	and.w	r3, r3, #16
 8002fa6:	2b10      	cmp	r3, #16
 8002fa8:	d122      	bne.n	8002ff0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	68db      	ldr	r3, [r3, #12]
 8002fb0:	f003 0310 	and.w	r3, r3, #16
 8002fb4:	2b10      	cmp	r3, #16
 8002fb6:	d11b      	bne.n	8002ff0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f06f 0210 	mvn.w	r2, #16
 8002fc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2208      	movs	r2, #8
 8002fc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	69db      	ldr	r3, [r3, #28]
 8002fce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d003      	beq.n	8002fde <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fd6:	6878      	ldr	r0, [r7, #4]
 8002fd8:	f000 f95a 	bl	8003290 <HAL_TIM_IC_CaptureCallback>
 8002fdc:	e005      	b.n	8002fea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	f000 f94c 	bl	800327c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fe4:	6878      	ldr	r0, [r7, #4]
 8002fe6:	f000 f95d 	bl	80032a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2200      	movs	r2, #0
 8002fee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	691b      	ldr	r3, [r3, #16]
 8002ff6:	f003 0301 	and.w	r3, r3, #1
 8002ffa:	2b01      	cmp	r3, #1
 8002ffc:	d10e      	bne.n	800301c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	68db      	ldr	r3, [r3, #12]
 8003004:	f003 0301 	and.w	r3, r3, #1
 8003008:	2b01      	cmp	r3, #1
 800300a:	d107      	bne.n	800301c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f06f 0201 	mvn.w	r2, #1
 8003014:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003016:	6878      	ldr	r0, [r7, #4]
 8003018:	f000 f926 	bl	8003268 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	691b      	ldr	r3, [r3, #16]
 8003022:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003026:	2b80      	cmp	r3, #128	; 0x80
 8003028:	d10e      	bne.n	8003048 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	68db      	ldr	r3, [r3, #12]
 8003030:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003034:	2b80      	cmp	r3, #128	; 0x80
 8003036:	d107      	bne.n	8003048 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003040:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003042:	6878      	ldr	r0, [r7, #4]
 8003044:	f000 fb10 	bl	8003668 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	691b      	ldr	r3, [r3, #16]
 800304e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003052:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003056:	d10e      	bne.n	8003076 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	68db      	ldr	r3, [r3, #12]
 800305e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003062:	2b80      	cmp	r3, #128	; 0x80
 8003064:	d107      	bne.n	8003076 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800306e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003070:	6878      	ldr	r0, [r7, #4]
 8003072:	f000 fb03 	bl	800367c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	691b      	ldr	r3, [r3, #16]
 800307c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003080:	2b40      	cmp	r3, #64	; 0x40
 8003082:	d10e      	bne.n	80030a2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	68db      	ldr	r3, [r3, #12]
 800308a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800308e:	2b40      	cmp	r3, #64	; 0x40
 8003090:	d107      	bne.n	80030a2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800309a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800309c:	6878      	ldr	r0, [r7, #4]
 800309e:	f000 f90b 	bl	80032b8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	691b      	ldr	r3, [r3, #16]
 80030a8:	f003 0320 	and.w	r3, r3, #32
 80030ac:	2b20      	cmp	r3, #32
 80030ae:	d10e      	bne.n	80030ce <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	68db      	ldr	r3, [r3, #12]
 80030b6:	f003 0320 	and.w	r3, r3, #32
 80030ba:	2b20      	cmp	r3, #32
 80030bc:	d107      	bne.n	80030ce <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f06f 0220 	mvn.w	r2, #32
 80030c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80030c8:	6878      	ldr	r0, [r7, #4]
 80030ca:	f000 fac3 	bl	8003654 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80030ce:	bf00      	nop
 80030d0:	3708      	adds	r7, #8
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bd80      	pop	{r7, pc}

080030d6 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80030d6:	b580      	push	{r7, lr}
 80030d8:	b084      	sub	sp, #16
 80030da:	af00      	add	r7, sp, #0
 80030dc:	6078      	str	r0, [r7, #4]
 80030de:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80030e0:	2300      	movs	r3, #0
 80030e2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030ea:	2b01      	cmp	r3, #1
 80030ec:	d101      	bne.n	80030f2 <HAL_TIM_ConfigClockSource+0x1c>
 80030ee:	2302      	movs	r3, #2
 80030f0:	e0b6      	b.n	8003260 <HAL_TIM_ConfigClockSource+0x18a>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2201      	movs	r2, #1
 80030f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2202      	movs	r2, #2
 80030fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800310a:	68bb      	ldr	r3, [r7, #8]
 800310c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003110:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003114:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003116:	68bb      	ldr	r3, [r7, #8]
 8003118:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800311c:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	68ba      	ldr	r2, [r7, #8]
 8003124:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800312e:	d03e      	beq.n	80031ae <HAL_TIM_ConfigClockSource+0xd8>
 8003130:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003134:	f200 8087 	bhi.w	8003246 <HAL_TIM_ConfigClockSource+0x170>
 8003138:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800313c:	f000 8086 	beq.w	800324c <HAL_TIM_ConfigClockSource+0x176>
 8003140:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003144:	d87f      	bhi.n	8003246 <HAL_TIM_ConfigClockSource+0x170>
 8003146:	2b70      	cmp	r3, #112	; 0x70
 8003148:	d01a      	beq.n	8003180 <HAL_TIM_ConfigClockSource+0xaa>
 800314a:	2b70      	cmp	r3, #112	; 0x70
 800314c:	d87b      	bhi.n	8003246 <HAL_TIM_ConfigClockSource+0x170>
 800314e:	2b60      	cmp	r3, #96	; 0x60
 8003150:	d050      	beq.n	80031f4 <HAL_TIM_ConfigClockSource+0x11e>
 8003152:	2b60      	cmp	r3, #96	; 0x60
 8003154:	d877      	bhi.n	8003246 <HAL_TIM_ConfigClockSource+0x170>
 8003156:	2b50      	cmp	r3, #80	; 0x50
 8003158:	d03c      	beq.n	80031d4 <HAL_TIM_ConfigClockSource+0xfe>
 800315a:	2b50      	cmp	r3, #80	; 0x50
 800315c:	d873      	bhi.n	8003246 <HAL_TIM_ConfigClockSource+0x170>
 800315e:	2b40      	cmp	r3, #64	; 0x40
 8003160:	d058      	beq.n	8003214 <HAL_TIM_ConfigClockSource+0x13e>
 8003162:	2b40      	cmp	r3, #64	; 0x40
 8003164:	d86f      	bhi.n	8003246 <HAL_TIM_ConfigClockSource+0x170>
 8003166:	2b30      	cmp	r3, #48	; 0x30
 8003168:	d064      	beq.n	8003234 <HAL_TIM_ConfigClockSource+0x15e>
 800316a:	2b30      	cmp	r3, #48	; 0x30
 800316c:	d86b      	bhi.n	8003246 <HAL_TIM_ConfigClockSource+0x170>
 800316e:	2b20      	cmp	r3, #32
 8003170:	d060      	beq.n	8003234 <HAL_TIM_ConfigClockSource+0x15e>
 8003172:	2b20      	cmp	r3, #32
 8003174:	d867      	bhi.n	8003246 <HAL_TIM_ConfigClockSource+0x170>
 8003176:	2b00      	cmp	r3, #0
 8003178:	d05c      	beq.n	8003234 <HAL_TIM_ConfigClockSource+0x15e>
 800317a:	2b10      	cmp	r3, #16
 800317c:	d05a      	beq.n	8003234 <HAL_TIM_ConfigClockSource+0x15e>
 800317e:	e062      	b.n	8003246 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003190:	f000 f9b4 	bl	80034fc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	689b      	ldr	r3, [r3, #8]
 800319a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80031a2:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	68ba      	ldr	r2, [r7, #8]
 80031aa:	609a      	str	r2, [r3, #8]
      break;
 80031ac:	e04f      	b.n	800324e <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80031be:	f000 f99d 	bl	80034fc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	689a      	ldr	r2, [r3, #8]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80031d0:	609a      	str	r2, [r3, #8]
      break;
 80031d2:	e03c      	b.n	800324e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80031e0:	461a      	mov	r2, r3
 80031e2:	f000 f911 	bl	8003408 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	2150      	movs	r1, #80	; 0x50
 80031ec:	4618      	mov	r0, r3
 80031ee:	f000 f96a 	bl	80034c6 <TIM_ITRx_SetConfig>
      break;
 80031f2:	e02c      	b.n	800324e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003200:	461a      	mov	r2, r3
 8003202:	f000 f930 	bl	8003466 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	2160      	movs	r1, #96	; 0x60
 800320c:	4618      	mov	r0, r3
 800320e:	f000 f95a 	bl	80034c6 <TIM_ITRx_SetConfig>
      break;
 8003212:	e01c      	b.n	800324e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003220:	461a      	mov	r2, r3
 8003222:	f000 f8f1 	bl	8003408 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	2140      	movs	r1, #64	; 0x40
 800322c:	4618      	mov	r0, r3
 800322e:	f000 f94a 	bl	80034c6 <TIM_ITRx_SetConfig>
      break;
 8003232:	e00c      	b.n	800324e <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681a      	ldr	r2, [r3, #0]
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4619      	mov	r1, r3
 800323e:	4610      	mov	r0, r2
 8003240:	f000 f941 	bl	80034c6 <TIM_ITRx_SetConfig>
      break;
 8003244:	e003      	b.n	800324e <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003246:	2301      	movs	r3, #1
 8003248:	73fb      	strb	r3, [r7, #15]
      break;
 800324a:	e000      	b.n	800324e <HAL_TIM_ConfigClockSource+0x178>
      break;
 800324c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2201      	movs	r2, #1
 8003252:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2200      	movs	r2, #0
 800325a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800325e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003260:	4618      	mov	r0, r3
 8003262:	3710      	adds	r7, #16
 8003264:	46bd      	mov	sp, r7
 8003266:	bd80      	pop	{r7, pc}

08003268 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003268:	b480      	push	{r7}
 800326a:	b083      	sub	sp, #12
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003270:	bf00      	nop
 8003272:	370c      	adds	r7, #12
 8003274:	46bd      	mov	sp, r7
 8003276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327a:	4770      	bx	lr

0800327c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800327c:	b480      	push	{r7}
 800327e:	b083      	sub	sp, #12
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003284:	bf00      	nop
 8003286:	370c      	adds	r7, #12
 8003288:	46bd      	mov	sp, r7
 800328a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328e:	4770      	bx	lr

08003290 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003290:	b480      	push	{r7}
 8003292:	b083      	sub	sp, #12
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003298:	bf00      	nop
 800329a:	370c      	adds	r7, #12
 800329c:	46bd      	mov	sp, r7
 800329e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a2:	4770      	bx	lr

080032a4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b083      	sub	sp, #12
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80032ac:	bf00      	nop
 80032ae:	370c      	adds	r7, #12
 80032b0:	46bd      	mov	sp, r7
 80032b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b6:	4770      	bx	lr

080032b8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b083      	sub	sp, #12
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80032c0:	bf00      	nop
 80032c2:	370c      	adds	r7, #12
 80032c4:	46bd      	mov	sp, r7
 80032c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ca:	4770      	bx	lr

080032cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80032cc:	b480      	push	{r7}
 80032ce:	b085      	sub	sp, #20
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
 80032d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	4a42      	ldr	r2, [pc, #264]	; (80033e8 <TIM_Base_SetConfig+0x11c>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d013      	beq.n	800330c <TIM_Base_SetConfig+0x40>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032ea:	d00f      	beq.n	800330c <TIM_Base_SetConfig+0x40>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	4a3f      	ldr	r2, [pc, #252]	; (80033ec <TIM_Base_SetConfig+0x120>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d00b      	beq.n	800330c <TIM_Base_SetConfig+0x40>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	4a3e      	ldr	r2, [pc, #248]	; (80033f0 <TIM_Base_SetConfig+0x124>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d007      	beq.n	800330c <TIM_Base_SetConfig+0x40>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	4a3d      	ldr	r2, [pc, #244]	; (80033f4 <TIM_Base_SetConfig+0x128>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d003      	beq.n	800330c <TIM_Base_SetConfig+0x40>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	4a3c      	ldr	r2, [pc, #240]	; (80033f8 <TIM_Base_SetConfig+0x12c>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d108      	bne.n	800331e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003312:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	68fa      	ldr	r2, [r7, #12]
 800331a:	4313      	orrs	r3, r2
 800331c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	4a31      	ldr	r2, [pc, #196]	; (80033e8 <TIM_Base_SetConfig+0x11c>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d01f      	beq.n	8003366 <TIM_Base_SetConfig+0x9a>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800332c:	d01b      	beq.n	8003366 <TIM_Base_SetConfig+0x9a>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	4a2e      	ldr	r2, [pc, #184]	; (80033ec <TIM_Base_SetConfig+0x120>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d017      	beq.n	8003366 <TIM_Base_SetConfig+0x9a>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	4a2d      	ldr	r2, [pc, #180]	; (80033f0 <TIM_Base_SetConfig+0x124>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d013      	beq.n	8003366 <TIM_Base_SetConfig+0x9a>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	4a2c      	ldr	r2, [pc, #176]	; (80033f4 <TIM_Base_SetConfig+0x128>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d00f      	beq.n	8003366 <TIM_Base_SetConfig+0x9a>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	4a2c      	ldr	r2, [pc, #176]	; (80033fc <TIM_Base_SetConfig+0x130>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d00b      	beq.n	8003366 <TIM_Base_SetConfig+0x9a>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	4a2b      	ldr	r2, [pc, #172]	; (8003400 <TIM_Base_SetConfig+0x134>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d007      	beq.n	8003366 <TIM_Base_SetConfig+0x9a>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	4a2a      	ldr	r2, [pc, #168]	; (8003404 <TIM_Base_SetConfig+0x138>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d003      	beq.n	8003366 <TIM_Base_SetConfig+0x9a>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	4a25      	ldr	r2, [pc, #148]	; (80033f8 <TIM_Base_SetConfig+0x12c>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d108      	bne.n	8003378 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800336c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	68db      	ldr	r3, [r3, #12]
 8003372:	68fa      	ldr	r2, [r7, #12]
 8003374:	4313      	orrs	r3, r2
 8003376:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	695b      	ldr	r3, [r3, #20]
 8003382:	4313      	orrs	r3, r2
 8003384:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	68fa      	ldr	r2, [r7, #12]
 800338a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	689a      	ldr	r2, [r3, #8]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	681a      	ldr	r2, [r3, #0]
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	4a12      	ldr	r2, [pc, #72]	; (80033e8 <TIM_Base_SetConfig+0x11c>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d013      	beq.n	80033cc <TIM_Base_SetConfig+0x100>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	4a13      	ldr	r2, [pc, #76]	; (80033f4 <TIM_Base_SetConfig+0x128>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d00f      	beq.n	80033cc <TIM_Base_SetConfig+0x100>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	4a13      	ldr	r2, [pc, #76]	; (80033fc <TIM_Base_SetConfig+0x130>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d00b      	beq.n	80033cc <TIM_Base_SetConfig+0x100>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	4a12      	ldr	r2, [pc, #72]	; (8003400 <TIM_Base_SetConfig+0x134>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d007      	beq.n	80033cc <TIM_Base_SetConfig+0x100>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	4a11      	ldr	r2, [pc, #68]	; (8003404 <TIM_Base_SetConfig+0x138>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d003      	beq.n	80033cc <TIM_Base_SetConfig+0x100>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	4a0c      	ldr	r2, [pc, #48]	; (80033f8 <TIM_Base_SetConfig+0x12c>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d103      	bne.n	80033d4 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	691a      	ldr	r2, [r3, #16]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2201      	movs	r2, #1
 80033d8:	615a      	str	r2, [r3, #20]
}
 80033da:	bf00      	nop
 80033dc:	3714      	adds	r7, #20
 80033de:	46bd      	mov	sp, r7
 80033e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e4:	4770      	bx	lr
 80033e6:	bf00      	nop
 80033e8:	40012c00 	.word	0x40012c00
 80033ec:	40000400 	.word	0x40000400
 80033f0:	40000800 	.word	0x40000800
 80033f4:	40013400 	.word	0x40013400
 80033f8:	40015000 	.word	0x40015000
 80033fc:	40014000 	.word	0x40014000
 8003400:	40014400 	.word	0x40014400
 8003404:	40014800 	.word	0x40014800

08003408 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003408:	b480      	push	{r7}
 800340a:	b087      	sub	sp, #28
 800340c:	af00      	add	r7, sp, #0
 800340e:	60f8      	str	r0, [r7, #12]
 8003410:	60b9      	str	r1, [r7, #8]
 8003412:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	6a1b      	ldr	r3, [r3, #32]
 8003418:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	6a1b      	ldr	r3, [r3, #32]
 800341e:	f023 0201 	bic.w	r2, r3, #1
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	699b      	ldr	r3, [r3, #24]
 800342a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800342c:	693b      	ldr	r3, [r7, #16]
 800342e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003432:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	011b      	lsls	r3, r3, #4
 8003438:	693a      	ldr	r2, [r7, #16]
 800343a:	4313      	orrs	r3, r2
 800343c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	f023 030a 	bic.w	r3, r3, #10
 8003444:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003446:	697a      	ldr	r2, [r7, #20]
 8003448:	68bb      	ldr	r3, [r7, #8]
 800344a:	4313      	orrs	r3, r2
 800344c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	693a      	ldr	r2, [r7, #16]
 8003452:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	697a      	ldr	r2, [r7, #20]
 8003458:	621a      	str	r2, [r3, #32]
}
 800345a:	bf00      	nop
 800345c:	371c      	adds	r7, #28
 800345e:	46bd      	mov	sp, r7
 8003460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003464:	4770      	bx	lr

08003466 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003466:	b480      	push	{r7}
 8003468:	b087      	sub	sp, #28
 800346a:	af00      	add	r7, sp, #0
 800346c:	60f8      	str	r0, [r7, #12]
 800346e:	60b9      	str	r1, [r7, #8]
 8003470:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	6a1b      	ldr	r3, [r3, #32]
 8003476:	f023 0210 	bic.w	r2, r3, #16
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	699b      	ldr	r3, [r3, #24]
 8003482:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	6a1b      	ldr	r3, [r3, #32]
 8003488:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800348a:	697b      	ldr	r3, [r7, #20]
 800348c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003490:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	031b      	lsls	r3, r3, #12
 8003496:	697a      	ldr	r2, [r7, #20]
 8003498:	4313      	orrs	r3, r2
 800349a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800349c:	693b      	ldr	r3, [r7, #16]
 800349e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80034a2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	011b      	lsls	r3, r3, #4
 80034a8:	693a      	ldr	r2, [r7, #16]
 80034aa:	4313      	orrs	r3, r2
 80034ac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	697a      	ldr	r2, [r7, #20]
 80034b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	693a      	ldr	r2, [r7, #16]
 80034b8:	621a      	str	r2, [r3, #32]
}
 80034ba:	bf00      	nop
 80034bc:	371c      	adds	r7, #28
 80034be:	46bd      	mov	sp, r7
 80034c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c4:	4770      	bx	lr

080034c6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80034c6:	b480      	push	{r7}
 80034c8:	b085      	sub	sp, #20
 80034ca:	af00      	add	r7, sp, #0
 80034cc:	6078      	str	r0, [r7, #4]
 80034ce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034dc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80034de:	683a      	ldr	r2, [r7, #0]
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	4313      	orrs	r3, r2
 80034e4:	f043 0307 	orr.w	r3, r3, #7
 80034e8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	68fa      	ldr	r2, [r7, #12]
 80034ee:	609a      	str	r2, [r3, #8]
}
 80034f0:	bf00      	nop
 80034f2:	3714      	adds	r7, #20
 80034f4:	46bd      	mov	sp, r7
 80034f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fa:	4770      	bx	lr

080034fc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80034fc:	b480      	push	{r7}
 80034fe:	b087      	sub	sp, #28
 8003500:	af00      	add	r7, sp, #0
 8003502:	60f8      	str	r0, [r7, #12]
 8003504:	60b9      	str	r1, [r7, #8]
 8003506:	607a      	str	r2, [r7, #4]
 8003508:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	689b      	ldr	r3, [r3, #8]
 800350e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003516:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	021a      	lsls	r2, r3, #8
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	431a      	orrs	r2, r3
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	4313      	orrs	r3, r2
 8003524:	697a      	ldr	r2, [r7, #20]
 8003526:	4313      	orrs	r3, r2
 8003528:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	697a      	ldr	r2, [r7, #20]
 800352e:	609a      	str	r2, [r3, #8]
}
 8003530:	bf00      	nop
 8003532:	371c      	adds	r7, #28
 8003534:	46bd      	mov	sp, r7
 8003536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353a:	4770      	bx	lr

0800353c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800353c:	b480      	push	{r7}
 800353e:	b085      	sub	sp, #20
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
 8003544:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800354c:	2b01      	cmp	r3, #1
 800354e:	d101      	bne.n	8003554 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003550:	2302      	movs	r3, #2
 8003552:	e06d      	b.n	8003630 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2201      	movs	r2, #1
 8003558:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2202      	movs	r2, #2
 8003560:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	689b      	ldr	r3, [r3, #8]
 8003572:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a30      	ldr	r2, [pc, #192]	; (800363c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d009      	beq.n	8003592 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a2f      	ldr	r2, [pc, #188]	; (8003640 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d004      	beq.n	8003592 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a2d      	ldr	r2, [pc, #180]	; (8003644 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d108      	bne.n	80035a4 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003598:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	68fa      	ldr	r2, [r7, #12]
 80035a0:	4313      	orrs	r3, r2
 80035a2:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	68fa      	ldr	r2, [r7, #12]
 80035b2:	4313      	orrs	r3, r2
 80035b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	68fa      	ldr	r2, [r7, #12]
 80035bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a1e      	ldr	r2, [pc, #120]	; (800363c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d01d      	beq.n	8003604 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035d0:	d018      	beq.n	8003604 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a1c      	ldr	r2, [pc, #112]	; (8003648 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d013      	beq.n	8003604 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a1a      	ldr	r2, [pc, #104]	; (800364c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d00e      	beq.n	8003604 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a15      	ldr	r2, [pc, #84]	; (8003640 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d009      	beq.n	8003604 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a16      	ldr	r2, [pc, #88]	; (8003650 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d004      	beq.n	8003604 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a11      	ldr	r2, [pc, #68]	; (8003644 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d10c      	bne.n	800361e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800360a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	689b      	ldr	r3, [r3, #8]
 8003610:	68ba      	ldr	r2, [r7, #8]
 8003612:	4313      	orrs	r3, r2
 8003614:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	68ba      	ldr	r2, [r7, #8]
 800361c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2201      	movs	r2, #1
 8003622:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2200      	movs	r2, #0
 800362a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800362e:	2300      	movs	r3, #0
}
 8003630:	4618      	mov	r0, r3
 8003632:	3714      	adds	r7, #20
 8003634:	46bd      	mov	sp, r7
 8003636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363a:	4770      	bx	lr
 800363c:	40012c00 	.word	0x40012c00
 8003640:	40013400 	.word	0x40013400
 8003644:	40015000 	.word	0x40015000
 8003648:	40000400 	.word	0x40000400
 800364c:	40000800 	.word	0x40000800
 8003650:	40014000 	.word	0x40014000

08003654 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003654:	b480      	push	{r7}
 8003656:	b083      	sub	sp, #12
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800365c:	bf00      	nop
 800365e:	370c      	adds	r7, #12
 8003660:	46bd      	mov	sp, r7
 8003662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003666:	4770      	bx	lr

08003668 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003668:	b480      	push	{r7}
 800366a:	b083      	sub	sp, #12
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003670:	bf00      	nop
 8003672:	370c      	adds	r7, #12
 8003674:	46bd      	mov	sp, r7
 8003676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367a:	4770      	bx	lr

0800367c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800367c:	b480      	push	{r7}
 800367e:	b083      	sub	sp, #12
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003684:	bf00      	nop
 8003686:	370c      	adds	r7, #12
 8003688:	46bd      	mov	sp, r7
 800368a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368e:	4770      	bx	lr

08003690 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b082      	sub	sp, #8
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d101      	bne.n	80036a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800369e:	2301      	movs	r3, #1
 80036a0:	e040      	b.n	8003724 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d106      	bne.n	80036b8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2200      	movs	r2, #0
 80036ae:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80036b2:	6878      	ldr	r0, [r7, #4]
 80036b4:	f7fd f990 	bl	80009d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2224      	movs	r2, #36	; 0x24
 80036bc:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	681a      	ldr	r2, [r3, #0]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f022 0201 	bic.w	r2, r2, #1
 80036cc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80036ce:	6878      	ldr	r0, [r7, #4]
 80036d0:	f000 fbfc 	bl	8003ecc <UART_SetConfig>
 80036d4:	4603      	mov	r3, r0
 80036d6:	2b01      	cmp	r3, #1
 80036d8:	d101      	bne.n	80036de <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	e022      	b.n	8003724 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d002      	beq.n	80036ec <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80036e6:	6878      	ldr	r0, [r7, #4]
 80036e8:	f000 fdc4 	bl	8004274 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	685a      	ldr	r2, [r3, #4]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80036fa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	689a      	ldr	r2, [r3, #8]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800370a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	681a      	ldr	r2, [r3, #0]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f042 0201 	orr.w	r2, r2, #1
 800371a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800371c:	6878      	ldr	r0, [r7, #4]
 800371e:	f000 fe4b 	bl	80043b8 <UART_CheckIdleState>
 8003722:	4603      	mov	r3, r0
}
 8003724:	4618      	mov	r0, r3
 8003726:	3708      	adds	r7, #8
 8003728:	46bd      	mov	sp, r7
 800372a:	bd80      	pop	{r7, pc}

0800372c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b08a      	sub	sp, #40	; 0x28
 8003730:	af02      	add	r7, sp, #8
 8003732:	60f8      	str	r0, [r7, #12]
 8003734:	60b9      	str	r1, [r7, #8]
 8003736:	603b      	str	r3, [r7, #0]
 8003738:	4613      	mov	r3, r2
 800373a:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003742:	2b20      	cmp	r3, #32
 8003744:	f040 80b6 	bne.w	80038b4 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d002      	beq.n	8003754 <HAL_UART_Receive+0x28>
 800374e:	88fb      	ldrh	r3, [r7, #6]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d101      	bne.n	8003758 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8003754:	2301      	movs	r3, #1
 8003756:	e0ae      	b.n	80038b6 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	2200      	movs	r2, #0
 800375c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	2222      	movs	r2, #34	; 0x22
 8003764:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	2200      	movs	r2, #0
 800376c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800376e:	f7fd faaf 	bl	8000cd0 <HAL_GetTick>
 8003772:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	88fa      	ldrh	r2, [r7, #6]
 8003778:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	88fa      	ldrh	r2, [r7, #6]
 8003780:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	689b      	ldr	r3, [r3, #8]
 8003788:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800378c:	d10e      	bne.n	80037ac <HAL_UART_Receive+0x80>
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	691b      	ldr	r3, [r3, #16]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d105      	bne.n	80037a2 <HAL_UART_Receive+0x76>
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	f240 12ff 	movw	r2, #511	; 0x1ff
 800379c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80037a0:	e02d      	b.n	80037fe <HAL_UART_Receive+0xd2>
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	22ff      	movs	r2, #255	; 0xff
 80037a6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80037aa:	e028      	b.n	80037fe <HAL_UART_Receive+0xd2>
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	689b      	ldr	r3, [r3, #8]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d10d      	bne.n	80037d0 <HAL_UART_Receive+0xa4>
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	691b      	ldr	r3, [r3, #16]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d104      	bne.n	80037c6 <HAL_UART_Receive+0x9a>
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	22ff      	movs	r2, #255	; 0xff
 80037c0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80037c4:	e01b      	b.n	80037fe <HAL_UART_Receive+0xd2>
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	227f      	movs	r2, #127	; 0x7f
 80037ca:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80037ce:	e016      	b.n	80037fe <HAL_UART_Receive+0xd2>
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	689b      	ldr	r3, [r3, #8]
 80037d4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80037d8:	d10d      	bne.n	80037f6 <HAL_UART_Receive+0xca>
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	691b      	ldr	r3, [r3, #16]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d104      	bne.n	80037ec <HAL_UART_Receive+0xc0>
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	227f      	movs	r2, #127	; 0x7f
 80037e6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80037ea:	e008      	b.n	80037fe <HAL_UART_Receive+0xd2>
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	223f      	movs	r2, #63	; 0x3f
 80037f0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80037f4:	e003      	b.n	80037fe <HAL_UART_Receive+0xd2>
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	2200      	movs	r2, #0
 80037fa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003804:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	689b      	ldr	r3, [r3, #8]
 800380a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800380e:	d108      	bne.n	8003822 <HAL_UART_Receive+0xf6>
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	691b      	ldr	r3, [r3, #16]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d104      	bne.n	8003822 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8003818:	2300      	movs	r3, #0
 800381a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	61bb      	str	r3, [r7, #24]
 8003820:	e003      	b.n	800382a <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8003822:	68bb      	ldr	r3, [r7, #8]
 8003824:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003826:	2300      	movs	r3, #0
 8003828:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800382a:	e037      	b.n	800389c <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	9300      	str	r3, [sp, #0]
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	2200      	movs	r2, #0
 8003834:	2120      	movs	r1, #32
 8003836:	68f8      	ldr	r0, [r7, #12]
 8003838:	f000 fe66 	bl	8004508 <UART_WaitOnFlagUntilTimeout>
 800383c:	4603      	mov	r3, r0
 800383e:	2b00      	cmp	r3, #0
 8003840:	d005      	beq.n	800384e <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	2220      	movs	r2, #32
 8003846:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800384a:	2303      	movs	r3, #3
 800384c:	e033      	b.n	80038b6 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 800384e:	69fb      	ldr	r3, [r7, #28]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d10c      	bne.n	800386e <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800385a:	b29a      	uxth	r2, r3
 800385c:	8a7b      	ldrh	r3, [r7, #18]
 800385e:	4013      	ands	r3, r2
 8003860:	b29a      	uxth	r2, r3
 8003862:	69bb      	ldr	r3, [r7, #24]
 8003864:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003866:	69bb      	ldr	r3, [r7, #24]
 8003868:	3302      	adds	r3, #2
 800386a:	61bb      	str	r3, [r7, #24]
 800386c:	e00d      	b.n	800388a <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003874:	b29b      	uxth	r3, r3
 8003876:	b2da      	uxtb	r2, r3
 8003878:	8a7b      	ldrh	r3, [r7, #18]
 800387a:	b2db      	uxtb	r3, r3
 800387c:	4013      	ands	r3, r2
 800387e:	b2da      	uxtb	r2, r3
 8003880:	69fb      	ldr	r3, [r7, #28]
 8003882:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8003884:	69fb      	ldr	r3, [r7, #28]
 8003886:	3301      	adds	r3, #1
 8003888:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003890:	b29b      	uxth	r3, r3
 8003892:	3b01      	subs	r3, #1
 8003894:	b29a      	uxth	r2, r3
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80038a2:	b29b      	uxth	r3, r3
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d1c1      	bne.n	800382c <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	2220      	movs	r2, #32
 80038ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 80038b0:	2300      	movs	r3, #0
 80038b2:	e000      	b.n	80038b6 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 80038b4:	2302      	movs	r3, #2
  }
}
 80038b6:	4618      	mov	r0, r3
 80038b8:	3720      	adds	r7, #32
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd80      	pop	{r7, pc}
	...

080038c0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b0ba      	sub	sp, #232	; 0xe8
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	69db      	ldr	r3, [r3, #28]
 80038ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	689b      	ldr	r3, [r3, #8]
 80038e2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80038e6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80038ea:	f640 030f 	movw	r3, #2063	; 0x80f
 80038ee:	4013      	ands	r3, r2
 80038f0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80038f4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d115      	bne.n	8003928 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80038fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003900:	f003 0320 	and.w	r3, r3, #32
 8003904:	2b00      	cmp	r3, #0
 8003906:	d00f      	beq.n	8003928 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003908:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800390c:	f003 0320 	and.w	r3, r3, #32
 8003910:	2b00      	cmp	r3, #0
 8003912:	d009      	beq.n	8003928 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003918:	2b00      	cmp	r3, #0
 800391a:	f000 82ab 	beq.w	8003e74 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003922:	6878      	ldr	r0, [r7, #4]
 8003924:	4798      	blx	r3
      }
      return;
 8003926:	e2a5      	b.n	8003e74 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003928:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800392c:	2b00      	cmp	r3, #0
 800392e:	f000 8117 	beq.w	8003b60 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003932:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003936:	f003 0301 	and.w	r3, r3, #1
 800393a:	2b00      	cmp	r3, #0
 800393c:	d106      	bne.n	800394c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800393e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003942:	4b85      	ldr	r3, [pc, #532]	; (8003b58 <HAL_UART_IRQHandler+0x298>)
 8003944:	4013      	ands	r3, r2
 8003946:	2b00      	cmp	r3, #0
 8003948:	f000 810a 	beq.w	8003b60 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800394c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003950:	f003 0301 	and.w	r3, r3, #1
 8003954:	2b00      	cmp	r3, #0
 8003956:	d011      	beq.n	800397c <HAL_UART_IRQHandler+0xbc>
 8003958:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800395c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003960:	2b00      	cmp	r3, #0
 8003962:	d00b      	beq.n	800397c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	2201      	movs	r2, #1
 800396a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003972:	f043 0201 	orr.w	r2, r3, #1
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800397c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003980:	f003 0302 	and.w	r3, r3, #2
 8003984:	2b00      	cmp	r3, #0
 8003986:	d011      	beq.n	80039ac <HAL_UART_IRQHandler+0xec>
 8003988:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800398c:	f003 0301 	and.w	r3, r3, #1
 8003990:	2b00      	cmp	r3, #0
 8003992:	d00b      	beq.n	80039ac <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	2202      	movs	r2, #2
 800399a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039a2:	f043 0204 	orr.w	r2, r3, #4
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80039ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039b0:	f003 0304 	and.w	r3, r3, #4
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d011      	beq.n	80039dc <HAL_UART_IRQHandler+0x11c>
 80039b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80039bc:	f003 0301 	and.w	r3, r3, #1
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d00b      	beq.n	80039dc <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	2204      	movs	r2, #4
 80039ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039d2:	f043 0202 	orr.w	r2, r3, #2
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80039dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039e0:	f003 0308 	and.w	r3, r3, #8
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d017      	beq.n	8003a18 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80039e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039ec:	f003 0320 	and.w	r3, r3, #32
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d105      	bne.n	8003a00 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80039f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80039f8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d00b      	beq.n	8003a18 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	2208      	movs	r2, #8
 8003a06:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a0e:	f043 0208 	orr.w	r2, r3, #8
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003a18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a1c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d012      	beq.n	8003a4a <HAL_UART_IRQHandler+0x18a>
 8003a24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a28:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d00c      	beq.n	8003a4a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003a38:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a40:	f043 0220 	orr.w	r2, r3, #32
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	f000 8211 	beq.w	8003e78 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003a56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a5a:	f003 0320 	and.w	r3, r3, #32
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d00d      	beq.n	8003a7e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003a62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a66:	f003 0320 	and.w	r3, r3, #32
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d007      	beq.n	8003a7e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d003      	beq.n	8003a7e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003a7a:	6878      	ldr	r0, [r7, #4]
 8003a7c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a84:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	689b      	ldr	r3, [r3, #8]
 8003a8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a92:	2b40      	cmp	r3, #64	; 0x40
 8003a94:	d005      	beq.n	8003aa2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003a96:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003a9a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d04f      	beq.n	8003b42 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003aa2:	6878      	ldr	r0, [r7, #4]
 8003aa4:	f000 fd97 	bl	80045d6 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	689b      	ldr	r3, [r3, #8]
 8003aae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ab2:	2b40      	cmp	r3, #64	; 0x40
 8003ab4:	d141      	bne.n	8003b3a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	3308      	adds	r3, #8
 8003abc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ac0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003ac4:	e853 3f00 	ldrex	r3, [r3]
 8003ac8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003acc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003ad0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ad4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	3308      	adds	r3, #8
 8003ade:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003ae2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003ae6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003aee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003af2:	e841 2300 	strex	r3, r2, [r1]
 8003af6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003afa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d1d9      	bne.n	8003ab6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d013      	beq.n	8003b32 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b0e:	4a13      	ldr	r2, [pc, #76]	; (8003b5c <HAL_UART_IRQHandler+0x29c>)
 8003b10:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b16:	4618      	mov	r0, r3
 8003b18:	f7fd fa54 	bl	8000fc4 <HAL_DMA_Abort_IT>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d017      	beq.n	8003b52 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b28:	687a      	ldr	r2, [r7, #4]
 8003b2a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003b2c:	4610      	mov	r0, r2
 8003b2e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b30:	e00f      	b.n	8003b52 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003b32:	6878      	ldr	r0, [r7, #4]
 8003b34:	f000 f9b4 	bl	8003ea0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b38:	e00b      	b.n	8003b52 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003b3a:	6878      	ldr	r0, [r7, #4]
 8003b3c:	f000 f9b0 	bl	8003ea0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b40:	e007      	b.n	8003b52 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003b42:	6878      	ldr	r0, [r7, #4]
 8003b44:	f000 f9ac 	bl	8003ea0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8003b50:	e192      	b.n	8003e78 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b52:	bf00      	nop
    return;
 8003b54:	e190      	b.n	8003e78 <HAL_UART_IRQHandler+0x5b8>
 8003b56:	bf00      	nop
 8003b58:	04000120 	.word	0x04000120
 8003b5c:	0800469f 	.word	0x0800469f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b64:	2b01      	cmp	r3, #1
 8003b66:	f040 814b 	bne.w	8003e00 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003b6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b6e:	f003 0310 	and.w	r3, r3, #16
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	f000 8144 	beq.w	8003e00 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003b78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b7c:	f003 0310 	and.w	r3, r3, #16
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	f000 813d 	beq.w	8003e00 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	2210      	movs	r2, #16
 8003b8c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	689b      	ldr	r3, [r3, #8]
 8003b94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b98:	2b40      	cmp	r3, #64	; 0x40
 8003b9a:	f040 80b5 	bne.w	8003d08 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003baa:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	f000 8164 	beq.w	8003e7c <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003bba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003bbe:	429a      	cmp	r2, r3
 8003bc0:	f080 815c 	bcs.w	8003e7c <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003bca:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bd2:	699b      	ldr	r3, [r3, #24]
 8003bd4:	2b20      	cmp	r3, #32
 8003bd6:	f000 8086 	beq.w	8003ce6 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003be2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003be6:	e853 3f00 	ldrex	r3, [r3]
 8003bea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003bee:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003bf2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003bf6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	461a      	mov	r2, r3
 8003c00:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003c04:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003c08:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c0c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003c10:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003c14:	e841 2300 	strex	r3, r2, [r1]
 8003c18:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003c1c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d1da      	bne.n	8003bda <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	3308      	adds	r3, #8
 8003c2a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c2c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c2e:	e853 3f00 	ldrex	r3, [r3]
 8003c32:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003c34:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003c36:	f023 0301 	bic.w	r3, r3, #1
 8003c3a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	3308      	adds	r3, #8
 8003c44:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003c48:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003c4c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c4e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003c50:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003c54:	e841 2300 	strex	r3, r2, [r1]
 8003c58:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003c5a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d1e1      	bne.n	8003c24 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	3308      	adds	r3, #8
 8003c66:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c68:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003c6a:	e853 3f00 	ldrex	r3, [r3]
 8003c6e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003c70:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c72:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c76:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	3308      	adds	r3, #8
 8003c80:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003c84:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003c86:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c88:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003c8a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003c8c:	e841 2300 	strex	r3, r2, [r1]
 8003c90:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003c92:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d1e3      	bne.n	8003c60 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2220      	movs	r2, #32
 8003c9c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003cae:	e853 3f00 	ldrex	r3, [r3]
 8003cb2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003cb4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003cb6:	f023 0310 	bic.w	r3, r3, #16
 8003cba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	461a      	mov	r2, r3
 8003cc4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003cc8:	65bb      	str	r3, [r7, #88]	; 0x58
 8003cca:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ccc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003cce:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003cd0:	e841 2300 	strex	r3, r2, [r1]
 8003cd4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003cd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d1e4      	bne.n	8003ca6 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	f7fd f936 	bl	8000f52 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2202      	movs	r2, #2
 8003cea:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003cf8:	b29b      	uxth	r3, r3
 8003cfa:	1ad3      	subs	r3, r2, r3
 8003cfc:	b29b      	uxth	r3, r3
 8003cfe:	4619      	mov	r1, r3
 8003d00:	6878      	ldr	r0, [r7, #4]
 8003d02:	f000 f8d7 	bl	8003eb4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003d06:	e0b9      	b.n	8003e7c <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003d14:	b29b      	uxth	r3, r3
 8003d16:	1ad3      	subs	r3, r2, r3
 8003d18:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003d22:	b29b      	uxth	r3, r3
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	f000 80ab 	beq.w	8003e80 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8003d2a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	f000 80a6 	beq.w	8003e80 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d3c:	e853 3f00 	ldrex	r3, [r3]
 8003d40:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003d42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d44:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003d48:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	461a      	mov	r2, r3
 8003d52:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003d56:	647b      	str	r3, [r7, #68]	; 0x44
 8003d58:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d5a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003d5c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003d5e:	e841 2300 	strex	r3, r2, [r1]
 8003d62:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003d64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d1e4      	bne.n	8003d34 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	3308      	adds	r3, #8
 8003d70:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d74:	e853 3f00 	ldrex	r3, [r3]
 8003d78:	623b      	str	r3, [r7, #32]
   return(result);
 8003d7a:	6a3b      	ldr	r3, [r7, #32]
 8003d7c:	f023 0301 	bic.w	r3, r3, #1
 8003d80:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	3308      	adds	r3, #8
 8003d8a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003d8e:	633a      	str	r2, [r7, #48]	; 0x30
 8003d90:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d92:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003d94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d96:	e841 2300 	strex	r3, r2, [r1]
 8003d9a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003d9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d1e3      	bne.n	8003d6a <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2220      	movs	r2, #32
 8003da6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2200      	movs	r2, #0
 8003dae:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2200      	movs	r2, #0
 8003db4:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dbc:	693b      	ldr	r3, [r7, #16]
 8003dbe:	e853 3f00 	ldrex	r3, [r3]
 8003dc2:	60fb      	str	r3, [r7, #12]
   return(result);
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	f023 0310 	bic.w	r3, r3, #16
 8003dca:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	461a      	mov	r2, r3
 8003dd4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003dd8:	61fb      	str	r3, [r7, #28]
 8003dda:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ddc:	69b9      	ldr	r1, [r7, #24]
 8003dde:	69fa      	ldr	r2, [r7, #28]
 8003de0:	e841 2300 	strex	r3, r2, [r1]
 8003de4:	617b      	str	r3, [r7, #20]
   return(result);
 8003de6:	697b      	ldr	r3, [r7, #20]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d1e4      	bne.n	8003db6 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2202      	movs	r2, #2
 8003df0:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003df2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003df6:	4619      	mov	r1, r3
 8003df8:	6878      	ldr	r0, [r7, #4]
 8003dfa:	f000 f85b 	bl	8003eb4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003dfe:	e03f      	b.n	8003e80 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003e00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e04:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d00e      	beq.n	8003e2a <HAL_UART_IRQHandler+0x56a>
 8003e0c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003e10:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d008      	beq.n	8003e2a <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003e20:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003e22:	6878      	ldr	r0, [r7, #4]
 8003e24:	f000 fc7b 	bl	800471e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003e28:	e02d      	b.n	8003e86 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003e2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d00e      	beq.n	8003e54 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003e36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d008      	beq.n	8003e54 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d01c      	beq.n	8003e84 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e4e:	6878      	ldr	r0, [r7, #4]
 8003e50:	4798      	blx	r3
    }
    return;
 8003e52:	e017      	b.n	8003e84 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003e54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d012      	beq.n	8003e86 <HAL_UART_IRQHandler+0x5c6>
 8003e60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d00c      	beq.n	8003e86 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8003e6c:	6878      	ldr	r0, [r7, #4]
 8003e6e:	f000 fc2c 	bl	80046ca <UART_EndTransmit_IT>
    return;
 8003e72:	e008      	b.n	8003e86 <HAL_UART_IRQHandler+0x5c6>
      return;
 8003e74:	bf00      	nop
 8003e76:	e006      	b.n	8003e86 <HAL_UART_IRQHandler+0x5c6>
    return;
 8003e78:	bf00      	nop
 8003e7a:	e004      	b.n	8003e86 <HAL_UART_IRQHandler+0x5c6>
      return;
 8003e7c:	bf00      	nop
 8003e7e:	e002      	b.n	8003e86 <HAL_UART_IRQHandler+0x5c6>
      return;
 8003e80:	bf00      	nop
 8003e82:	e000      	b.n	8003e86 <HAL_UART_IRQHandler+0x5c6>
    return;
 8003e84:	bf00      	nop
  }

}
 8003e86:	37e8      	adds	r7, #232	; 0xe8
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bd80      	pop	{r7, pc}

08003e8c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b083      	sub	sp, #12
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003e94:	bf00      	nop
 8003e96:	370c      	adds	r7, #12
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9e:	4770      	bx	lr

08003ea0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b083      	sub	sp, #12
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003ea8:	bf00      	nop
 8003eaa:	370c      	adds	r7, #12
 8003eac:	46bd      	mov	sp, r7
 8003eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb2:	4770      	bx	lr

08003eb4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b083      	sub	sp, #12
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
 8003ebc:	460b      	mov	r3, r1
 8003ebe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003ec0:	bf00      	nop
 8003ec2:	370c      	adds	r7, #12
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eca:	4770      	bx	lr

08003ecc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b088      	sub	sp, #32
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	689a      	ldr	r2, [r3, #8]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	691b      	ldr	r3, [r3, #16]
 8003ee0:	431a      	orrs	r2, r3
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	695b      	ldr	r3, [r3, #20]
 8003ee6:	431a      	orrs	r2, r3
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	69db      	ldr	r3, [r3, #28]
 8003eec:	4313      	orrs	r3, r2
 8003eee:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	681a      	ldr	r2, [r3, #0]
 8003ef6:	4b92      	ldr	r3, [pc, #584]	; (8004140 <UART_SetConfig+0x274>)
 8003ef8:	4013      	ands	r3, r2
 8003efa:	687a      	ldr	r2, [r7, #4]
 8003efc:	6812      	ldr	r2, [r2, #0]
 8003efe:	6979      	ldr	r1, [r7, #20]
 8003f00:	430b      	orrs	r3, r1
 8003f02:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	68da      	ldr	r2, [r3, #12]
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	430a      	orrs	r2, r1
 8003f18:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	699b      	ldr	r3, [r3, #24]
 8003f1e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6a1b      	ldr	r3, [r3, #32]
 8003f24:	697a      	ldr	r2, [r7, #20]
 8003f26:	4313      	orrs	r3, r2
 8003f28:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	689b      	ldr	r3, [r3, #8]
 8003f30:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	697a      	ldr	r2, [r7, #20]
 8003f3a:	430a      	orrs	r2, r1
 8003f3c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a80      	ldr	r2, [pc, #512]	; (8004144 <UART_SetConfig+0x278>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d120      	bne.n	8003f8a <UART_SetConfig+0xbe>
 8003f48:	4b7f      	ldr	r3, [pc, #508]	; (8004148 <UART_SetConfig+0x27c>)
 8003f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f4c:	f003 0303 	and.w	r3, r3, #3
 8003f50:	2b03      	cmp	r3, #3
 8003f52:	d817      	bhi.n	8003f84 <UART_SetConfig+0xb8>
 8003f54:	a201      	add	r2, pc, #4	; (adr r2, 8003f5c <UART_SetConfig+0x90>)
 8003f56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f5a:	bf00      	nop
 8003f5c:	08003f6d 	.word	0x08003f6d
 8003f60:	08003f79 	.word	0x08003f79
 8003f64:	08003f7f 	.word	0x08003f7f
 8003f68:	08003f73 	.word	0x08003f73
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	77fb      	strb	r3, [r7, #31]
 8003f70:	e0b5      	b.n	80040de <UART_SetConfig+0x212>
 8003f72:	2302      	movs	r3, #2
 8003f74:	77fb      	strb	r3, [r7, #31]
 8003f76:	e0b2      	b.n	80040de <UART_SetConfig+0x212>
 8003f78:	2304      	movs	r3, #4
 8003f7a:	77fb      	strb	r3, [r7, #31]
 8003f7c:	e0af      	b.n	80040de <UART_SetConfig+0x212>
 8003f7e:	2308      	movs	r3, #8
 8003f80:	77fb      	strb	r3, [r7, #31]
 8003f82:	e0ac      	b.n	80040de <UART_SetConfig+0x212>
 8003f84:	2310      	movs	r3, #16
 8003f86:	77fb      	strb	r3, [r7, #31]
 8003f88:	e0a9      	b.n	80040de <UART_SetConfig+0x212>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a6f      	ldr	r2, [pc, #444]	; (800414c <UART_SetConfig+0x280>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d124      	bne.n	8003fde <UART_SetConfig+0x112>
 8003f94:	4b6c      	ldr	r3, [pc, #432]	; (8004148 <UART_SetConfig+0x27c>)
 8003f96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f98:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003f9c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003fa0:	d011      	beq.n	8003fc6 <UART_SetConfig+0xfa>
 8003fa2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003fa6:	d817      	bhi.n	8003fd8 <UART_SetConfig+0x10c>
 8003fa8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003fac:	d011      	beq.n	8003fd2 <UART_SetConfig+0x106>
 8003fae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003fb2:	d811      	bhi.n	8003fd8 <UART_SetConfig+0x10c>
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d003      	beq.n	8003fc0 <UART_SetConfig+0xf4>
 8003fb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fbc:	d006      	beq.n	8003fcc <UART_SetConfig+0x100>
 8003fbe:	e00b      	b.n	8003fd8 <UART_SetConfig+0x10c>
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	77fb      	strb	r3, [r7, #31]
 8003fc4:	e08b      	b.n	80040de <UART_SetConfig+0x212>
 8003fc6:	2302      	movs	r3, #2
 8003fc8:	77fb      	strb	r3, [r7, #31]
 8003fca:	e088      	b.n	80040de <UART_SetConfig+0x212>
 8003fcc:	2304      	movs	r3, #4
 8003fce:	77fb      	strb	r3, [r7, #31]
 8003fd0:	e085      	b.n	80040de <UART_SetConfig+0x212>
 8003fd2:	2308      	movs	r3, #8
 8003fd4:	77fb      	strb	r3, [r7, #31]
 8003fd6:	e082      	b.n	80040de <UART_SetConfig+0x212>
 8003fd8:	2310      	movs	r3, #16
 8003fda:	77fb      	strb	r3, [r7, #31]
 8003fdc:	e07f      	b.n	80040de <UART_SetConfig+0x212>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a5b      	ldr	r2, [pc, #364]	; (8004150 <UART_SetConfig+0x284>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d124      	bne.n	8004032 <UART_SetConfig+0x166>
 8003fe8:	4b57      	ldr	r3, [pc, #348]	; (8004148 <UART_SetConfig+0x27c>)
 8003fea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fec:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8003ff0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003ff4:	d011      	beq.n	800401a <UART_SetConfig+0x14e>
 8003ff6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003ffa:	d817      	bhi.n	800402c <UART_SetConfig+0x160>
 8003ffc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004000:	d011      	beq.n	8004026 <UART_SetConfig+0x15a>
 8004002:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004006:	d811      	bhi.n	800402c <UART_SetConfig+0x160>
 8004008:	2b00      	cmp	r3, #0
 800400a:	d003      	beq.n	8004014 <UART_SetConfig+0x148>
 800400c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004010:	d006      	beq.n	8004020 <UART_SetConfig+0x154>
 8004012:	e00b      	b.n	800402c <UART_SetConfig+0x160>
 8004014:	2300      	movs	r3, #0
 8004016:	77fb      	strb	r3, [r7, #31]
 8004018:	e061      	b.n	80040de <UART_SetConfig+0x212>
 800401a:	2302      	movs	r3, #2
 800401c:	77fb      	strb	r3, [r7, #31]
 800401e:	e05e      	b.n	80040de <UART_SetConfig+0x212>
 8004020:	2304      	movs	r3, #4
 8004022:	77fb      	strb	r3, [r7, #31]
 8004024:	e05b      	b.n	80040de <UART_SetConfig+0x212>
 8004026:	2308      	movs	r3, #8
 8004028:	77fb      	strb	r3, [r7, #31]
 800402a:	e058      	b.n	80040de <UART_SetConfig+0x212>
 800402c:	2310      	movs	r3, #16
 800402e:	77fb      	strb	r3, [r7, #31]
 8004030:	e055      	b.n	80040de <UART_SetConfig+0x212>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4a47      	ldr	r2, [pc, #284]	; (8004154 <UART_SetConfig+0x288>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d124      	bne.n	8004086 <UART_SetConfig+0x1ba>
 800403c:	4b42      	ldr	r3, [pc, #264]	; (8004148 <UART_SetConfig+0x27c>)
 800403e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004040:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004044:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004048:	d011      	beq.n	800406e <UART_SetConfig+0x1a2>
 800404a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800404e:	d817      	bhi.n	8004080 <UART_SetConfig+0x1b4>
 8004050:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004054:	d011      	beq.n	800407a <UART_SetConfig+0x1ae>
 8004056:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800405a:	d811      	bhi.n	8004080 <UART_SetConfig+0x1b4>
 800405c:	2b00      	cmp	r3, #0
 800405e:	d003      	beq.n	8004068 <UART_SetConfig+0x19c>
 8004060:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004064:	d006      	beq.n	8004074 <UART_SetConfig+0x1a8>
 8004066:	e00b      	b.n	8004080 <UART_SetConfig+0x1b4>
 8004068:	2300      	movs	r3, #0
 800406a:	77fb      	strb	r3, [r7, #31]
 800406c:	e037      	b.n	80040de <UART_SetConfig+0x212>
 800406e:	2302      	movs	r3, #2
 8004070:	77fb      	strb	r3, [r7, #31]
 8004072:	e034      	b.n	80040de <UART_SetConfig+0x212>
 8004074:	2304      	movs	r3, #4
 8004076:	77fb      	strb	r3, [r7, #31]
 8004078:	e031      	b.n	80040de <UART_SetConfig+0x212>
 800407a:	2308      	movs	r3, #8
 800407c:	77fb      	strb	r3, [r7, #31]
 800407e:	e02e      	b.n	80040de <UART_SetConfig+0x212>
 8004080:	2310      	movs	r3, #16
 8004082:	77fb      	strb	r3, [r7, #31]
 8004084:	e02b      	b.n	80040de <UART_SetConfig+0x212>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4a33      	ldr	r2, [pc, #204]	; (8004158 <UART_SetConfig+0x28c>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d124      	bne.n	80040da <UART_SetConfig+0x20e>
 8004090:	4b2d      	ldr	r3, [pc, #180]	; (8004148 <UART_SetConfig+0x27c>)
 8004092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004094:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8004098:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800409c:	d011      	beq.n	80040c2 <UART_SetConfig+0x1f6>
 800409e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80040a2:	d817      	bhi.n	80040d4 <UART_SetConfig+0x208>
 80040a4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80040a8:	d011      	beq.n	80040ce <UART_SetConfig+0x202>
 80040aa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80040ae:	d811      	bhi.n	80040d4 <UART_SetConfig+0x208>
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d003      	beq.n	80040bc <UART_SetConfig+0x1f0>
 80040b4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80040b8:	d006      	beq.n	80040c8 <UART_SetConfig+0x1fc>
 80040ba:	e00b      	b.n	80040d4 <UART_SetConfig+0x208>
 80040bc:	2300      	movs	r3, #0
 80040be:	77fb      	strb	r3, [r7, #31]
 80040c0:	e00d      	b.n	80040de <UART_SetConfig+0x212>
 80040c2:	2302      	movs	r3, #2
 80040c4:	77fb      	strb	r3, [r7, #31]
 80040c6:	e00a      	b.n	80040de <UART_SetConfig+0x212>
 80040c8:	2304      	movs	r3, #4
 80040ca:	77fb      	strb	r3, [r7, #31]
 80040cc:	e007      	b.n	80040de <UART_SetConfig+0x212>
 80040ce:	2308      	movs	r3, #8
 80040d0:	77fb      	strb	r3, [r7, #31]
 80040d2:	e004      	b.n	80040de <UART_SetConfig+0x212>
 80040d4:	2310      	movs	r3, #16
 80040d6:	77fb      	strb	r3, [r7, #31]
 80040d8:	e001      	b.n	80040de <UART_SetConfig+0x212>
 80040da:	2310      	movs	r3, #16
 80040dc:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	69db      	ldr	r3, [r3, #28]
 80040e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040e6:	d16b      	bne.n	80041c0 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 80040e8:	7ffb      	ldrb	r3, [r7, #31]
 80040ea:	2b08      	cmp	r3, #8
 80040ec:	d838      	bhi.n	8004160 <UART_SetConfig+0x294>
 80040ee:	a201      	add	r2, pc, #4	; (adr r2, 80040f4 <UART_SetConfig+0x228>)
 80040f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040f4:	08004119 	.word	0x08004119
 80040f8:	08004121 	.word	0x08004121
 80040fc:	08004129 	.word	0x08004129
 8004100:	08004161 	.word	0x08004161
 8004104:	0800412f 	.word	0x0800412f
 8004108:	08004161 	.word	0x08004161
 800410c:	08004161 	.word	0x08004161
 8004110:	08004161 	.word	0x08004161
 8004114:	08004137 	.word	0x08004137
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004118:	f7fe fb94 	bl	8002844 <HAL_RCC_GetPCLK1Freq>
 800411c:	61b8      	str	r0, [r7, #24]
        break;
 800411e:	e024      	b.n	800416a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004120:	f7fe fbb2 	bl	8002888 <HAL_RCC_GetPCLK2Freq>
 8004124:	61b8      	str	r0, [r7, #24]
        break;
 8004126:	e020      	b.n	800416a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004128:	4b0c      	ldr	r3, [pc, #48]	; (800415c <UART_SetConfig+0x290>)
 800412a:	61bb      	str	r3, [r7, #24]
        break;
 800412c:	e01d      	b.n	800416a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800412e:	f7fe fb13 	bl	8002758 <HAL_RCC_GetSysClockFreq>
 8004132:	61b8      	str	r0, [r7, #24]
        break;
 8004134:	e019      	b.n	800416a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004136:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800413a:	61bb      	str	r3, [r7, #24]
        break;
 800413c:	e015      	b.n	800416a <UART_SetConfig+0x29e>
 800413e:	bf00      	nop
 8004140:	efff69f3 	.word	0xefff69f3
 8004144:	40013800 	.word	0x40013800
 8004148:	40021000 	.word	0x40021000
 800414c:	40004400 	.word	0x40004400
 8004150:	40004800 	.word	0x40004800
 8004154:	40004c00 	.word	0x40004c00
 8004158:	40005000 	.word	0x40005000
 800415c:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8004160:	2300      	movs	r3, #0
 8004162:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004164:	2301      	movs	r3, #1
 8004166:	77bb      	strb	r3, [r7, #30]
        break;
 8004168:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800416a:	69bb      	ldr	r3, [r7, #24]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d073      	beq.n	8004258 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004170:	69bb      	ldr	r3, [r7, #24]
 8004172:	005a      	lsls	r2, r3, #1
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	085b      	lsrs	r3, r3, #1
 800417a:	441a      	add	r2, r3
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	fbb2 f3f3 	udiv	r3, r2, r3
 8004184:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004186:	693b      	ldr	r3, [r7, #16]
 8004188:	2b0f      	cmp	r3, #15
 800418a:	d916      	bls.n	80041ba <UART_SetConfig+0x2ee>
 800418c:	693b      	ldr	r3, [r7, #16]
 800418e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004192:	d212      	bcs.n	80041ba <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004194:	693b      	ldr	r3, [r7, #16]
 8004196:	b29b      	uxth	r3, r3
 8004198:	f023 030f 	bic.w	r3, r3, #15
 800419c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800419e:	693b      	ldr	r3, [r7, #16]
 80041a0:	085b      	lsrs	r3, r3, #1
 80041a2:	b29b      	uxth	r3, r3
 80041a4:	f003 0307 	and.w	r3, r3, #7
 80041a8:	b29a      	uxth	r2, r3
 80041aa:	89fb      	ldrh	r3, [r7, #14]
 80041ac:	4313      	orrs	r3, r2
 80041ae:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	89fa      	ldrh	r2, [r7, #14]
 80041b6:	60da      	str	r2, [r3, #12]
 80041b8:	e04e      	b.n	8004258 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80041ba:	2301      	movs	r3, #1
 80041bc:	77bb      	strb	r3, [r7, #30]
 80041be:	e04b      	b.n	8004258 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80041c0:	7ffb      	ldrb	r3, [r7, #31]
 80041c2:	2b08      	cmp	r3, #8
 80041c4:	d827      	bhi.n	8004216 <UART_SetConfig+0x34a>
 80041c6:	a201      	add	r2, pc, #4	; (adr r2, 80041cc <UART_SetConfig+0x300>)
 80041c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041cc:	080041f1 	.word	0x080041f1
 80041d0:	080041f9 	.word	0x080041f9
 80041d4:	08004201 	.word	0x08004201
 80041d8:	08004217 	.word	0x08004217
 80041dc:	08004207 	.word	0x08004207
 80041e0:	08004217 	.word	0x08004217
 80041e4:	08004217 	.word	0x08004217
 80041e8:	08004217 	.word	0x08004217
 80041ec:	0800420f 	.word	0x0800420f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80041f0:	f7fe fb28 	bl	8002844 <HAL_RCC_GetPCLK1Freq>
 80041f4:	61b8      	str	r0, [r7, #24]
        break;
 80041f6:	e013      	b.n	8004220 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80041f8:	f7fe fb46 	bl	8002888 <HAL_RCC_GetPCLK2Freq>
 80041fc:	61b8      	str	r0, [r7, #24]
        break;
 80041fe:	e00f      	b.n	8004220 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004200:	4b1b      	ldr	r3, [pc, #108]	; (8004270 <UART_SetConfig+0x3a4>)
 8004202:	61bb      	str	r3, [r7, #24]
        break;
 8004204:	e00c      	b.n	8004220 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004206:	f7fe faa7 	bl	8002758 <HAL_RCC_GetSysClockFreq>
 800420a:	61b8      	str	r0, [r7, #24]
        break;
 800420c:	e008      	b.n	8004220 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800420e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004212:	61bb      	str	r3, [r7, #24]
        break;
 8004214:	e004      	b.n	8004220 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8004216:	2300      	movs	r3, #0
 8004218:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800421a:	2301      	movs	r3, #1
 800421c:	77bb      	strb	r3, [r7, #30]
        break;
 800421e:	bf00      	nop
    }

    if (pclk != 0U)
 8004220:	69bb      	ldr	r3, [r7, #24]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d018      	beq.n	8004258 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	085a      	lsrs	r2, r3, #1
 800422c:	69bb      	ldr	r3, [r7, #24]
 800422e:	441a      	add	r2, r3
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	fbb2 f3f3 	udiv	r3, r2, r3
 8004238:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800423a:	693b      	ldr	r3, [r7, #16]
 800423c:	2b0f      	cmp	r3, #15
 800423e:	d909      	bls.n	8004254 <UART_SetConfig+0x388>
 8004240:	693b      	ldr	r3, [r7, #16]
 8004242:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004246:	d205      	bcs.n	8004254 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004248:	693b      	ldr	r3, [r7, #16]
 800424a:	b29a      	uxth	r2, r3
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	60da      	str	r2, [r3, #12]
 8004252:	e001      	b.n	8004258 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8004254:	2301      	movs	r3, #1
 8004256:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2200      	movs	r2, #0
 800425c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2200      	movs	r2, #0
 8004262:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004264:	7fbb      	ldrb	r3, [r7, #30]
}
 8004266:	4618      	mov	r0, r3
 8004268:	3720      	adds	r7, #32
 800426a:	46bd      	mov	sp, r7
 800426c:	bd80      	pop	{r7, pc}
 800426e:	bf00      	nop
 8004270:	007a1200 	.word	0x007a1200

08004274 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004274:	b480      	push	{r7}
 8004276:	b083      	sub	sp, #12
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004280:	f003 0301 	and.w	r3, r3, #1
 8004284:	2b00      	cmp	r3, #0
 8004286:	d00a      	beq.n	800429e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	430a      	orrs	r2, r1
 800429c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a2:	f003 0302 	and.w	r3, r3, #2
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d00a      	beq.n	80042c0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	430a      	orrs	r2, r1
 80042be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c4:	f003 0304 	and.w	r3, r3, #4
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d00a      	beq.n	80042e2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	430a      	orrs	r2, r1
 80042e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e6:	f003 0308 	and.w	r3, r3, #8
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d00a      	beq.n	8004304 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	685b      	ldr	r3, [r3, #4]
 80042f4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	430a      	orrs	r2, r1
 8004302:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004308:	f003 0310 	and.w	r3, r3, #16
 800430c:	2b00      	cmp	r3, #0
 800430e:	d00a      	beq.n	8004326 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	689b      	ldr	r3, [r3, #8]
 8004316:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	430a      	orrs	r2, r1
 8004324:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800432a:	f003 0320 	and.w	r3, r3, #32
 800432e:	2b00      	cmp	r3, #0
 8004330:	d00a      	beq.n	8004348 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	689b      	ldr	r3, [r3, #8]
 8004338:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	430a      	orrs	r2, r1
 8004346:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800434c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004350:	2b00      	cmp	r3, #0
 8004352:	d01a      	beq.n	800438a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	430a      	orrs	r2, r1
 8004368:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800436e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004372:	d10a      	bne.n	800438a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	685b      	ldr	r3, [r3, #4]
 800437a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	430a      	orrs	r2, r1
 8004388:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800438e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004392:	2b00      	cmp	r3, #0
 8004394:	d00a      	beq.n	80043ac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	430a      	orrs	r2, r1
 80043aa:	605a      	str	r2, [r3, #4]
  }
}
 80043ac:	bf00      	nop
 80043ae:	370c      	adds	r7, #12
 80043b0:	46bd      	mov	sp, r7
 80043b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b6:	4770      	bx	lr

080043b8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b098      	sub	sp, #96	; 0x60
 80043bc:	af02      	add	r7, sp, #8
 80043be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2200      	movs	r2, #0
 80043c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80043c8:	f7fc fc82 	bl	8000cd0 <HAL_GetTick>
 80043cc:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f003 0308 	and.w	r3, r3, #8
 80043d8:	2b08      	cmp	r3, #8
 80043da:	d12e      	bne.n	800443a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80043dc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80043e0:	9300      	str	r3, [sp, #0]
 80043e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80043e4:	2200      	movs	r2, #0
 80043e6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80043ea:	6878      	ldr	r0, [r7, #4]
 80043ec:	f000 f88c 	bl	8004508 <UART_WaitOnFlagUntilTimeout>
 80043f0:	4603      	mov	r3, r0
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d021      	beq.n	800443a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043fe:	e853 3f00 	ldrex	r3, [r3]
 8004402:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004404:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004406:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800440a:	653b      	str	r3, [r7, #80]	; 0x50
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	461a      	mov	r2, r3
 8004412:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004414:	647b      	str	r3, [r7, #68]	; 0x44
 8004416:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004418:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800441a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800441c:	e841 2300 	strex	r3, r2, [r1]
 8004420:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004422:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004424:	2b00      	cmp	r3, #0
 8004426:	d1e6      	bne.n	80043f6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2220      	movs	r2, #32
 800442c:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2200      	movs	r2, #0
 8004432:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004436:	2303      	movs	r3, #3
 8004438:	e062      	b.n	8004500 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f003 0304 	and.w	r3, r3, #4
 8004444:	2b04      	cmp	r3, #4
 8004446:	d149      	bne.n	80044dc <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004448:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800444c:	9300      	str	r3, [sp, #0]
 800444e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004450:	2200      	movs	r2, #0
 8004452:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004456:	6878      	ldr	r0, [r7, #4]
 8004458:	f000 f856 	bl	8004508 <UART_WaitOnFlagUntilTimeout>
 800445c:	4603      	mov	r3, r0
 800445e:	2b00      	cmp	r3, #0
 8004460:	d03c      	beq.n	80044dc <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800446a:	e853 3f00 	ldrex	r3, [r3]
 800446e:	623b      	str	r3, [r7, #32]
   return(result);
 8004470:	6a3b      	ldr	r3, [r7, #32]
 8004472:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004476:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	461a      	mov	r2, r3
 800447e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004480:	633b      	str	r3, [r7, #48]	; 0x30
 8004482:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004484:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004486:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004488:	e841 2300 	strex	r3, r2, [r1]
 800448c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800448e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004490:	2b00      	cmp	r3, #0
 8004492:	d1e6      	bne.n	8004462 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	3308      	adds	r3, #8
 800449a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800449c:	693b      	ldr	r3, [r7, #16]
 800449e:	e853 3f00 	ldrex	r3, [r3]
 80044a2:	60fb      	str	r3, [r7, #12]
   return(result);
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	f023 0301 	bic.w	r3, r3, #1
 80044aa:	64bb      	str	r3, [r7, #72]	; 0x48
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	3308      	adds	r3, #8
 80044b2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80044b4:	61fa      	str	r2, [r7, #28]
 80044b6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044b8:	69b9      	ldr	r1, [r7, #24]
 80044ba:	69fa      	ldr	r2, [r7, #28]
 80044bc:	e841 2300 	strex	r3, r2, [r1]
 80044c0:	617b      	str	r3, [r7, #20]
   return(result);
 80044c2:	697b      	ldr	r3, [r7, #20]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d1e5      	bne.n	8004494 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2220      	movs	r2, #32
 80044cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2200      	movs	r2, #0
 80044d4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80044d8:	2303      	movs	r3, #3
 80044da:	e011      	b.n	8004500 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2220      	movs	r2, #32
 80044e0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2220      	movs	r2, #32
 80044e6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2200      	movs	r2, #0
 80044ee:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2200      	movs	r2, #0
 80044f4:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2200      	movs	r2, #0
 80044fa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80044fe:	2300      	movs	r3, #0
}
 8004500:	4618      	mov	r0, r3
 8004502:	3758      	adds	r7, #88	; 0x58
 8004504:	46bd      	mov	sp, r7
 8004506:	bd80      	pop	{r7, pc}

08004508 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b084      	sub	sp, #16
 800450c:	af00      	add	r7, sp, #0
 800450e:	60f8      	str	r0, [r7, #12]
 8004510:	60b9      	str	r1, [r7, #8]
 8004512:	603b      	str	r3, [r7, #0]
 8004514:	4613      	mov	r3, r2
 8004516:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004518:	e049      	b.n	80045ae <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800451a:	69bb      	ldr	r3, [r7, #24]
 800451c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004520:	d045      	beq.n	80045ae <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004522:	f7fc fbd5 	bl	8000cd0 <HAL_GetTick>
 8004526:	4602      	mov	r2, r0
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	1ad3      	subs	r3, r2, r3
 800452c:	69ba      	ldr	r2, [r7, #24]
 800452e:	429a      	cmp	r2, r3
 8004530:	d302      	bcc.n	8004538 <UART_WaitOnFlagUntilTimeout+0x30>
 8004532:	69bb      	ldr	r3, [r7, #24]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d101      	bne.n	800453c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004538:	2303      	movs	r3, #3
 800453a:	e048      	b.n	80045ce <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f003 0304 	and.w	r3, r3, #4
 8004546:	2b00      	cmp	r3, #0
 8004548:	d031      	beq.n	80045ae <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	69db      	ldr	r3, [r3, #28]
 8004550:	f003 0308 	and.w	r3, r3, #8
 8004554:	2b08      	cmp	r3, #8
 8004556:	d110      	bne.n	800457a <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	2208      	movs	r2, #8
 800455e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8004560:	68f8      	ldr	r0, [r7, #12]
 8004562:	f000 f838 	bl	80045d6 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	2208      	movs	r2, #8
 800456a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	2200      	movs	r2, #0
 8004572:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8004576:	2301      	movs	r3, #1
 8004578:	e029      	b.n	80045ce <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	69db      	ldr	r3, [r3, #28]
 8004580:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004584:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004588:	d111      	bne.n	80045ae <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004592:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004594:	68f8      	ldr	r0, [r7, #12]
 8004596:	f000 f81e 	bl	80045d6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	2220      	movs	r2, #32
 800459e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	2200      	movs	r2, #0
 80045a6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80045aa:	2303      	movs	r3, #3
 80045ac:	e00f      	b.n	80045ce <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	69da      	ldr	r2, [r3, #28]
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	4013      	ands	r3, r2
 80045b8:	68ba      	ldr	r2, [r7, #8]
 80045ba:	429a      	cmp	r2, r3
 80045bc:	bf0c      	ite	eq
 80045be:	2301      	moveq	r3, #1
 80045c0:	2300      	movne	r3, #0
 80045c2:	b2db      	uxtb	r3, r3
 80045c4:	461a      	mov	r2, r3
 80045c6:	79fb      	ldrb	r3, [r7, #7]
 80045c8:	429a      	cmp	r2, r3
 80045ca:	d0a6      	beq.n	800451a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80045cc:	2300      	movs	r3, #0
}
 80045ce:	4618      	mov	r0, r3
 80045d0:	3710      	adds	r7, #16
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bd80      	pop	{r7, pc}

080045d6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80045d6:	b480      	push	{r7}
 80045d8:	b095      	sub	sp, #84	; 0x54
 80045da:	af00      	add	r7, sp, #0
 80045dc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045e6:	e853 3f00 	ldrex	r3, [r3]
 80045ea:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80045ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045ee:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80045f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	461a      	mov	r2, r3
 80045fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045fc:	643b      	str	r3, [r7, #64]	; 0x40
 80045fe:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004600:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004602:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004604:	e841 2300 	strex	r3, r2, [r1]
 8004608:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800460a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800460c:	2b00      	cmp	r3, #0
 800460e:	d1e6      	bne.n	80045de <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	3308      	adds	r3, #8
 8004616:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004618:	6a3b      	ldr	r3, [r7, #32]
 800461a:	e853 3f00 	ldrex	r3, [r3]
 800461e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004620:	69fb      	ldr	r3, [r7, #28]
 8004622:	f023 0301 	bic.w	r3, r3, #1
 8004626:	64bb      	str	r3, [r7, #72]	; 0x48
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	3308      	adds	r3, #8
 800462e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004630:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004632:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004634:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004636:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004638:	e841 2300 	strex	r3, r2, [r1]
 800463c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800463e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004640:	2b00      	cmp	r3, #0
 8004642:	d1e5      	bne.n	8004610 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004648:	2b01      	cmp	r3, #1
 800464a:	d118      	bne.n	800467e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	e853 3f00 	ldrex	r3, [r3]
 8004658:	60bb      	str	r3, [r7, #8]
   return(result);
 800465a:	68bb      	ldr	r3, [r7, #8]
 800465c:	f023 0310 	bic.w	r3, r3, #16
 8004660:	647b      	str	r3, [r7, #68]	; 0x44
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	461a      	mov	r2, r3
 8004668:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800466a:	61bb      	str	r3, [r7, #24]
 800466c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800466e:	6979      	ldr	r1, [r7, #20]
 8004670:	69ba      	ldr	r2, [r7, #24]
 8004672:	e841 2300 	strex	r3, r2, [r1]
 8004676:	613b      	str	r3, [r7, #16]
   return(result);
 8004678:	693b      	ldr	r3, [r7, #16]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d1e6      	bne.n	800464c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2220      	movs	r2, #32
 8004682:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2200      	movs	r2, #0
 800468a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2200      	movs	r2, #0
 8004690:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004692:	bf00      	nop
 8004694:	3754      	adds	r7, #84	; 0x54
 8004696:	46bd      	mov	sp, r7
 8004698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469c:	4770      	bx	lr

0800469e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800469e:	b580      	push	{r7, lr}
 80046a0:	b084      	sub	sp, #16
 80046a2:	af00      	add	r7, sp, #0
 80046a4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046aa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	2200      	movs	r2, #0
 80046b0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	2200      	movs	r2, #0
 80046b8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80046bc:	68f8      	ldr	r0, [r7, #12]
 80046be:	f7ff fbef 	bl	8003ea0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80046c2:	bf00      	nop
 80046c4:	3710      	adds	r7, #16
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bd80      	pop	{r7, pc}

080046ca <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80046ca:	b580      	push	{r7, lr}
 80046cc:	b088      	sub	sp, #32
 80046ce:	af00      	add	r7, sp, #0
 80046d0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	e853 3f00 	ldrex	r3, [r3]
 80046de:	60bb      	str	r3, [r7, #8]
   return(result);
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80046e6:	61fb      	str	r3, [r7, #28]
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	461a      	mov	r2, r3
 80046ee:	69fb      	ldr	r3, [r7, #28]
 80046f0:	61bb      	str	r3, [r7, #24]
 80046f2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046f4:	6979      	ldr	r1, [r7, #20]
 80046f6:	69ba      	ldr	r2, [r7, #24]
 80046f8:	e841 2300 	strex	r3, r2, [r1]
 80046fc:	613b      	str	r3, [r7, #16]
   return(result);
 80046fe:	693b      	ldr	r3, [r7, #16]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d1e6      	bne.n	80046d2 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2220      	movs	r2, #32
 8004708:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2200      	movs	r2, #0
 800470e:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004710:	6878      	ldr	r0, [r7, #4]
 8004712:	f7ff fbbb 	bl	8003e8c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004716:	bf00      	nop
 8004718:	3720      	adds	r7, #32
 800471a:	46bd      	mov	sp, r7
 800471c:	bd80      	pop	{r7, pc}

0800471e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800471e:	b480      	push	{r7}
 8004720:	b083      	sub	sp, #12
 8004722:	af00      	add	r7, sp, #0
 8004724:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004726:	bf00      	nop
 8004728:	370c      	adds	r7, #12
 800472a:	46bd      	mov	sp, r7
 800472c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004730:	4770      	bx	lr

08004732 <memset>:
 8004732:	4402      	add	r2, r0
 8004734:	4603      	mov	r3, r0
 8004736:	4293      	cmp	r3, r2
 8004738:	d100      	bne.n	800473c <memset+0xa>
 800473a:	4770      	bx	lr
 800473c:	f803 1b01 	strb.w	r1, [r3], #1
 8004740:	e7f9      	b.n	8004736 <memset+0x4>

08004742 <strchr>:
 8004742:	b2c9      	uxtb	r1, r1
 8004744:	4603      	mov	r3, r0
 8004746:	f810 2b01 	ldrb.w	r2, [r0], #1
 800474a:	b11a      	cbz	r2, 8004754 <strchr+0x12>
 800474c:	428a      	cmp	r2, r1
 800474e:	d1f9      	bne.n	8004744 <strchr+0x2>
 8004750:	4618      	mov	r0, r3
 8004752:	4770      	bx	lr
 8004754:	2900      	cmp	r1, #0
 8004756:	bf18      	it	ne
 8004758:	2300      	movne	r3, #0
 800475a:	e7f9      	b.n	8004750 <strchr+0xe>

0800475c <strncpy>:
 800475c:	b510      	push	{r4, lr}
 800475e:	3901      	subs	r1, #1
 8004760:	4603      	mov	r3, r0
 8004762:	b132      	cbz	r2, 8004772 <strncpy+0x16>
 8004764:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8004768:	f803 4b01 	strb.w	r4, [r3], #1
 800476c:	3a01      	subs	r2, #1
 800476e:	2c00      	cmp	r4, #0
 8004770:	d1f7      	bne.n	8004762 <strncpy+0x6>
 8004772:	441a      	add	r2, r3
 8004774:	2100      	movs	r1, #0
 8004776:	4293      	cmp	r3, r2
 8004778:	d100      	bne.n	800477c <strncpy+0x20>
 800477a:	bd10      	pop	{r4, pc}
 800477c:	f803 1b01 	strb.w	r1, [r3], #1
 8004780:	e7f9      	b.n	8004776 <strncpy+0x1a>
	...

08004784 <__libc_init_array>:
 8004784:	b570      	push	{r4, r5, r6, lr}
 8004786:	4d0d      	ldr	r5, [pc, #52]	; (80047bc <__libc_init_array+0x38>)
 8004788:	4c0d      	ldr	r4, [pc, #52]	; (80047c0 <__libc_init_array+0x3c>)
 800478a:	1b64      	subs	r4, r4, r5
 800478c:	10a4      	asrs	r4, r4, #2
 800478e:	2600      	movs	r6, #0
 8004790:	42a6      	cmp	r6, r4
 8004792:	d109      	bne.n	80047a8 <__libc_init_array+0x24>
 8004794:	4d0b      	ldr	r5, [pc, #44]	; (80047c4 <__libc_init_array+0x40>)
 8004796:	4c0c      	ldr	r4, [pc, #48]	; (80047c8 <__libc_init_array+0x44>)
 8004798:	f000 f820 	bl	80047dc <_init>
 800479c:	1b64      	subs	r4, r4, r5
 800479e:	10a4      	asrs	r4, r4, #2
 80047a0:	2600      	movs	r6, #0
 80047a2:	42a6      	cmp	r6, r4
 80047a4:	d105      	bne.n	80047b2 <__libc_init_array+0x2e>
 80047a6:	bd70      	pop	{r4, r5, r6, pc}
 80047a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80047ac:	4798      	blx	r3
 80047ae:	3601      	adds	r6, #1
 80047b0:	e7ee      	b.n	8004790 <__libc_init_array+0xc>
 80047b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80047b6:	4798      	blx	r3
 80047b8:	3601      	adds	r6, #1
 80047ba:	e7f2      	b.n	80047a2 <__libc_init_array+0x1e>
 80047bc:	08004830 	.word	0x08004830
 80047c0:	08004830 	.word	0x08004830
 80047c4:	08004830 	.word	0x08004830
 80047c8:	08004834 	.word	0x08004834

080047cc <strcpy>:
 80047cc:	4603      	mov	r3, r0
 80047ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 80047d2:	f803 2b01 	strb.w	r2, [r3], #1
 80047d6:	2a00      	cmp	r2, #0
 80047d8:	d1f9      	bne.n	80047ce <strcpy+0x2>
 80047da:	4770      	bx	lr

080047dc <_init>:
 80047dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047de:	bf00      	nop
 80047e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047e2:	bc08      	pop	{r3}
 80047e4:	469e      	mov	lr, r3
 80047e6:	4770      	bx	lr

080047e8 <_fini>:
 80047e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047ea:	bf00      	nop
 80047ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047ee:	bc08      	pop	{r3}
 80047f0:	469e      	mov	lr, r3
 80047f2:	4770      	bx	lr
